<?xml version="1.0" encoding="UTF-8"?>
<testsuite xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="https://maven.apache.org/surefire/maven-surefire-plugin/xsd/surefire-test-report-3.0.xsd" version="3.0" name="com.singtel.network.repository.UserRepositoryTest" time="1.412" tests="23" errors="0" skipped="0" failures="0">
  <properties>
    <property name="java.specification.version" value="17"/>
    <property name="sun.jnu.encoding" value="UTF-8"/>
    <property name="java.class.path" value="/Users/BAORLIM/playground/singtel-job-network/backend/target/test-classes:/Users/BAORLIM/playground/singtel-job-network/backend/target/classes:/Users/BAORLIM/.m2/repository/org/springframework/boot/spring-boot-starter-web/3.2.0/spring-boot-starter-web-3.2.0.jar:/Users/BAORLIM/.m2/repository/org/springframework/boot/spring-boot-starter/3.2.0/spring-boot-starter-3.2.0.jar:/Users/BAORLIM/.m2/repository/org/springframework/boot/spring-boot-starter-logging/3.2.0/spring-boot-starter-logging-3.2.0.jar:/Users/BAORLIM/.m2/repository/org/apache/logging/log4j/log4j-to-slf4j/2.21.1/log4j-to-slf4j-2.21.1.jar:/Users/BAORLIM/.m2/repository/org/apache/logging/log4j/log4j-api/2.21.1/log4j-api-2.21.1.jar:/Users/BAORLIM/.m2/repository/org/slf4j/jul-to-slf4j/2.0.9/jul-to-slf4j-2.0.9.jar:/Users/BAORLIM/.m2/repository/jakarta/annotation/jakarta.annotation-api/2.1.1/jakarta.annotation-api-2.1.1.jar:/Users/BAORLIM/.m2/repository/org/yaml/snakeyaml/2.2/snakeyaml-2.2.jar:/Users/BAORLIM/.m2/repository/org/springframework/boot/spring-boot-starter-json/3.2.0/spring-boot-starter-json-3.2.0.jar:/Users/BAORLIM/.m2/repository/com/fasterxml/jackson/datatype/jackson-datatype-jdk8/2.15.3/jackson-datatype-jdk8-2.15.3.jar:/Users/BAORLIM/.m2/repository/com/fasterxml/jackson/datatype/jackson-datatype-jsr310/2.15.3/jackson-datatype-jsr310-2.15.3.jar:/Users/BAORLIM/.m2/repository/com/fasterxml/jackson/module/jackson-module-parameter-names/2.15.3/jackson-module-parameter-names-2.15.3.jar:/Users/BAORLIM/.m2/repository/org/springframework/boot/spring-boot-starter-tomcat/3.2.0/spring-boot-starter-tomcat-3.2.0.jar:/Users/BAORLIM/.m2/repository/org/apache/tomcat/embed/tomcat-embed-core/10.1.16/tomcat-embed-core-10.1.16.jar:/Users/BAORLIM/.m2/repository/org/apache/tomcat/embed/tomcat-embed-websocket/10.1.16/tomcat-embed-websocket-10.1.16.jar:/Users/BAORLIM/.m2/repository/org/springframework/spring-web/6.1.1/spring-web-6.1.1.jar:/Users/BAORLIM/.m2/repository/org/springframework/spring-beans/6.1.1/spring-beans-6.1.1.jar:/Users/BAORLIM/.m2/repository/org/springframework/spring-webmvc/6.1.1/spring-webmvc-6.1.1.jar:/Users/BAORLIM/.m2/repository/org/springframework/spring-expression/6.1.1/spring-expression-6.1.1.jar:/Users/BAORLIM/.m2/repository/org/springframework/boot/spring-boot-starter-data-jpa/3.2.0/spring-boot-starter-data-jpa-3.2.0.jar:/Users/BAORLIM/.m2/repository/org/springframework/boot/spring-boot-starter-aop/3.2.0/spring-boot-starter-aop-3.2.0.jar:/Users/BAORLIM/.m2/repository/org/aspectj/aspectjweaver/1.9.20.1/aspectjweaver-1.9.20.1.jar:/Users/BAORLIM/.m2/repository/org/springframework/boot/spring-boot-starter-jdbc/3.2.0/spring-boot-starter-jdbc-3.2.0.jar:/Users/BAORLIM/.m2/repository/com/zaxxer/HikariCP/5.0.1/HikariCP-5.0.1.jar:/Users/BAORLIM/.m2/repository/org/springframework/spring-jdbc/6.1.1/spring-jdbc-6.1.1.jar:/Users/BAORLIM/.m2/repository/org/hibernate/orm/hibernate-core/6.3.1.Final/hibernate-core-6.3.1.Final.jar:/Users/BAORLIM/.m2/repository/jakarta/persistence/jakarta.persistence-api/3.1.0/jakarta.persistence-api-3.1.0.jar:/Users/BAORLIM/.m2/repository/jakarta/transaction/jakarta.transaction-api/2.0.1/jakarta.transaction-api-2.0.1.jar:/Users/BAORLIM/.m2/repository/org/jboss/logging/jboss-logging/3.5.3.Final/jboss-logging-3.5.3.Final.jar:/Users/BAORLIM/.m2/repository/org/hibernate/common/hibernate-commons-annotations/6.0.6.Final/hibernate-commons-annotations-6.0.6.Final.jar:/Users/BAORLIM/.m2/repository/io/smallrye/jandex/3.1.2/jandex-3.1.2.jar:/Users/BAORLIM/.m2/repository/com/fasterxml/classmate/1.6.0/classmate-1.6.0.jar:/Users/BAORLIM/.m2/repository/net/bytebuddy/byte-buddy/1.14.10/byte-buddy-1.14.10.jar:/Users/BAORLIM/.m2/repository/org/glassfish/jaxb/jaxb-runtime/4.0.4/jaxb-runtime-4.0.4.jar:/Users/BAORLIM/.m2/repository/org/glassfish/jaxb/jaxb-core/4.0.4/jaxb-core-4.0.4.jar:/Users/BAORLIM/.m2/repository/org/eclipse/angus/angus-activation/2.0.1/angus-activation-2.0.1.jar:/Users/BAORLIM/.m2/repository/org/glassfish/jaxb/txw2/4.0.4/txw2-4.0.4.jar:/Users/BAORLIM/.m2/repository/com/sun/istack/istack-commons-runtime/4.1.2/istack-commons-runtime-4.1.2.jar:/Users/BAORLIM/.m2/repository/jakarta/inject/jakarta.inject-api/2.0.1/jakarta.inject-api-2.0.1.jar:/Users/BAORLIM/.m2/repository/org/antlr/antlr4-runtime/4.10.1/antlr4-runtime-4.10.1.jar:/Users/BAORLIM/.m2/repository/org/springframework/data/spring-data-jpa/3.2.0/spring-data-jpa-3.2.0.jar:/Users/BAORLIM/.m2/repository/org/springframework/data/spring-data-commons/3.2.0/spring-data-commons-3.2.0.jar:/Users/BAORLIM/.m2/repository/org/springframework/spring-orm/6.1.1/spring-orm-6.1.1.jar:/Users/BAORLIM/.m2/repository/org/springframework/spring-tx/6.1.1/spring-tx-6.1.1.jar:/Users/BAORLIM/.m2/repository/org/springframework/spring-aspects/6.1.1/spring-aspects-6.1.1.jar:/Users/BAORLIM/.m2/repository/org/springframework/boot/spring-boot-starter-security/3.2.0/spring-boot-starter-security-3.2.0.jar:/Users/BAORLIM/.m2/repository/org/springframework/spring-aop/6.1.1/spring-aop-6.1.1.jar:/Users/BAORLIM/.m2/repository/org/springframework/security/spring-security-config/6.2.0/spring-security-config-6.2.0.jar:/Users/BAORLIM/.m2/repository/org/springframework/security/spring-security-web/6.2.0/spring-security-web-6.2.0.jar:/Users/BAORLIM/.m2/repository/org/springframework/boot/spring-boot-starter-validation/3.2.0/spring-boot-starter-validation-3.2.0.jar:/Users/BAORLIM/.m2/repository/org/apache/tomcat/embed/tomcat-embed-el/10.1.16/tomcat-embed-el-10.1.16.jar:/Users/BAORLIM/.m2/repository/org/hibernate/validator/hibernate-validator/8.0.1.Final/hibernate-validator-8.0.1.Final.jar:/Users/BAORLIM/.m2/repository/jakarta/validation/jakarta.validation-api/3.0.2/jakarta.validation-api-3.0.2.jar:/Users/BAORLIM/.m2/repository/org/springframework/boot/spring-boot-starter-actuator/3.2.0/spring-boot-starter-actuator-3.2.0.jar:/Users/BAORLIM/.m2/repository/org/springframework/boot/spring-boot-actuator-autoconfigure/3.2.0/spring-boot-actuator-autoconfigure-3.2.0.jar:/Users/BAORLIM/.m2/repository/org/springframework/boot/spring-boot-actuator/3.2.0/spring-boot-actuator-3.2.0.jar:/Users/BAORLIM/.m2/repository/io/micrometer/micrometer-observation/1.12.0/micrometer-observation-1.12.0.jar:/Users/BAORLIM/.m2/repository/io/micrometer/micrometer-commons/1.12.0/micrometer-commons-1.12.0.jar:/Users/BAORLIM/.m2/repository/io/micrometer/micrometer-jakarta9/1.12.0/micrometer-jakarta9-1.12.0.jar:/Users/BAORLIM/.m2/repository/io/micrometer/micrometer-core/1.12.0/micrometer-core-1.12.0.jar:/Users/BAORLIM/.m2/repository/org/hdrhistogram/HdrHistogram/2.1.12/HdrHistogram-2.1.12.jar:/Users/BAORLIM/.m2/repository/org/latencyutils/LatencyUtils/2.0.3/LatencyUtils-2.0.3.jar:/Users/BAORLIM/.m2/repository/org/postgresql/postgresql/42.6.0/postgresql-42.6.0.jar:/Users/BAORLIM/.m2/repository/org/checkerframework/checker-qual/3.31.0/checker-qual-3.31.0.jar:/Users/BAORLIM/.m2/repository/org/flywaydb/flyway-core/9.22.3/flyway-core-9.22.3.jar:/Users/BAORLIM/.m2/repository/com/fasterxml/jackson/dataformat/jackson-dataformat-toml/2.15.3/jackson-dataformat-toml-2.15.3.jar:/Users/BAORLIM/.m2/repository/com/fasterxml/jackson/core/jackson-core/2.15.3/jackson-core-2.15.3.jar:/Users/BAORLIM/.m2/repository/com/google/code/gson/gson/2.10.1/gson-2.10.1.jar:/Users/BAORLIM/.m2/repository/io/jsonwebtoken/jjwt-api/0.11.5/jjwt-api-0.11.5.jar:/Users/BAORLIM/.m2/repository/io/jsonwebtoken/jjwt-impl/0.11.5/jjwt-impl-0.11.5.jar:/Users/BAORLIM/.m2/repository/io/jsonwebtoken/jjwt-jackson/0.11.5/jjwt-jackson-0.11.5.jar:/Users/BAORLIM/.m2/repository/com/fasterxml/jackson/core/jackson-databind/2.15.3/jackson-databind-2.15.3.jar:/Users/BAORLIM/.m2/repository/com/fasterxml/jackson/core/jackson-annotations/2.15.3/jackson-annotations-2.15.3.jar:/Users/BAORLIM/.m2/repository/org/springdoc/springdoc-openapi-starter-webmvc-ui/2.2.0/springdoc-openapi-starter-webmvc-ui-2.2.0.jar:/Users/BAORLIM/.m2/repository/org/springdoc/springdoc-openapi-starter-webmvc-api/2.2.0/springdoc-openapi-starter-webmvc-api-2.2.0.jar:/Users/BAORLIM/.m2/repository/org/springdoc/springdoc-openapi-starter-common/2.2.0/springdoc-openapi-starter-common-2.2.0.jar:/Users/BAORLIM/.m2/repository/io/swagger/core/v3/swagger-core-jakarta/2.2.15/swagger-core-jakarta-2.2.15.jar:/Users/BAORLIM/.m2/repository/io/swagger/core/v3/swagger-annotations-jakarta/2.2.15/swagger-annotations-jakarta-2.2.15.jar:/Users/BAORLIM/.m2/repository/io/swagger/core/v3/swagger-models-jakarta/2.2.15/swagger-models-jakarta-2.2.15.jar:/Users/BAORLIM/.m2/repository/com/fasterxml/jackson/dataformat/jackson-dataformat-yaml/2.15.3/jackson-dataformat-yaml-2.15.3.jar:/Users/BAORLIM/.m2/repository/org/webjars/swagger-ui/5.2.0/swagger-ui-5.2.0.jar:/Users/BAORLIM/.m2/repository/org/springframework/boot/spring-boot-devtools/3.2.0/spring-boot-devtools-3.2.0.jar:/Users/BAORLIM/.m2/repository/org/springframework/boot/spring-boot/3.2.0/spring-boot-3.2.0.jar:/Users/BAORLIM/.m2/repository/org/springframework/boot/spring-boot-autoconfigure/3.2.0/spring-boot-autoconfigure-3.2.0.jar:/Users/BAORLIM/.m2/repository/org/springframework/boot/spring-boot-starter-test/3.2.0/spring-boot-starter-test-3.2.0.jar:/Users/BAORLIM/.m2/repository/org/springframework/boot/spring-boot-test/3.2.0/spring-boot-test-3.2.0.jar:/Users/BAORLIM/.m2/repository/org/springframework/boot/spring-boot-test-autoconfigure/3.2.0/spring-boot-test-autoconfigure-3.2.0.jar:/Users/BAORLIM/.m2/repository/com/jayway/jsonpath/json-path/2.8.0/json-path-2.8.0.jar:/Users/BAORLIM/.m2/repository/jakarta/xml/bind/jakarta.xml.bind-api/4.0.1/jakarta.xml.bind-api-4.0.1.jar:/Users/BAORLIM/.m2/repository/jakarta/activation/jakarta.activation-api/2.1.2/jakarta.activation-api-2.1.2.jar:/Users/BAORLIM/.m2/repository/net/minidev/json-smart/2.5.0/json-smart-2.5.0.jar:/Users/BAORLIM/.m2/repository/net/minidev/accessors-smart/2.5.0/accessors-smart-2.5.0.jar:/Users/BAORLIM/.m2/repository/org/ow2/asm/asm/9.3/asm-9.3.jar:/Users/BAORLIM/.m2/repository/org/assertj/assertj-core/3.24.2/assertj-core-3.24.2.jar:/Users/BAORLIM/.m2/repository/org/awaitility/awaitility/4.2.0/awaitility-4.2.0.jar:/Users/BAORLIM/.m2/repository/org/hamcrest/hamcrest/2.2/hamcrest-2.2.jar:/Users/BAORLIM/.m2/repository/org/junit/jupiter/junit-jupiter/5.10.1/junit-jupiter-5.10.1.jar:/Users/BAORLIM/.m2/repository/org/junit/jupiter/junit-jupiter-api/5.10.1/junit-jupiter-api-5.10.1.jar:/Users/BAORLIM/.m2/repository/org/opentest4j/opentest4j/1.3.0/opentest4j-1.3.0.jar:/Users/BAORLIM/.m2/repository/org/junit/platform/junit-platform-commons/1.10.1/junit-platform-commons-1.10.1.jar:/Users/BAORLIM/.m2/repository/org/apiguardian/apiguardian-api/1.1.2/apiguardian-api-1.1.2.jar:/Users/BAORLIM/.m2/repository/org/junit/jupiter/junit-jupiter-params/5.10.1/junit-jupiter-params-5.10.1.jar:/Users/BAORLIM/.m2/repository/org/junit/jupiter/junit-jupiter-engine/5.10.1/junit-jupiter-engine-5.10.1.jar:/Users/BAORLIM/.m2/repository/org/junit/platform/junit-platform-engine/1.10.1/junit-platform-engine-1.10.1.jar:/Users/BAORLIM/.m2/repository/org/mockito/mockito-core/5.7.0/mockito-core-5.7.0.jar:/Users/BAORLIM/.m2/repository/net/bytebuddy/byte-buddy-agent/1.14.10/byte-buddy-agent-1.14.10.jar:/Users/BAORLIM/.m2/repository/org/objenesis/objenesis/3.3/objenesis-3.3.jar:/Users/BAORLIM/.m2/repository/org/mockito/mockito-junit-jupiter/5.7.0/mockito-junit-jupiter-5.7.0.jar:/Users/BAORLIM/.m2/repository/org/skyscreamer/jsonassert/1.5.1/jsonassert-1.5.1.jar:/Users/BAORLIM/.m2/repository/com/vaadin/external/google/android-json/0.0.20131108.vaadin1/android-json-0.0.20131108.vaadin1.jar:/Users/BAORLIM/.m2/repository/org/springframework/spring-core/6.1.1/spring-core-6.1.1.jar:/Users/BAORLIM/.m2/repository/org/springframework/spring-jcl/6.1.1/spring-jcl-6.1.1.jar:/Users/BAORLIM/.m2/repository/org/springframework/spring-test/6.1.1/spring-test-6.1.1.jar:/Users/BAORLIM/.m2/repository/org/xmlunit/xmlunit-core/2.9.1/xmlunit-core-2.9.1.jar:/Users/BAORLIM/.m2/repository/org/springframework/security/spring-security-test/6.2.0/spring-security-test-6.2.0.jar:/Users/BAORLIM/.m2/repository/org/springframework/security/spring-security-core/6.2.0/spring-security-core-6.2.0.jar:/Users/BAORLIM/.m2/repository/org/springframework/security/spring-security-crypto/6.2.0/spring-security-crypto-6.2.0.jar:/Users/BAORLIM/.m2/repository/org/testcontainers/junit-jupiter/1.19.3/junit-jupiter-1.19.3.jar:/Users/BAORLIM/.m2/repository/org/testcontainers/testcontainers/1.19.3/testcontainers-1.19.3.jar:/Users/BAORLIM/.m2/repository/junit/junit/4.13.2/junit-4.13.2.jar:/Users/BAORLIM/.m2/repository/org/hamcrest/hamcrest-core/2.2/hamcrest-core-2.2.jar:/Users/BAORLIM/.m2/repository/org/rnorth/duct-tape/duct-tape/1.0.8/duct-tape-1.0.8.jar:/Users/BAORLIM/.m2/repository/org/jetbrains/annotations/17.0.0/annotations-17.0.0.jar:/Users/BAORLIM/.m2/repository/com/github/docker-java/docker-java-api/3.3.4/docker-java-api-3.3.4.jar:/Users/BAORLIM/.m2/repository/com/github/docker-java/docker-java-transport-zerodep/3.3.4/docker-java-transport-zerodep-3.3.4.jar:/Users/BAORLIM/.m2/repository/com/github/docker-java/docker-java-transport/3.3.4/docker-java-transport-3.3.4.jar:/Users/BAORLIM/.m2/repository/net/java/dev/jna/jna/5.13.0/jna-5.13.0.jar:/Users/BAORLIM/.m2/repository/org/testcontainers/postgresql/1.19.3/postgresql-1.19.3.jar:/Users/BAORLIM/.m2/repository/org/testcontainers/jdbc/1.19.3/jdbc-1.19.3.jar:/Users/BAORLIM/.m2/repository/org/testcontainers/database-commons/1.19.3/database-commons-1.19.3.jar:/Users/BAORLIM/.m2/repository/io/zonky/test/embedded-postgres/2.0.4/embedded-postgres-2.0.4.jar:/Users/BAORLIM/.m2/repository/io/zonky/test/postgres/embedded-postgres-binaries-windows-amd64/14.8.0/embedded-postgres-binaries-windows-amd64-14.8.0.jar:/Users/BAORLIM/.m2/repository/io/zonky/test/postgres/embedded-postgres-binaries-darwin-amd64/14.8.0/embedded-postgres-binaries-darwin-amd64-14.8.0.jar:/Users/BAORLIM/.m2/repository/io/zonky/test/postgres/embedded-postgres-binaries-linux-amd64/14.8.0/embedded-postgres-binaries-linux-amd64-14.8.0.jar:/Users/BAORLIM/.m2/repository/io/zonky/test/postgres/embedded-postgres-binaries-linux-amd64-alpine/14.8.0/embedded-postgres-binaries-linux-amd64-alpine-14.8.0.jar:/Users/BAORLIM/.m2/repository/org/slf4j/slf4j-api/2.0.9/slf4j-api-2.0.9.jar:/Users/BAORLIM/.m2/repository/org/apache/commons/commons-lang3/3.13.0/commons-lang3-3.13.0.jar:/Users/BAORLIM/.m2/repository/org/apache/commons/commons-compress/1.21/commons-compress-1.21.jar:/Users/BAORLIM/.m2/repository/org/tukaani/xz/1.9/xz-1.9.jar:/Users/BAORLIM/.m2/repository/commons-io/commons-io/2.11.0/commons-io-2.11.0.jar:/Users/BAORLIM/.m2/repository/commons-codec/commons-codec/1.16.0/commons-codec-1.16.0.jar:/Users/BAORLIM/.m2/repository/io/zonky/test/embedded-database-spring-test/2.4.0/embedded-database-spring-test-2.4.0.jar:/Users/BAORLIM/.m2/repository/io/zonky/test/embedded-database-spring-test-autoconfigure/2.4.0/embedded-database-spring-test-autoconfigure-2.4.0.jar:/Users/BAORLIM/.m2/repository/org/testcontainers/mssqlserver/1.19.3/mssqlserver-1.19.3.jar:/Users/BAORLIM/.m2/repository/org/testcontainers/mysql/1.19.3/mysql-1.19.3.jar:/Users/BAORLIM/.m2/repository/org/testcontainers/mariadb/1.19.3/mariadb-1.19.3.jar:/Users/BAORLIM/.m2/repository/org/springframework/spring-context/6.1.1/spring-context-6.1.1.jar:/Users/BAORLIM/.m2/repository/com/cedarsoftware/java-util/1.68.0/java-util-1.68.0.jar:/Users/BAORLIM/.m2/repository/ch/qos/logback/logback-classic/1.4.11/logback-classic-1.4.11.jar:/Users/BAORLIM/.m2/repository/ch/qos/logback/logback-core/1.4.11/logback-core-1.4.11.jar:"/>
    <property name="java.vm.vendor" value="Amazon.com Inc."/>
    <property name="sun.arch.data.model" value="64"/>
    <property name="java.vendor.url" value="https://aws.amazon.com/corretto/"/>
    <property name="user.timezone" value="Asia/Kuala_Lumpur"/>
    <property name="org.jboss.logging.provider" value="slf4j"/>
    <property name="os.name" value="Mac OS X"/>
    <property name="java.vm.specification.version" value="17"/>
    <property name="sun.java.launcher" value="SUN_STANDARD"/>
    <property name="user.country" value="US"/>
    <property name="sun.boot.library.path" value="/Users/BAORLIM/Library/Java/JavaVirtualMachines/corretto-17.0.14/Contents/Home/lib"/>
    <property name="sun.java.command" value="/Users/BAORLIM/playground/singtel-job-network/backend/target/surefire/surefirebooter-20250712031911045_3.jar /Users/BAORLIM/playground/singtel-job-network/backend/target/surefire 2025-07-12T03-19-10_985-jvmRun1 surefire-20250712031911045_1tmp surefire_0-20250712031911045_2tmp"/>
    <property name="jdk.debug" value="release"/>
    <property name="surefire.test.class.path" value="/Users/BAORLIM/playground/singtel-job-network/backend/target/test-classes:/Users/BAORLIM/playground/singtel-job-network/backend/target/classes:/Users/BAORLIM/.m2/repository/org/springframework/boot/spring-boot-starter-web/3.2.0/spring-boot-starter-web-3.2.0.jar:/Users/BAORLIM/.m2/repository/org/springframework/boot/spring-boot-starter/3.2.0/spring-boot-starter-3.2.0.jar:/Users/BAORLIM/.m2/repository/org/springframework/boot/spring-boot-starter-logging/3.2.0/spring-boot-starter-logging-3.2.0.jar:/Users/BAORLIM/.m2/repository/org/apache/logging/log4j/log4j-to-slf4j/2.21.1/log4j-to-slf4j-2.21.1.jar:/Users/BAORLIM/.m2/repository/org/apache/logging/log4j/log4j-api/2.21.1/log4j-api-2.21.1.jar:/Users/BAORLIM/.m2/repository/org/slf4j/jul-to-slf4j/2.0.9/jul-to-slf4j-2.0.9.jar:/Users/BAORLIM/.m2/repository/jakarta/annotation/jakarta.annotation-api/2.1.1/jakarta.annotation-api-2.1.1.jar:/Users/BAORLIM/.m2/repository/org/yaml/snakeyaml/2.2/snakeyaml-2.2.jar:/Users/BAORLIM/.m2/repository/org/springframework/boot/spring-boot-starter-json/3.2.0/spring-boot-starter-json-3.2.0.jar:/Users/BAORLIM/.m2/repository/com/fasterxml/jackson/datatype/jackson-datatype-jdk8/2.15.3/jackson-datatype-jdk8-2.15.3.jar:/Users/BAORLIM/.m2/repository/com/fasterxml/jackson/datatype/jackson-datatype-jsr310/2.15.3/jackson-datatype-jsr310-2.15.3.jar:/Users/BAORLIM/.m2/repository/com/fasterxml/jackson/module/jackson-module-parameter-names/2.15.3/jackson-module-parameter-names-2.15.3.jar:/Users/BAORLIM/.m2/repository/org/springframework/boot/spring-boot-starter-tomcat/3.2.0/spring-boot-starter-tomcat-3.2.0.jar:/Users/BAORLIM/.m2/repository/org/apache/tomcat/embed/tomcat-embed-core/10.1.16/tomcat-embed-core-10.1.16.jar:/Users/BAORLIM/.m2/repository/org/apache/tomcat/embed/tomcat-embed-websocket/10.1.16/tomcat-embed-websocket-10.1.16.jar:/Users/BAORLIM/.m2/repository/org/springframework/spring-web/6.1.1/spring-web-6.1.1.jar:/Users/BAORLIM/.m2/repository/org/springframework/spring-beans/6.1.1/spring-beans-6.1.1.jar:/Users/BAORLIM/.m2/repository/org/springframework/spring-webmvc/6.1.1/spring-webmvc-6.1.1.jar:/Users/BAORLIM/.m2/repository/org/springframework/spring-expression/6.1.1/spring-expression-6.1.1.jar:/Users/BAORLIM/.m2/repository/org/springframework/boot/spring-boot-starter-data-jpa/3.2.0/spring-boot-starter-data-jpa-3.2.0.jar:/Users/BAORLIM/.m2/repository/org/springframework/boot/spring-boot-starter-aop/3.2.0/spring-boot-starter-aop-3.2.0.jar:/Users/BAORLIM/.m2/repository/org/aspectj/aspectjweaver/1.9.20.1/aspectjweaver-1.9.20.1.jar:/Users/BAORLIM/.m2/repository/org/springframework/boot/spring-boot-starter-jdbc/3.2.0/spring-boot-starter-jdbc-3.2.0.jar:/Users/BAORLIM/.m2/repository/com/zaxxer/HikariCP/5.0.1/HikariCP-5.0.1.jar:/Users/BAORLIM/.m2/repository/org/springframework/spring-jdbc/6.1.1/spring-jdbc-6.1.1.jar:/Users/BAORLIM/.m2/repository/org/hibernate/orm/hibernate-core/6.3.1.Final/hibernate-core-6.3.1.Final.jar:/Users/BAORLIM/.m2/repository/jakarta/persistence/jakarta.persistence-api/3.1.0/jakarta.persistence-api-3.1.0.jar:/Users/BAORLIM/.m2/repository/jakarta/transaction/jakarta.transaction-api/2.0.1/jakarta.transaction-api-2.0.1.jar:/Users/BAORLIM/.m2/repository/org/jboss/logging/jboss-logging/3.5.3.Final/jboss-logging-3.5.3.Final.jar:/Users/BAORLIM/.m2/repository/org/hibernate/common/hibernate-commons-annotations/6.0.6.Final/hibernate-commons-annotations-6.0.6.Final.jar:/Users/BAORLIM/.m2/repository/io/smallrye/jandex/3.1.2/jandex-3.1.2.jar:/Users/BAORLIM/.m2/repository/com/fasterxml/classmate/1.6.0/classmate-1.6.0.jar:/Users/BAORLIM/.m2/repository/net/bytebuddy/byte-buddy/1.14.10/byte-buddy-1.14.10.jar:/Users/BAORLIM/.m2/repository/org/glassfish/jaxb/jaxb-runtime/4.0.4/jaxb-runtime-4.0.4.jar:/Users/BAORLIM/.m2/repository/org/glassfish/jaxb/jaxb-core/4.0.4/jaxb-core-4.0.4.jar:/Users/BAORLIM/.m2/repository/org/eclipse/angus/angus-activation/2.0.1/angus-activation-2.0.1.jar:/Users/BAORLIM/.m2/repository/org/glassfish/jaxb/txw2/4.0.4/txw2-4.0.4.jar:/Users/BAORLIM/.m2/repository/com/sun/istack/istack-commons-runtime/4.1.2/istack-commons-runtime-4.1.2.jar:/Users/BAORLIM/.m2/repository/jakarta/inject/jakarta.inject-api/2.0.1/jakarta.inject-api-2.0.1.jar:/Users/BAORLIM/.m2/repository/org/antlr/antlr4-runtime/4.10.1/antlr4-runtime-4.10.1.jar:/Users/BAORLIM/.m2/repository/org/springframework/data/spring-data-jpa/3.2.0/spring-data-jpa-3.2.0.jar:/Users/BAORLIM/.m2/repository/org/springframework/data/spring-data-commons/3.2.0/spring-data-commons-3.2.0.jar:/Users/BAORLIM/.m2/repository/org/springframework/spring-orm/6.1.1/spring-orm-6.1.1.jar:/Users/BAORLIM/.m2/repository/org/springframework/spring-tx/6.1.1/spring-tx-6.1.1.jar:/Users/BAORLIM/.m2/repository/org/springframework/spring-aspects/6.1.1/spring-aspects-6.1.1.jar:/Users/BAORLIM/.m2/repository/org/springframework/boot/spring-boot-starter-security/3.2.0/spring-boot-starter-security-3.2.0.jar:/Users/BAORLIM/.m2/repository/org/springframework/spring-aop/6.1.1/spring-aop-6.1.1.jar:/Users/BAORLIM/.m2/repository/org/springframework/security/spring-security-config/6.2.0/spring-security-config-6.2.0.jar:/Users/BAORLIM/.m2/repository/org/springframework/security/spring-security-web/6.2.0/spring-security-web-6.2.0.jar:/Users/BAORLIM/.m2/repository/org/springframework/boot/spring-boot-starter-validation/3.2.0/spring-boot-starter-validation-3.2.0.jar:/Users/BAORLIM/.m2/repository/org/apache/tomcat/embed/tomcat-embed-el/10.1.16/tomcat-embed-el-10.1.16.jar:/Users/BAORLIM/.m2/repository/org/hibernate/validator/hibernate-validator/8.0.1.Final/hibernate-validator-8.0.1.Final.jar:/Users/BAORLIM/.m2/repository/jakarta/validation/jakarta.validation-api/3.0.2/jakarta.validation-api-3.0.2.jar:/Users/BAORLIM/.m2/repository/org/springframework/boot/spring-boot-starter-actuator/3.2.0/spring-boot-starter-actuator-3.2.0.jar:/Users/BAORLIM/.m2/repository/org/springframework/boot/spring-boot-actuator-autoconfigure/3.2.0/spring-boot-actuator-autoconfigure-3.2.0.jar:/Users/BAORLIM/.m2/repository/org/springframework/boot/spring-boot-actuator/3.2.0/spring-boot-actuator-3.2.0.jar:/Users/BAORLIM/.m2/repository/io/micrometer/micrometer-observation/1.12.0/micrometer-observation-1.12.0.jar:/Users/BAORLIM/.m2/repository/io/micrometer/micrometer-commons/1.12.0/micrometer-commons-1.12.0.jar:/Users/BAORLIM/.m2/repository/io/micrometer/micrometer-jakarta9/1.12.0/micrometer-jakarta9-1.12.0.jar:/Users/BAORLIM/.m2/repository/io/micrometer/micrometer-core/1.12.0/micrometer-core-1.12.0.jar:/Users/BAORLIM/.m2/repository/org/hdrhistogram/HdrHistogram/2.1.12/HdrHistogram-2.1.12.jar:/Users/BAORLIM/.m2/repository/org/latencyutils/LatencyUtils/2.0.3/LatencyUtils-2.0.3.jar:/Users/BAORLIM/.m2/repository/org/postgresql/postgresql/42.6.0/postgresql-42.6.0.jar:/Users/BAORLIM/.m2/repository/org/checkerframework/checker-qual/3.31.0/checker-qual-3.31.0.jar:/Users/BAORLIM/.m2/repository/org/flywaydb/flyway-core/9.22.3/flyway-core-9.22.3.jar:/Users/BAORLIM/.m2/repository/com/fasterxml/jackson/dataformat/jackson-dataformat-toml/2.15.3/jackson-dataformat-toml-2.15.3.jar:/Users/BAORLIM/.m2/repository/com/fasterxml/jackson/core/jackson-core/2.15.3/jackson-core-2.15.3.jar:/Users/BAORLIM/.m2/repository/com/google/code/gson/gson/2.10.1/gson-2.10.1.jar:/Users/BAORLIM/.m2/repository/io/jsonwebtoken/jjwt-api/0.11.5/jjwt-api-0.11.5.jar:/Users/BAORLIM/.m2/repository/io/jsonwebtoken/jjwt-impl/0.11.5/jjwt-impl-0.11.5.jar:/Users/BAORLIM/.m2/repository/io/jsonwebtoken/jjwt-jackson/0.11.5/jjwt-jackson-0.11.5.jar:/Users/BAORLIM/.m2/repository/com/fasterxml/jackson/core/jackson-databind/2.15.3/jackson-databind-2.15.3.jar:/Users/BAORLIM/.m2/repository/com/fasterxml/jackson/core/jackson-annotations/2.15.3/jackson-annotations-2.15.3.jar:/Users/BAORLIM/.m2/repository/org/springdoc/springdoc-openapi-starter-webmvc-ui/2.2.0/springdoc-openapi-starter-webmvc-ui-2.2.0.jar:/Users/BAORLIM/.m2/repository/org/springdoc/springdoc-openapi-starter-webmvc-api/2.2.0/springdoc-openapi-starter-webmvc-api-2.2.0.jar:/Users/BAORLIM/.m2/repository/org/springdoc/springdoc-openapi-starter-common/2.2.0/springdoc-openapi-starter-common-2.2.0.jar:/Users/BAORLIM/.m2/repository/io/swagger/core/v3/swagger-core-jakarta/2.2.15/swagger-core-jakarta-2.2.15.jar:/Users/BAORLIM/.m2/repository/io/swagger/core/v3/swagger-annotations-jakarta/2.2.15/swagger-annotations-jakarta-2.2.15.jar:/Users/BAORLIM/.m2/repository/io/swagger/core/v3/swagger-models-jakarta/2.2.15/swagger-models-jakarta-2.2.15.jar:/Users/BAORLIM/.m2/repository/com/fasterxml/jackson/dataformat/jackson-dataformat-yaml/2.15.3/jackson-dataformat-yaml-2.15.3.jar:/Users/BAORLIM/.m2/repository/org/webjars/swagger-ui/5.2.0/swagger-ui-5.2.0.jar:/Users/BAORLIM/.m2/repository/org/springframework/boot/spring-boot-devtools/3.2.0/spring-boot-devtools-3.2.0.jar:/Users/BAORLIM/.m2/repository/org/springframework/boot/spring-boot/3.2.0/spring-boot-3.2.0.jar:/Users/BAORLIM/.m2/repository/org/springframework/boot/spring-boot-autoconfigure/3.2.0/spring-boot-autoconfigure-3.2.0.jar:/Users/BAORLIM/.m2/repository/org/springframework/boot/spring-boot-starter-test/3.2.0/spring-boot-starter-test-3.2.0.jar:/Users/BAORLIM/.m2/repository/org/springframework/boot/spring-boot-test/3.2.0/spring-boot-test-3.2.0.jar:/Users/BAORLIM/.m2/repository/org/springframework/boot/spring-boot-test-autoconfigure/3.2.0/spring-boot-test-autoconfigure-3.2.0.jar:/Users/BAORLIM/.m2/repository/com/jayway/jsonpath/json-path/2.8.0/json-path-2.8.0.jar:/Users/BAORLIM/.m2/repository/jakarta/xml/bind/jakarta.xml.bind-api/4.0.1/jakarta.xml.bind-api-4.0.1.jar:/Users/BAORLIM/.m2/repository/jakarta/activation/jakarta.activation-api/2.1.2/jakarta.activation-api-2.1.2.jar:/Users/BAORLIM/.m2/repository/net/minidev/json-smart/2.5.0/json-smart-2.5.0.jar:/Users/BAORLIM/.m2/repository/net/minidev/accessors-smart/2.5.0/accessors-smart-2.5.0.jar:/Users/BAORLIM/.m2/repository/org/ow2/asm/asm/9.3/asm-9.3.jar:/Users/BAORLIM/.m2/repository/org/assertj/assertj-core/3.24.2/assertj-core-3.24.2.jar:/Users/BAORLIM/.m2/repository/org/awaitility/awaitility/4.2.0/awaitility-4.2.0.jar:/Users/BAORLIM/.m2/repository/org/hamcrest/hamcrest/2.2/hamcrest-2.2.jar:/Users/BAORLIM/.m2/repository/org/junit/jupiter/junit-jupiter/5.10.1/junit-jupiter-5.10.1.jar:/Users/BAORLIM/.m2/repository/org/junit/jupiter/junit-jupiter-api/5.10.1/junit-jupiter-api-5.10.1.jar:/Users/BAORLIM/.m2/repository/org/opentest4j/opentest4j/1.3.0/opentest4j-1.3.0.jar:/Users/BAORLIM/.m2/repository/org/junit/platform/junit-platform-commons/1.10.1/junit-platform-commons-1.10.1.jar:/Users/BAORLIM/.m2/repository/org/apiguardian/apiguardian-api/1.1.2/apiguardian-api-1.1.2.jar:/Users/BAORLIM/.m2/repository/org/junit/jupiter/junit-jupiter-params/5.10.1/junit-jupiter-params-5.10.1.jar:/Users/BAORLIM/.m2/repository/org/junit/jupiter/junit-jupiter-engine/5.10.1/junit-jupiter-engine-5.10.1.jar:/Users/BAORLIM/.m2/repository/org/junit/platform/junit-platform-engine/1.10.1/junit-platform-engine-1.10.1.jar:/Users/BAORLIM/.m2/repository/org/mockito/mockito-core/5.7.0/mockito-core-5.7.0.jar:/Users/BAORLIM/.m2/repository/net/bytebuddy/byte-buddy-agent/1.14.10/byte-buddy-agent-1.14.10.jar:/Users/BAORLIM/.m2/repository/org/objenesis/objenesis/3.3/objenesis-3.3.jar:/Users/BAORLIM/.m2/repository/org/mockito/mockito-junit-jupiter/5.7.0/mockito-junit-jupiter-5.7.0.jar:/Users/BAORLIM/.m2/repository/org/skyscreamer/jsonassert/1.5.1/jsonassert-1.5.1.jar:/Users/BAORLIM/.m2/repository/com/vaadin/external/google/android-json/0.0.20131108.vaadin1/android-json-0.0.20131108.vaadin1.jar:/Users/BAORLIM/.m2/repository/org/springframework/spring-core/6.1.1/spring-core-6.1.1.jar:/Users/BAORLIM/.m2/repository/org/springframework/spring-jcl/6.1.1/spring-jcl-6.1.1.jar:/Users/BAORLIM/.m2/repository/org/springframework/spring-test/6.1.1/spring-test-6.1.1.jar:/Users/BAORLIM/.m2/repository/org/xmlunit/xmlunit-core/2.9.1/xmlunit-core-2.9.1.jar:/Users/BAORLIM/.m2/repository/org/springframework/security/spring-security-test/6.2.0/spring-security-test-6.2.0.jar:/Users/BAORLIM/.m2/repository/org/springframework/security/spring-security-core/6.2.0/spring-security-core-6.2.0.jar:/Users/BAORLIM/.m2/repository/org/springframework/security/spring-security-crypto/6.2.0/spring-security-crypto-6.2.0.jar:/Users/BAORLIM/.m2/repository/org/testcontainers/junit-jupiter/1.19.3/junit-jupiter-1.19.3.jar:/Users/BAORLIM/.m2/repository/org/testcontainers/testcontainers/1.19.3/testcontainers-1.19.3.jar:/Users/BAORLIM/.m2/repository/junit/junit/4.13.2/junit-4.13.2.jar:/Users/BAORLIM/.m2/repository/org/hamcrest/hamcrest-core/2.2/hamcrest-core-2.2.jar:/Users/BAORLIM/.m2/repository/org/rnorth/duct-tape/duct-tape/1.0.8/duct-tape-1.0.8.jar:/Users/BAORLIM/.m2/repository/org/jetbrains/annotations/17.0.0/annotations-17.0.0.jar:/Users/BAORLIM/.m2/repository/com/github/docker-java/docker-java-api/3.3.4/docker-java-api-3.3.4.jar:/Users/BAORLIM/.m2/repository/com/github/docker-java/docker-java-transport-zerodep/3.3.4/docker-java-transport-zerodep-3.3.4.jar:/Users/BAORLIM/.m2/repository/com/github/docker-java/docker-java-transport/3.3.4/docker-java-transport-3.3.4.jar:/Users/BAORLIM/.m2/repository/net/java/dev/jna/jna/5.13.0/jna-5.13.0.jar:/Users/BAORLIM/.m2/repository/org/testcontainers/postgresql/1.19.3/postgresql-1.19.3.jar:/Users/BAORLIM/.m2/repository/org/testcontainers/jdbc/1.19.3/jdbc-1.19.3.jar:/Users/BAORLIM/.m2/repository/org/testcontainers/database-commons/1.19.3/database-commons-1.19.3.jar:/Users/BAORLIM/.m2/repository/io/zonky/test/embedded-postgres/2.0.4/embedded-postgres-2.0.4.jar:/Users/BAORLIM/.m2/repository/io/zonky/test/postgres/embedded-postgres-binaries-windows-amd64/14.8.0/embedded-postgres-binaries-windows-amd64-14.8.0.jar:/Users/BAORLIM/.m2/repository/io/zonky/test/postgres/embedded-postgres-binaries-darwin-amd64/14.8.0/embedded-postgres-binaries-darwin-amd64-14.8.0.jar:/Users/BAORLIM/.m2/repository/io/zonky/test/postgres/embedded-postgres-binaries-linux-amd64/14.8.0/embedded-postgres-binaries-linux-amd64-14.8.0.jar:/Users/BAORLIM/.m2/repository/io/zonky/test/postgres/embedded-postgres-binaries-linux-amd64-alpine/14.8.0/embedded-postgres-binaries-linux-amd64-alpine-14.8.0.jar:/Users/BAORLIM/.m2/repository/org/slf4j/slf4j-api/2.0.9/slf4j-api-2.0.9.jar:/Users/BAORLIM/.m2/repository/org/apache/commons/commons-lang3/3.13.0/commons-lang3-3.13.0.jar:/Users/BAORLIM/.m2/repository/org/apache/commons/commons-compress/1.21/commons-compress-1.21.jar:/Users/BAORLIM/.m2/repository/org/tukaani/xz/1.9/xz-1.9.jar:/Users/BAORLIM/.m2/repository/commons-io/commons-io/2.11.0/commons-io-2.11.0.jar:/Users/BAORLIM/.m2/repository/commons-codec/commons-codec/1.16.0/commons-codec-1.16.0.jar:/Users/BAORLIM/.m2/repository/io/zonky/test/embedded-database-spring-test/2.4.0/embedded-database-spring-test-2.4.0.jar:/Users/BAORLIM/.m2/repository/io/zonky/test/embedded-database-spring-test-autoconfigure/2.4.0/embedded-database-spring-test-autoconfigure-2.4.0.jar:/Users/BAORLIM/.m2/repository/org/testcontainers/mssqlserver/1.19.3/mssqlserver-1.19.3.jar:/Users/BAORLIM/.m2/repository/org/testcontainers/mysql/1.19.3/mysql-1.19.3.jar:/Users/BAORLIM/.m2/repository/org/testcontainers/mariadb/1.19.3/mariadb-1.19.3.jar:/Users/BAORLIM/.m2/repository/org/springframework/spring-context/6.1.1/spring-context-6.1.1.jar:/Users/BAORLIM/.m2/repository/com/cedarsoftware/java-util/1.68.0/java-util-1.68.0.jar:/Users/BAORLIM/.m2/repository/ch/qos/logback/logback-classic/1.4.11/logback-classic-1.4.11.jar:/Users/BAORLIM/.m2/repository/ch/qos/logback/logback-core/1.4.11/logback-core-1.4.11.jar:"/>
    <property name="sun.cpu.endian" value="little"/>
    <property name="user.home" value="/Users/BAORLIM"/>
    <property name="user.language" value="en"/>
    <property name="java.specification.vendor" value="Oracle Corporation"/>
    <property name="java.version.date" value="2025-01-21"/>
    <property name="java.home" value="/Users/BAORLIM/Library/Java/JavaVirtualMachines/corretto-17.0.14/Contents/Home"/>
    <property name="file.separator" value="/"/>
    <property name="basedir" value="/Users/BAORLIM/playground/singtel-job-network/backend"/>
    <property name="java.vm.compressedOopsMode" value="Zero based"/>
    <property name="line.separator" value="&#10;"/>
    <property name="java.vm.specification.vendor" value="Oracle Corporation"/>
    <property name="java.specification.name" value="Java Platform API Specification"/>
    <property name="FILE_LOG_CHARSET" value="UTF-8"/>
    <property name="java.awt.headless" value="true"/>
    <property name="surefire.real.class.path" value="/Users/BAORLIM/playground/singtel-job-network/backend/target/surefire/surefirebooter-20250712031911045_3.jar"/>
    <property name="sun.management.compiler" value="HotSpot 64-Bit Tiered Compilers"/>
    <property name="java.runtime.version" value="17.0.14+7-LTS"/>
    <property name="user.name" value="BAORLIM"/>
    <property name="path.separator" value=":"/>
    <property name="os.version" value="15.5"/>
    <property name="java.runtime.name" value="OpenJDK Runtime Environment"/>
    <property name="file.encoding" value="UTF-8"/>
    <property name="FILE_LOG_PATTERN" value="%d{yyyy-MM-dd HH:mm:ss} [%thread] %-5level %logger{36} - %msg%n"/>
    <property name="java.vm.name" value="OpenJDK 64-Bit Server VM"/>
    <property name="java.vendor.version" value="Corretto-17.0.14.7.1"/>
    <property name="localRepository" value="/Users/BAORLIM/.m2/repository"/>
    <property name="java.vendor.url.bug" value="https://github.com/corretto/corretto-17/issues/"/>
    <property name="java.io.tmpdir" value="/var/folders/4h/r79srl3n6s7cvr3p7yll6lmr0000gn/T/"/>
    <property name="java.version" value="17.0.14"/>
    <property name="user.dir" value="/Users/BAORLIM/playground/singtel-job-network/backend"/>
    <property name="os.arch" value="aarch64"/>
    <property name="java.vm.specification.name" value="Java Virtual Machine Specification"/>
    <property name="PID" value="26677"/>
    <property name="CONSOLE_LOG_CHARSET" value="UTF-8"/>
    <property name="native.encoding" value="UTF-8"/>
    <property name="java.library.path" value="/Users/BAORLIM/Library/Java/Extensions:/Library/Java/Extensions:/Network/Library/Java/Extensions:/System/Library/Java/Extensions:/usr/lib/java:."/>
    <property name="java.vm.info" value="mixed mode, sharing"/>
    <property name="java.vendor" value="Amazon.com Inc."/>
    <property name="java.vm.version" value="17.0.14+7-LTS"/>
    <property name="java.specification.maintenance.version" value="1"/>
    <property name="sun.io.unicode.encoding" value="UnicodeBig"/>
    <property name="java.class.version" value="61.0"/>
    <property name="CONSOLE_LOG_PATTERN" value="%d{yyyy-MM-dd HH:mm:ss} - %msg%n"/>
    <property name="LOGGED_APPLICATION_NAME" value="[singtel-network-ondemand-test] "/>
  </properties>
  <testcase name="countByCompanyId_Success" classname="com.singtel.network.repository.UserRepositoryTest" time="0.033">
    <system-out><![CDATA[2025-07-12 03:19:21 - Could not detect default configuration classes for test class [com.singtel.network.repository.UserRepositoryTest]: UserRepositoryTest does not declare any static, non-private, non-final, nested classes annotated with @Configuration.
2025-07-12 03:19:21 - Found @SpringBootConfiguration com.singtel.network.NetworkOnDemandApplication for test class com.singtel.network.repository.UserRepositoryTest
2025-07-12 03:19:21 - Restart disabled due to context in which it is running

  .   ____          _            __ _ _
 /\\ / ___'_ __ _ _(_)_ __  __ _ \ \ \ \
( ( )\___ | '_ | '_| | '_ \/ _` | \ \ \ \
 \\/  ___)| |_)| | | | | || (_| |  ) ) ) )
  '  |____| .__|_| |_|_| |_\__, | / / / /
 =========|_|==============|___/=/_/_/_/
 :: Spring Boot ::                (v3.2.0)

2025-07-12 03:19:21 - Starting UserRepositoryTest using Java 17.0.14 with PID 26677 (started by BAORLIM in /Users/BAORLIM/playground/singtel-job-network/backend)
2025-07-12 03:19:21 - Running with Spring Boot v3.2.0, Spring v6.1.1
2025-07-12 03:19:21 - The following 1 profile is active: "development"
2025-07-12 03:19:21 - Bootstrapping Spring Data JPA repositories in DEFAULT mode.
2025-07-12 03:19:21 - Finished Spring Data repository scanning in 6 ms. Found 7 JPA repository interfaces.
2025-07-12 03:19:21 - Replacing 'dataSource' DataSource bean with embedded version
2025-07-12 03:19:21 - Bean 'io.zonky.test.db.config.EmbeddedDatabaseAutoConfiguration' of type [io.zonky.test.db.config.EmbeddedDatabaseAutoConfiguration$$SpringCGLIB$$0] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying). The currently created BeanPostProcessor [flywayDatabaseExtension] is declared through a non-static factory method on that class; consider declaring it as static instead.
2025-07-12 03:19:22 - Flyway Community Edition 9.22.3 by Redgate
2025-07-12 03:19:22 - See release notes here: https://rd.gt/416ObMi
2025-07-12 03:19:22 - 
2025-07-12 03:19:22 - Database: jdbc:postgresql://localhost:35943/hayzhtpmkjpk (PostgreSQL 11.22)
2025-07-12 03:19:22 - Creating schema "singtel_app" ...
2025-07-12 03:19:22 - Creating Schema History table "singtel_app"."flyway_schema_history" ...
2025-07-12 03:19:22 - Current version of schema "singtel_app": null
2025-07-12 03:19:22 - Migrating schema "singtel_app" to version "1 - Initial schema"
2025-07-12 03:19:22 - DB: schema "singtel_app" already exists, skipping (SQL State: 42P06 - Error Code: 0)
2025-07-12 03:19:22 - Migrating schema "singtel_app" to version "2 - Add monitoring tables"
2025-07-12 03:19:22 - Migrating schema "singtel_app" to version "3 - Insert sample data"
2025-07-12 03:19:22 - Migrating schema "singtel_app" to version "4 - Fix user password hashes"
2025-07-12 03:19:22 - Successfully applied 4 migrations to schema "singtel_app", now at version v4 (execution time 00:00.066s)
2025-07-12 03:19:22 - HHH000204: Processing PersistenceUnitInfo [name: default]
2025-07-12 03:19:22 - HHH000026: Second-level cache disabled
2025-07-12 03:19:22 - No LoadTimeWeaver setup: ignoring JPA class transformer
2025-07-12 03:19:22 - HHH90000025: PostgreSQLDialect does not need to be specified explicitly using 'hibernate.dialect' (remove the property setting and it will be selected by default)
2025-07-12 03:19:22 - HHH000489: No JTA platform available (set 'hibernate.transaction.jta.platform' to enable JTA platform integration)
2025-07-12 03:19:22 - 
    alter table if exists singtel_app.bandwidth_changes 
       drop constraint if exists FKphxhif2jjrqu9lieuyx52que4
Hibernate: 
    alter table if exists singtel_app.bandwidth_changes 
       drop constraint if exists FKphxhif2jjrqu9lieuyx52que4
2025-07-12 03:19:22 - SQL Warning Code: 0, SQLState: 00000
2025-07-12 03:19:22 - constraint "fkphxhif2jjrqu9lieuyx52que4" of relation "bandwidth_changes" does not exist, skipping
2025-07-12 03:19:22 - 
    alter table if exists singtel_app.bandwidth_changes 
       drop constraint if exists FK28nd02kyos4t7lh0v8kcekug5
Hibernate: 
    alter table if exists singtel_app.bandwidth_changes 
       drop constraint if exists FK28nd02kyos4t7lh0v8kcekug5
2025-07-12 03:19:22 - SQL Warning Code: 0, SQLState: 00000
2025-07-12 03:19:22 - constraint "fk28nd02kyos4t7lh0v8kcekug5" of relation "bandwidth_changes" does not exist, skipping
2025-07-12 03:19:22 - 
    alter table if exists singtel_app.orders 
       drop constraint if exists FK1vldikbqexeu85qvsedncxvs3
Hibernate: 
    alter table if exists singtel_app.orders 
       drop constraint if exists FK1vldikbqexeu85qvsedncxvs3
2025-07-12 03:19:22 - SQL Warning Code: 0, SQLState: 00000
2025-07-12 03:19:22 - constraint "fk1vldikbqexeu85qvsedncxvs3" of relation "orders" does not exist, skipping
2025-07-12 03:19:22 - 
    alter table if exists singtel_app.orders 
       drop constraint if exists FKj7bkj6q0u3681uv3bvq21316i
Hibernate: 
    alter table if exists singtel_app.orders 
       drop constraint if exists FKj7bkj6q0u3681uv3bvq21316i
2025-07-12 03:19:22 - SQL Warning Code: 0, SQLState: 00000
2025-07-12 03:19:22 - constraint "fkj7bkj6q0u3681uv3bvq21316i" of relation "orders" does not exist, skipping
2025-07-12 03:19:22 - 
    alter table if exists singtel_app.orders 
       drop constraint if exists FKrhawop2o9fmjl9a74grq767sb
Hibernate: 
    alter table if exists singtel_app.orders 
       drop constraint if exists FKrhawop2o9fmjl9a74grq767sb
2025-07-12 03:19:22 - SQL Warning Code: 0, SQLState: 00000
2025-07-12 03:19:22 - constraint "fkrhawop2o9fmjl9a74grq767sb" of relation "orders" does not exist, skipping
2025-07-12 03:19:22 - 
    alter table if exists singtel_app.orders 
       drop constraint if exists FK32ql8ubntj5uh44ph9659tiih
Hibernate: 
    alter table if exists singtel_app.orders 
       drop constraint if exists FK32ql8ubntj5uh44ph9659tiih
2025-07-12 03:19:22 - SQL Warning Code: 0, SQLState: 00000
2025-07-12 03:19:22 - constraint "fk32ql8ubntj5uh44ph9659tiih" of relation "orders" does not exist, skipping
2025-07-12 03:19:22 - 
    alter table if exists singtel_app.service_instances 
       drop constraint if exists FKfgoj8d6fdavbtq97989ay4l5l
Hibernate: 
    alter table if exists singtel_app.service_instances 
       drop constraint if exists FKfgoj8d6fdavbtq97989ay4l5l
2025-07-12 03:19:22 - SQL Warning Code: 0, SQLState: 00000
2025-07-12 03:19:22 - constraint "fkfgoj8d6fdavbtq97989ay4l5l" of relation "service_instances" does not exist, skipping
2025-07-12 03:19:22 - 
    alter table if exists singtel_app.service_instances 
       drop constraint if exists FKguvw7g804iujk1276dy213sve
Hibernate: 
    alter table if exists singtel_app.service_instances 
       drop constraint if exists FKguvw7g804iujk1276dy213sve
2025-07-12 03:19:22 - SQL Warning Code: 0, SQLState: 00000
2025-07-12 03:19:22 - constraint "fkguvw7g804iujk1276dy213sve" of relation "service_instances" does not exist, skipping
2025-07-12 03:19:22 - 
    alter table if exists singtel_app.services 
       drop constraint if exists FKfffr4emayc2n4uq3yv618d9j0
Hibernate: 
    alter table if exists singtel_app.services 
       drop constraint if exists FKfffr4emayc2n4uq3yv618d9j0
2025-07-12 03:19:22 - SQL Warning Code: 0, SQLState: 00000
2025-07-12 03:19:22 - constraint "fkfffr4emayc2n4uq3yv618d9j0" of relation "services" does not exist, skipping
2025-07-12 03:19:22 - 
    alter table if exists singtel_app.users 
       drop constraint if exists FKin8gn4o1hpiwe6qe4ey7ykwq7
Hibernate: 
    alter table if exists singtel_app.users 
       drop constraint if exists FKin8gn4o1hpiwe6qe4ey7ykwq7
2025-07-12 03:19:22 - SQL Warning Code: 0, SQLState: 00000
2025-07-12 03:19:22 - constraint "fkin8gn4o1hpiwe6qe4ey7ykwq7" of relation "users" does not exist, skipping
2025-07-12 03:19:22 - 
    drop table if exists singtel_app.bandwidth_changes cascade
Hibernate: 
    drop table if exists singtel_app.bandwidth_changes cascade
2025-07-12 03:19:22 - 
    drop table if exists singtel_app.companies cascade
Hibernate: 
    drop table if exists singtel_app.companies cascade
2025-07-12 03:19:22 - SQL Warning Code: 0, SQLState: 00000
2025-07-12 03:19:22 - drop cascades to 3 other objects
2025-07-12 03:19:22 - 
    drop table if exists singtel_app.orders cascade
Hibernate: 
    drop table if exists singtel_app.orders cascade
2025-07-12 03:19:22 - 
    drop table if exists singtel_app.service_categories cascade
Hibernate: 
    drop table if exists singtel_app.service_categories cascade
2025-07-12 03:19:22 - SQL Warning Code: 0, SQLState: 00000
2025-07-12 03:19:22 - drop cascades to constraint services_category_id_fkey on table singtel_app.services
2025-07-12 03:19:22 - 
    drop table if exists singtel_app.service_instances cascade
Hibernate: 
    drop table if exists singtel_app.service_instances cascade
2025-07-12 03:19:22 - SQL Warning Code: 0, SQLState: 00000
2025-07-12 03:19:22 - drop cascades to 6 other objects
2025-07-12 03:19:22 - 
    drop table if exists singtel_app.services cascade
Hibernate: 
    drop table if exists singtel_app.services cascade
2025-07-12 03:19:22 - 
    drop table if exists singtel_app.users cascade
Hibernate: 
    drop table if exists singtel_app.users cascade
2025-07-12 03:19:22 - 
    create table singtel_app.bandwidth_changes (
        cost_impact numeric(10,2),
        new_bandwidth_mbps integer not null,
        previous_bandwidth_mbps integer not null,
        applied_at timestamp(6),
        created_at timestamp(6) not null,
        scheduled_at timestamp(6),
        updated_at timestamp(6) not null,
        id uuid not null,
        service_instance_id uuid not null,
        user_id uuid not null,
        change_reason varchar(255),
        status varchar(255) not null check (status in ('PENDING','SCHEDULED','APPLIED','FAILED','CANCELLED')),
        workflow_id varchar(255),
        primary key (id)
    )
Hibernate: 
    create table singtel_app.bandwidth_changes (
        cost_impact numeric(10,2),
        new_bandwidth_mbps integer not null,
        previous_bandwidth_mbps integer not null,
        applied_at timestamp(6),
        created_at timestamp(6) not null,
        scheduled_at timestamp(6),
        updated_at timestamp(6) not null,
        id uuid not null,
        service_instance_id uuid not null,
        user_id uuid not null,
        change_reason varchar(255),
        status varchar(255) not null check (status in ('PENDING','SCHEDULED','APPLIED','FAILED','CANCELLED')),
        workflow_id varchar(255),
        primary key (id)
    )
2025-07-12 03:19:22 - 
    create table singtel_app.companies (
        created_at timestamp(6) not null,
        updated_at timestamp(6) not null,
        id uuid not null,
        address TEXT,
        company_size varchar(255),
        country varchar(255),
        email varchar(255) not null,
        industry varchar(255),
        name varchar(255) not null,
        phone varchar(255),
        postal_code varchar(255),
        registration_number varchar(255) not null unique,
        status varchar(255) not null check (status in ('ACTIVE','SUSPENDED','INACTIVE')),
        primary key (id)
    )
Hibernate: 
    create table singtel_app.companies (
        created_at timestamp(6) not null,
        updated_at timestamp(6) not null,
        id uuid not null,
        address TEXT,
        company_size varchar(255),
        country varchar(255),
        email varchar(255) not null,
        industry varchar(255),
        name varchar(255) not null,
        phone varchar(255),
        postal_code varchar(255),
        registration_number varchar(255) not null unique,
        status varchar(255) not null check (status in ('ACTIVE','SUSPENDED','INACTIVE')),
        primary key (id)
    )
2025-07-12 03:19:22 - 
    create table singtel_app.orders (
        actual_completion_date date,
        estimated_completion_date date,
        requested_bandwidth_mbps integer,
        requested_date date,
        total_cost numeric(10,2),
        created_at timestamp(6) not null,
        updated_at timestamp(6) not null,
        company_id uuid not null,
        id uuid not null,
        service_id uuid not null,
        service_instance_id uuid unique,
        user_id uuid not null,
        contact_email varchar(255),
        contact_person varchar(255),
        contact_phone varchar(255),
        installation_address TEXT,
        notes TEXT,
        order_number varchar(255) not null unique,
        order_type varchar(255) not null check (order_type in ('NEW_SERVICE','MODIFY_SERVICE','TERMINATE_SERVICE')),
        postal_code varchar(255),
        status varchar(255) not null check (status in ('SUBMITTED','APPROVED','IN_PROGRESS','COMPLETED','CANCELLED','FAILED')),
        workflow_id varchar(255),
        primary key (id)
    )
Hibernate: 
    create table singtel_app.orders (
        actual_completion_date date,
        estimated_completion_date date,
        requested_bandwidth_mbps integer,
        requested_date date,
        total_cost numeric(10,2),
        created_at timestamp(6) not null,
        updated_at timestamp(6) not null,
        company_id uuid not null,
        id uuid not null,
        service_id uuid not null,
        service_instance_id uuid unique,
        user_id uuid not null,
        contact_email varchar(255),
        contact_person varchar(255),
        contact_phone varchar(255),
        installation_address TEXT,
        notes TEXT,
        order_number varchar(255) not null unique,
        order_type varchar(255) not null check (order_type in ('NEW_SERVICE','MODIFY_SERVICE','TERMINATE_SERVICE')),
        postal_code varchar(255),
        status varchar(255) not null check (status in ('SUBMITTED','APPROVED','IN_PROGRESS','COMPLETED','CANCELLED','FAILED')),
        workflow_id varchar(255),
        primary key (id)
    )
2025-07-12 03:19:22 - 
    create table singtel_app.service_categories (
        display_order integer,
        is_active boolean,
        created_at timestamp(6) not null,
        updated_at timestamp(6) not null,
        id uuid not null,
        description TEXT,
        name varchar(255) not null,
        primary key (id)
    )
Hibernate: 
    create table singtel_app.service_categories (
        display_order integer,
        is_active boolean,
        created_at timestamp(6) not null,
        updated_at timestamp(6) not null,
        id uuid not null,
        description TEXT,
        name varchar(255) not null,
        primary key (id)
    )
2025-07-12 03:19:22 - 
    create table singtel_app.service_instances (
        contract_end_date date,
        contract_start_date date,
        current_bandwidth_mbps integer not null,
        monthly_cost numeric(10,2),
        created_at timestamp(6) not null,
        last_bandwidth_change_at timestamp(6),
        provisioned_at timestamp(6),
        updated_at timestamp(6) not null,
        company_id uuid not null,
        id uuid not null,
        service_id uuid not null,
        contact_email varchar(255),
        contact_person varchar(255),
        contact_phone varchar(255),
        installation_address TEXT not null,
        instance_name varchar(255) not null,
        postal_code varchar(255),
        status varchar(255) not null check (status in ('PENDING','PROVISIONING','ACTIVE','SUSPENDED','TERMINATED')),
        primary key (id)
    )
Hibernate: 
    create table singtel_app.service_instances (
        contract_end_date date,
        contract_start_date date,
        current_bandwidth_mbps integer not null,
        monthly_cost numeric(10,2),
        created_at timestamp(6) not null,
        last_bandwidth_change_at timestamp(6),
        provisioned_at timestamp(6),
        updated_at timestamp(6) not null,
        company_id uuid not null,
        id uuid not null,
        service_id uuid not null,
        contact_email varchar(255),
        contact_person varchar(255),
        contact_phone varchar(255),
        installation_address TEXT not null,
        instance_name varchar(255) not null,
        postal_code varchar(255),
        status varchar(255) not null check (status in ('PENDING','PROVISIONING','ACTIVE','SUSPENDED','TERMINATED')),
        primary key (id)
    )
2025-07-12 03:19:22 - 
    create table singtel_app.services (
        base_bandwidth_mbps integer,
        base_price_monthly numeric(10,2),
        contract_term_months integer,
        is_available boolean,
        is_bandwidth_adjustable boolean,
        max_bandwidth_mbps integer,
        min_bandwidth_mbps integer,
        price_per_mbps numeric(10,4),
        provisioning_time_hours integer,
        setup_fee numeric(10,2),
        created_at timestamp(6) not null,
        updated_at timestamp(6) not null,
        category_id uuid,
        id uuid not null,
        description TEXT,
        name varchar(255) not null,
        service_type varchar(255) not null,
        features jsonb,
        technical_specs jsonb,
        primary key (id)
    )
Hibernate: 
    create table singtel_app.services (
        base_bandwidth_mbps integer,
        base_price_monthly numeric(10,2),
        contract_term_months integer,
        is_available boolean,
        is_bandwidth_adjustable boolean,
        max_bandwidth_mbps integer,
        min_bandwidth_mbps integer,
        price_per_mbps numeric(10,4),
        provisioning_time_hours integer,
        setup_fee numeric(10,2),
        created_at timestamp(6) not null,
        updated_at timestamp(6) not null,
        category_id uuid,
        id uuid not null,
        description TEXT,
        name varchar(255) not null,
        service_type varchar(255) not null,
        features jsonb,
        technical_specs jsonb,
        primary key (id)
    )
2025-07-12 03:19:22 - 
    create table singtel_app.users (
        created_at timestamp(6) not null,
        last_login_at timestamp(6),
        password_changed_at timestamp(6),
        updated_at timestamp(6) not null,
        company_id uuid not null,
        id uuid not null,
        email varchar(255) not null unique,
        first_name varchar(255) not null,
        last_name varchar(255) not null,
        password_hash varchar(255) not null,
        phone varchar(255),
        role varchar(255) not null check (role in ('ADMIN','USER','VIEWER')),
        status varchar(255) not null check (status in ('ACTIVE','SUSPENDED','INACTIVE')),
        username varchar(255) not null unique,
        primary key (id)
    )
Hibernate: 
    create table singtel_app.users (
        created_at timestamp(6) not null,
        last_login_at timestamp(6),
        password_changed_at timestamp(6),
        updated_at timestamp(6) not null,
        company_id uuid not null,
        id uuid not null,
        email varchar(255) not null unique,
        first_name varchar(255) not null,
        last_name varchar(255) not null,
        password_hash varchar(255) not null,
        phone varchar(255),
        role varchar(255) not null check (role in ('ADMIN','USER','VIEWER')),
        status varchar(255) not null check (status in ('ACTIVE','SUSPENDED','INACTIVE')),
        username varchar(255) not null unique,
        primary key (id)
    )
2025-07-12 03:19:22 - 
    alter table if exists singtel_app.bandwidth_changes 
       add constraint FKphxhif2jjrqu9lieuyx52que4 
       foreign key (service_instance_id) 
       references singtel_app.service_instances
Hibernate: 
    alter table if exists singtel_app.bandwidth_changes 
       add constraint FKphxhif2jjrqu9lieuyx52que4 
       foreign key (service_instance_id) 
       references singtel_app.service_instances
2025-07-12 03:19:22 - 
    alter table if exists singtel_app.bandwidth_changes 
       add constraint FK28nd02kyos4t7lh0v8kcekug5 
       foreign key (user_id) 
       references singtel_app.users
Hibernate: 
    alter table if exists singtel_app.bandwidth_changes 
       add constraint FK28nd02kyos4t7lh0v8kcekug5 
       foreign key (user_id) 
       references singtel_app.users
2025-07-12 03:19:22 - 
    alter table if exists singtel_app.orders 
       add constraint FK1vldikbqexeu85qvsedncxvs3 
       foreign key (company_id) 
       references singtel_app.companies
Hibernate: 
    alter table if exists singtel_app.orders 
       add constraint FK1vldikbqexeu85qvsedncxvs3 
       foreign key (company_id) 
       references singtel_app.companies
2025-07-12 03:19:22 - 
    alter table if exists singtel_app.orders 
       add constraint FKj7bkj6q0u3681uv3bvq21316i 
       foreign key (service_id) 
       references singtel_app.services
Hibernate: 
    alter table if exists singtel_app.orders 
       add constraint FKj7bkj6q0u3681uv3bvq21316i 
       foreign key (service_id) 
       references singtel_app.services
2025-07-12 03:19:22 - 
    alter table if exists singtel_app.orders 
       add constraint FKrhawop2o9fmjl9a74grq767sb 
       foreign key (service_instance_id) 
       references singtel_app.service_instances
Hibernate: 
    alter table if exists singtel_app.orders 
       add constraint FKrhawop2o9fmjl9a74grq767sb 
       foreign key (service_instance_id) 
       references singtel_app.service_instances
2025-07-12 03:19:22 - 
    alter table if exists singtel_app.orders 
       add constraint FK32ql8ubntj5uh44ph9659tiih 
       foreign key (user_id) 
       references singtel_app.users
Hibernate: 
    alter table if exists singtel_app.orders 
       add constraint FK32ql8ubntj5uh44ph9659tiih 
       foreign key (user_id) 
       references singtel_app.users
2025-07-12 03:19:22 - 
    alter table if exists singtel_app.service_instances 
       add constraint FKfgoj8d6fdavbtq97989ay4l5l 
       foreign key (company_id) 
       references singtel_app.companies
Hibernate: 
    alter table if exists singtel_app.service_instances 
       add constraint FKfgoj8d6fdavbtq97989ay4l5l 
       foreign key (company_id) 
       references singtel_app.companies
2025-07-12 03:19:22 - 
    alter table if exists singtel_app.service_instances 
       add constraint FKguvw7g804iujk1276dy213sve 
       foreign key (service_id) 
       references singtel_app.services
Hibernate: 
    alter table if exists singtel_app.service_instances 
       add constraint FKguvw7g804iujk1276dy213sve 
       foreign key (service_id) 
       references singtel_app.services
2025-07-12 03:19:22 - 
    alter table if exists singtel_app.services 
       add constraint FKfffr4emayc2n4uq3yv618d9j0 
       foreign key (category_id) 
       references singtel_app.service_categories
Hibernate: 
    alter table if exists singtel_app.services 
       add constraint FKfffr4emayc2n4uq3yv618d9j0 
       foreign key (category_id) 
       references singtel_app.service_categories
2025-07-12 03:19:22 - 
    alter table if exists singtel_app.users 
       add constraint FKin8gn4o1hpiwe6qe4ey7ykwq7 
       foreign key (company_id) 
       references singtel_app.companies
Hibernate: 
    alter table if exists singtel_app.users 
       add constraint FKin8gn4o1hpiwe6qe4ey7ykwq7 
       foreign key (company_id) 
       references singtel_app.companies
2025-07-12 03:19:22 - Initialized JPA EntityManagerFactory for persistence unit 'default'
2025-07-12 03:19:22 - Started UserRepositoryTest in 1.09 seconds (process running for 11.788)
2025-07-12 03:19:22 - 
    insert 
    into
        singtel_app.companies
        (address, company_size, country, created_at, email, industry, name, phone, postal_code, registration_number, status, updated_at, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
Hibernate: 
    insert 
    into
        singtel_app.companies
        (address, company_size, country, created_at, email, industry, name, phone, postal_code, registration_number, status, updated_at, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-07-12 03:19:22 - 
    insert 
    into
        singtel_app.users
        (company_id, created_at, email, first_name, last_login_at, last_name, password_changed_at, password_hash, phone, role, status, updated_at, username, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
Hibernate: 
    insert 
    into
        singtel_app.users
        (company_id, created_at, email, first_name, last_login_at, last_name, password_changed_at, password_hash, phone, role, status, updated_at, username, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-07-12 03:19:22 - 
    insert 
    into
        singtel_app.users
        (company_id, created_at, email, first_name, last_login_at, last_name, password_changed_at, password_hash, phone, role, status, updated_at, username, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
Hibernate: 
    insert 
    into
        singtel_app.users
        (company_id, created_at, email, first_name, last_login_at, last_name, password_changed_at, password_hash, phone, role, status, updated_at, username, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-07-12 03:19:22 - JDBC URL to connect to 'dataSource': url='jdbc:postgresql://localhost:35943/drbxhmhllvsr?user=postgres&password=docker', scope='UserRepositoryTest#countByCompanyId_Success'
2025-07-12 03:19:22 - 
    select
        count(u1_0.id) 
    from
        singtel_app.users u1_0 
    where
        u1_0.company_id=?
Hibernate: 
    select
        count(u1_0.id) 
    from
        singtel_app.users u1_0 
    where
        u1_0.company_id=?
]]></system-out>
  </testcase>
  <testcase name="findAdminUsersByCompanyId_Success" classname="com.singtel.network.repository.UserRepositoryTest" time="0.013">
    <system-out><![CDATA[2025-07-12 03:19:22 - 
    insert 
    into
        singtel_app.companies
        (address, company_size, country, created_at, email, industry, name, phone, postal_code, registration_number, status, updated_at, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
Hibernate: 
    insert 
    into
        singtel_app.companies
        (address, company_size, country, created_at, email, industry, name, phone, postal_code, registration_number, status, updated_at, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-07-12 03:19:22 - 
    insert 
    into
        singtel_app.users
        (company_id, created_at, email, first_name, last_login_at, last_name, password_changed_at, password_hash, phone, role, status, updated_at, username, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
Hibernate: 
    insert 
    into
        singtel_app.users
        (company_id, created_at, email, first_name, last_login_at, last_name, password_changed_at, password_hash, phone, role, status, updated_at, username, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-07-12 03:19:22 - 
    insert 
    into
        singtel_app.users
        (company_id, created_at, email, first_name, last_login_at, last_name, password_changed_at, password_hash, phone, role, status, updated_at, username, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
Hibernate: 
    insert 
    into
        singtel_app.users
        (company_id, created_at, email, first_name, last_login_at, last_name, password_changed_at, password_hash, phone, role, status, updated_at, username, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-07-12 03:19:22 - JDBC URL to connect to 'dataSource': url='jdbc:postgresql://localhost:35943/drbxhmhllvsr?user=postgres&password=docker', scope='UserRepositoryTest#findAdminUsersByCompanyId_Success'
2025-07-12 03:19:22 - 
    select
        u1_0.id,
        u1_0.company_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.first_name,
        u1_0.last_login_at,
        u1_0.last_name,
        u1_0.password_changed_at,
        u1_0.password_hash,
        u1_0.phone,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        singtel_app.users u1_0 
    where
        u1_0.company_id=? 
        and u1_0.role='ADMIN' 
        and u1_0.status='ACTIVE'
Hibernate: 
    select
        u1_0.id,
        u1_0.company_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.first_name,
        u1_0.last_login_at,
        u1_0.last_name,
        u1_0.password_changed_at,
        u1_0.password_hash,
        u1_0.phone,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        singtel_app.users u1_0 
    where
        u1_0.company_id=? 
        and u1_0.role='ADMIN' 
        and u1_0.status='ACTIVE'
]]></system-out>
  </testcase>
  <testcase name="existsByUsername_False" classname="com.singtel.network.repository.UserRepositoryTest" time="0.011">
    <system-out><![CDATA[2025-07-12 03:19:22 - 
    insert 
    into
        singtel_app.companies
        (address, company_size, country, created_at, email, industry, name, phone, postal_code, registration_number, status, updated_at, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
Hibernate: 
    insert 
    into
        singtel_app.companies
        (address, company_size, country, created_at, email, industry, name, phone, postal_code, registration_number, status, updated_at, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-07-12 03:19:22 - 
    insert 
    into
        singtel_app.users
        (company_id, created_at, email, first_name, last_login_at, last_name, password_changed_at, password_hash, phone, role, status, updated_at, username, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
Hibernate: 
    insert 
    into
        singtel_app.users
        (company_id, created_at, email, first_name, last_login_at, last_name, password_changed_at, password_hash, phone, role, status, updated_at, username, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-07-12 03:19:22 - 
    insert 
    into
        singtel_app.users
        (company_id, created_at, email, first_name, last_login_at, last_name, password_changed_at, password_hash, phone, role, status, updated_at, username, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
Hibernate: 
    insert 
    into
        singtel_app.users
        (company_id, created_at, email, first_name, last_login_at, last_name, password_changed_at, password_hash, phone, role, status, updated_at, username, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-07-12 03:19:22 - JDBC URL to connect to 'dataSource': url='jdbc:postgresql://localhost:35943/drbxhmhllvsr?user=postgres&password=docker', scope='UserRepositoryTest#existsByUsername_False'
2025-07-12 03:19:22 - 
    select
        u1_0.id 
    from
        singtel_app.users u1_0 
    where
        u1_0.username=? 
    fetch
        first ? rows only
Hibernate: 
    select
        u1_0.id 
    from
        singtel_app.users u1_0 
    where
        u1_0.username=? 
    fetch
        first ? rows only
]]></system-out>
  </testcase>
  <testcase name="findByStatus_Success" classname="com.singtel.network.repository.UserRepositoryTest" time="0.012">
    <system-out><![CDATA[2025-07-12 03:19:22 - 
    insert 
    into
        singtel_app.companies
        (address, company_size, country, created_at, email, industry, name, phone, postal_code, registration_number, status, updated_at, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
Hibernate: 
    insert 
    into
        singtel_app.companies
        (address, company_size, country, created_at, email, industry, name, phone, postal_code, registration_number, status, updated_at, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-07-12 03:19:22 - 
    insert 
    into
        singtel_app.users
        (company_id, created_at, email, first_name, last_login_at, last_name, password_changed_at, password_hash, phone, role, status, updated_at, username, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
Hibernate: 
    insert 
    into
        singtel_app.users
        (company_id, created_at, email, first_name, last_login_at, last_name, password_changed_at, password_hash, phone, role, status, updated_at, username, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-07-12 03:19:22 - 
    insert 
    into
        singtel_app.users
        (company_id, created_at, email, first_name, last_login_at, last_name, password_changed_at, password_hash, phone, role, status, updated_at, username, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
Hibernate: 
    insert 
    into
        singtel_app.users
        (company_id, created_at, email, first_name, last_login_at, last_name, password_changed_at, password_hash, phone, role, status, updated_at, username, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-07-12 03:19:22 - JDBC URL to connect to 'dataSource': url='jdbc:postgresql://localhost:35943/drbxhmhllvsr?user=postgres&password=docker', scope='UserRepositoryTest#findByStatus_Success'
2025-07-12 03:19:22 - 
    select
        u1_0.id,
        u1_0.company_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.first_name,
        u1_0.last_login_at,
        u1_0.last_name,
        u1_0.password_changed_at,
        u1_0.password_hash,
        u1_0.phone,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        singtel_app.users u1_0 
    where
        u1_0.status=?
Hibernate: 
    select
        u1_0.id,
        u1_0.company_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.first_name,
        u1_0.last_login_at,
        u1_0.last_name,
        u1_0.password_changed_at,
        u1_0.password_hash,
        u1_0.phone,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        singtel_app.users u1_0 
    where
        u1_0.status=?
]]></system-out>
  </testcase>
  <testcase name="findByCompanyId_Success" classname="com.singtel.network.repository.UserRepositoryTest" time="0.011">
    <system-out><![CDATA[2025-07-12 03:19:22 - 
    insert 
    into
        singtel_app.companies
        (address, company_size, country, created_at, email, industry, name, phone, postal_code, registration_number, status, updated_at, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
Hibernate: 
    insert 
    into
        singtel_app.companies
        (address, company_size, country, created_at, email, industry, name, phone, postal_code, registration_number, status, updated_at, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-07-12 03:19:22 - 
    insert 
    into
        singtel_app.users
        (company_id, created_at, email, first_name, last_login_at, last_name, password_changed_at, password_hash, phone, role, status, updated_at, username, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
Hibernate: 
    insert 
    into
        singtel_app.users
        (company_id, created_at, email, first_name, last_login_at, last_name, password_changed_at, password_hash, phone, role, status, updated_at, username, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-07-12 03:19:22 - 
    insert 
    into
        singtel_app.users
        (company_id, created_at, email, first_name, last_login_at, last_name, password_changed_at, password_hash, phone, role, status, updated_at, username, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
Hibernate: 
    insert 
    into
        singtel_app.users
        (company_id, created_at, email, first_name, last_login_at, last_name, password_changed_at, password_hash, phone, role, status, updated_at, username, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-07-12 03:19:22 - JDBC URL to connect to 'dataSource': url='jdbc:postgresql://localhost:35943/drbxhmhllvsr?user=postgres&password=docker', scope='UserRepositoryTest#findByCompanyId_Success'
2025-07-12 03:19:22 - 
    select
        u1_0.id,
        u1_0.company_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.first_name,
        u1_0.last_login_at,
        u1_0.last_name,
        u1_0.password_changed_at,
        u1_0.password_hash,
        u1_0.phone,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        singtel_app.users u1_0 
    where
        u1_0.company_id=?
Hibernate: 
    select
        u1_0.id,
        u1_0.company_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.first_name,
        u1_0.last_login_at,
        u1_0.last_name,
        u1_0.password_changed_at,
        u1_0.password_hash,
        u1_0.phone,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        singtel_app.users u1_0 
    where
        u1_0.company_id=?
]]></system-out>
  </testcase>
  <testcase name="findByUsername_Success" classname="com.singtel.network.repository.UserRepositoryTest" time="0.01">
    <system-out><![CDATA[2025-07-12 03:19:23 - 
    insert 
    into
        singtel_app.companies
        (address, company_size, country, created_at, email, industry, name, phone, postal_code, registration_number, status, updated_at, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
Hibernate: 
    insert 
    into
        singtel_app.companies
        (address, company_size, country, created_at, email, industry, name, phone, postal_code, registration_number, status, updated_at, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-07-12 03:19:23 - 
    insert 
    into
        singtel_app.users
        (company_id, created_at, email, first_name, last_login_at, last_name, password_changed_at, password_hash, phone, role, status, updated_at, username, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
Hibernate: 
    insert 
    into
        singtel_app.users
        (company_id, created_at, email, first_name, last_login_at, last_name, password_changed_at, password_hash, phone, role, status, updated_at, username, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-07-12 03:19:23 - 
    insert 
    into
        singtel_app.users
        (company_id, created_at, email, first_name, last_login_at, last_name, password_changed_at, password_hash, phone, role, status, updated_at, username, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
Hibernate: 
    insert 
    into
        singtel_app.users
        (company_id, created_at, email, first_name, last_login_at, last_name, password_changed_at, password_hash, phone, role, status, updated_at, username, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-07-12 03:19:23 - JDBC URL to connect to 'dataSource': url='jdbc:postgresql://localhost:35943/drbxhmhllvsr?user=postgres&password=docker', scope='UserRepositoryTest#findByUsername_Success'
2025-07-12 03:19:23 - 
    select
        u1_0.id,
        u1_0.company_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.first_name,
        u1_0.last_login_at,
        u1_0.last_name,
        u1_0.password_changed_at,
        u1_0.password_hash,
        u1_0.phone,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        singtel_app.users u1_0 
    where
        u1_0.username=?
Hibernate: 
    select
        u1_0.id,
        u1_0.company_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.first_name,
        u1_0.last_login_at,
        u1_0.last_name,
        u1_0.password_changed_at,
        u1_0.password_hash,
        u1_0.phone,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        singtel_app.users u1_0 
    where
        u1_0.username=?
]]></system-out>
  </testcase>
  <testcase name="searchUsersByCompany_WithEmail" classname="com.singtel.network.repository.UserRepositoryTest" time="0.013">
    <system-out><![CDATA[2025-07-12 03:19:23 - 
    insert 
    into
        singtel_app.companies
        (address, company_size, country, created_at, email, industry, name, phone, postal_code, registration_number, status, updated_at, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
Hibernate: 
    insert 
    into
        singtel_app.companies
        (address, company_size, country, created_at, email, industry, name, phone, postal_code, registration_number, status, updated_at, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-07-12 03:19:23 - 
    insert 
    into
        singtel_app.users
        (company_id, created_at, email, first_name, last_login_at, last_name, password_changed_at, password_hash, phone, role, status, updated_at, username, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
Hibernate: 
    insert 
    into
        singtel_app.users
        (company_id, created_at, email, first_name, last_login_at, last_name, password_changed_at, password_hash, phone, role, status, updated_at, username, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-07-12 03:19:23 - 
    insert 
    into
        singtel_app.users
        (company_id, created_at, email, first_name, last_login_at, last_name, password_changed_at, password_hash, phone, role, status, updated_at, username, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
Hibernate: 
    insert 
    into
        singtel_app.users
        (company_id, created_at, email, first_name, last_login_at, last_name, password_changed_at, password_hash, phone, role, status, updated_at, username, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-07-12 03:19:23 - JDBC URL to connect to 'dataSource': url='jdbc:postgresql://localhost:35943/drbxhmhllvsr?user=postgres&password=docker', scope='UserRepositoryTest#searchUsersByCompany_WithEmail'
2025-07-12 03:19:23 - 
    select
        u1_0.id,
        u1_0.company_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.first_name,
        u1_0.last_login_at,
        u1_0.last_name,
        u1_0.password_changed_at,
        u1_0.password_hash,
        u1_0.phone,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        singtel_app.users u1_0 
    where
        (
            lower(u1_0.first_name) like lower(('%'||?||'%')) escape '' 
            or lower(u1_0.last_name) like lower(('%'||?||'%')) escape '' 
            or lower(u1_0.email) like lower(('%'||?||'%')) escape '' 
            or lower(u1_0.username) like lower(('%'||?||'%')) escape ''
        ) 
        and u1_0.company_id=? 
    offset
        ? rows 
    fetch
        first ? rows only
Hibernate: 
    select
        u1_0.id,
        u1_0.company_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.first_name,
        u1_0.last_login_at,
        u1_0.last_name,
        u1_0.password_changed_at,
        u1_0.password_hash,
        u1_0.phone,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        singtel_app.users u1_0 
    where
        (
            lower(u1_0.first_name) like lower(('%'||?||'%')) escape '' 
            or lower(u1_0.last_name) like lower(('%'||?||'%')) escape '' 
            or lower(u1_0.email) like lower(('%'||?||'%')) escape '' 
            or lower(u1_0.username) like lower(('%'||?||'%')) escape ''
        ) 
        and u1_0.company_id=? 
    offset
        ? rows 
    fetch
        first ? rows only
]]></system-out>
  </testcase>
  <testcase name="existsByEmail_True" classname="com.singtel.network.repository.UserRepositoryTest" time="0.009">
    <system-out><![CDATA[2025-07-12 03:19:23 - 
    insert 
    into
        singtel_app.companies
        (address, company_size, country, created_at, email, industry, name, phone, postal_code, registration_number, status, updated_at, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
Hibernate: 
    insert 
    into
        singtel_app.companies
        (address, company_size, country, created_at, email, industry, name, phone, postal_code, registration_number, status, updated_at, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-07-12 03:19:23 - 
    insert 
    into
        singtel_app.users
        (company_id, created_at, email, first_name, last_login_at, last_name, password_changed_at, password_hash, phone, role, status, updated_at, username, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
Hibernate: 
    insert 
    into
        singtel_app.users
        (company_id, created_at, email, first_name, last_login_at, last_name, password_changed_at, password_hash, phone, role, status, updated_at, username, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-07-12 03:19:23 - 
    insert 
    into
        singtel_app.users
        (company_id, created_at, email, first_name, last_login_at, last_name, password_changed_at, password_hash, phone, role, status, updated_at, username, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
Hibernate: 
    insert 
    into
        singtel_app.users
        (company_id, created_at, email, first_name, last_login_at, last_name, password_changed_at, password_hash, phone, role, status, updated_at, username, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-07-12 03:19:23 - JDBC URL to connect to 'dataSource': url='jdbc:postgresql://localhost:35943/drbxhmhllvsr?user=postgres&password=docker', scope='UserRepositoryTest#existsByEmail_True'
2025-07-12 03:19:23 - 
    select
        u1_0.id 
    from
        singtel_app.users u1_0 
    where
        u1_0.email=? 
    fetch
        first ? rows only
Hibernate: 
    select
        u1_0.id 
    from
        singtel_app.users u1_0 
    where
        u1_0.email=? 
    fetch
        first ? rows only
]]></system-out>
  </testcase>
  <testcase name="findUsersWithExpiredPasswords_Success" classname="com.singtel.network.repository.UserRepositoryTest" time="0.015">
    <system-out><![CDATA[2025-07-12 03:19:23 - 
    insert 
    into
        singtel_app.companies
        (address, company_size, country, created_at, email, industry, name, phone, postal_code, registration_number, status, updated_at, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
Hibernate: 
    insert 
    into
        singtel_app.companies
        (address, company_size, country, created_at, email, industry, name, phone, postal_code, registration_number, status, updated_at, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-07-12 03:19:23 - 
    insert 
    into
        singtel_app.users
        (company_id, created_at, email, first_name, last_login_at, last_name, password_changed_at, password_hash, phone, role, status, updated_at, username, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
Hibernate: 
    insert 
    into
        singtel_app.users
        (company_id, created_at, email, first_name, last_login_at, last_name, password_changed_at, password_hash, phone, role, status, updated_at, username, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-07-12 03:19:23 - 
    insert 
    into
        singtel_app.users
        (company_id, created_at, email, first_name, last_login_at, last_name, password_changed_at, password_hash, phone, role, status, updated_at, username, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
Hibernate: 
    insert 
    into
        singtel_app.users
        (company_id, created_at, email, first_name, last_login_at, last_name, password_changed_at, password_hash, phone, role, status, updated_at, username, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-07-12 03:19:23 - JDBC URL to connect to 'dataSource': url='jdbc:postgresql://localhost:35943/drbxhmhllvsr?user=postgres&password=docker', scope='UserRepositoryTest#findUsersWithExpiredPasswords_Success'
2025-07-12 03:19:23 - 
    select
        u1_0.id,
        u1_0.company_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.first_name,
        u1_0.last_login_at,
        u1_0.last_name,
        u1_0.password_changed_at,
        u1_0.password_hash,
        u1_0.phone,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        singtel_app.users u1_0 
    where
        u1_0.password_changed_at<? 
        and u1_0.status='ACTIVE'
Hibernate: 
    select
        u1_0.id,
        u1_0.company_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.first_name,
        u1_0.last_login_at,
        u1_0.last_name,
        u1_0.password_changed_at,
        u1_0.password_hash,
        u1_0.phone,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        singtel_app.users u1_0 
    where
        u1_0.password_changed_at<? 
        and u1_0.status='ACTIVE'
]]></system-out>
  </testcase>
  <testcase name="existsByEmail_False" classname="com.singtel.network.repository.UserRepositoryTest" time="0.011">
    <system-out><![CDATA[2025-07-12 03:19:23 - 
    insert 
    into
        singtel_app.companies
        (address, company_size, country, created_at, email, industry, name, phone, postal_code, registration_number, status, updated_at, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
Hibernate: 
    insert 
    into
        singtel_app.companies
        (address, company_size, country, created_at, email, industry, name, phone, postal_code, registration_number, status, updated_at, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-07-12 03:19:23 - 
    insert 
    into
        singtel_app.users
        (company_id, created_at, email, first_name, last_login_at, last_name, password_changed_at, password_hash, phone, role, status, updated_at, username, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
Hibernate: 
    insert 
    into
        singtel_app.users
        (company_id, created_at, email, first_name, last_login_at, last_name, password_changed_at, password_hash, phone, role, status, updated_at, username, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-07-12 03:19:23 - 
    insert 
    into
        singtel_app.users
        (company_id, created_at, email, first_name, last_login_at, last_name, password_changed_at, password_hash, phone, role, status, updated_at, username, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
Hibernate: 
    insert 
    into
        singtel_app.users
        (company_id, created_at, email, first_name, last_login_at, last_name, password_changed_at, password_hash, phone, role, status, updated_at, username, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-07-12 03:19:23 - JDBC URL to connect to 'dataSource': url='jdbc:postgresql://localhost:35943/drbxhmhllvsr?user=postgres&password=docker', scope='UserRepositoryTest#existsByEmail_False'
2025-07-12 03:19:23 - 
    select
        u1_0.id 
    from
        singtel_app.users u1_0 
    where
        u1_0.email=? 
    fetch
        first ? rows only
Hibernate: 
    select
        u1_0.id 
    from
        singtel_app.users u1_0 
    where
        u1_0.email=? 
    fetch
        first ? rows only
]]></system-out>
  </testcase>
  <testcase name="updateUserStatus_Success" classname="com.singtel.network.repository.UserRepositoryTest" time="0.022">
    <system-out><![CDATA[2025-07-12 03:19:23 - 
    insert 
    into
        singtel_app.companies
        (address, company_size, country, created_at, email, industry, name, phone, postal_code, registration_number, status, updated_at, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
Hibernate: 
    insert 
    into
        singtel_app.companies
        (address, company_size, country, created_at, email, industry, name, phone, postal_code, registration_number, status, updated_at, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-07-12 03:19:23 - 
    insert 
    into
        singtel_app.users
        (company_id, created_at, email, first_name, last_login_at, last_name, password_changed_at, password_hash, phone, role, status, updated_at, username, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
Hibernate: 
    insert 
    into
        singtel_app.users
        (company_id, created_at, email, first_name, last_login_at, last_name, password_changed_at, password_hash, phone, role, status, updated_at, username, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-07-12 03:19:23 - 
    insert 
    into
        singtel_app.users
        (company_id, created_at, email, first_name, last_login_at, last_name, password_changed_at, password_hash, phone, role, status, updated_at, username, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
Hibernate: 
    insert 
    into
        singtel_app.users
        (company_id, created_at, email, first_name, last_login_at, last_name, password_changed_at, password_hash, phone, role, status, updated_at, username, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-07-12 03:19:23 - JDBC URL to connect to 'dataSource': url='jdbc:postgresql://localhost:35943/drbxhmhllvsr?user=postgres&password=docker', scope='UserRepositoryTest#updateUserStatus_Success'
2025-07-12 03:19:23 - 
    update
        singtel_app.users 
    set
        status=? 
    where
        id=?
Hibernate: 
    update
        singtel_app.users 
    set
        status=? 
    where
        id=?
2025-07-12 03:19:23 - 
    select
        u1_0.id,
        u1_0.company_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.first_name,
        u1_0.last_login_at,
        u1_0.last_name,
        u1_0.password_changed_at,
        u1_0.password_hash,
        u1_0.phone,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        singtel_app.users u1_0 
    where
        u1_0.id=?
Hibernate: 
    select
        u1_0.id,
        u1_0.company_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.first_name,
        u1_0.last_login_at,
        u1_0.last_name,
        u1_0.password_changed_at,
        u1_0.password_hash,
        u1_0.phone,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        singtel_app.users u1_0 
    where
        u1_0.id=?
]]></system-out>
  </testcase>
  <testcase name="findByCompanyIdWithPagination_Success" classname="com.singtel.network.repository.UserRepositoryTest" time="0.015">
    <system-out><![CDATA[2025-07-12 03:19:23 - 
    insert 
    into
        singtel_app.companies
        (address, company_size, country, created_at, email, industry, name, phone, postal_code, registration_number, status, updated_at, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
Hibernate: 
    insert 
    into
        singtel_app.companies
        (address, company_size, country, created_at, email, industry, name, phone, postal_code, registration_number, status, updated_at, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-07-12 03:19:23 - 
    insert 
    into
        singtel_app.users
        (company_id, created_at, email, first_name, last_login_at, last_name, password_changed_at, password_hash, phone, role, status, updated_at, username, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
Hibernate: 
    insert 
    into
        singtel_app.users
        (company_id, created_at, email, first_name, last_login_at, last_name, password_changed_at, password_hash, phone, role, status, updated_at, username, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-07-12 03:19:23 - 
    insert 
    into
        singtel_app.users
        (company_id, created_at, email, first_name, last_login_at, last_name, password_changed_at, password_hash, phone, role, status, updated_at, username, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
Hibernate: 
    insert 
    into
        singtel_app.users
        (company_id, created_at, email, first_name, last_login_at, last_name, password_changed_at, password_hash, phone, role, status, updated_at, username, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-07-12 03:19:23 - JDBC URL to connect to 'dataSource': url='jdbc:postgresql://localhost:35943/drbxhmhllvsr?user=postgres&password=docker', scope='UserRepositoryTest#findByCompanyIdWithPagination_Success'
2025-07-12 03:19:23 - 
    select
        u1_0.id,
        u1_0.company_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.first_name,
        u1_0.last_login_at,
        u1_0.last_name,
        u1_0.password_changed_at,
        u1_0.password_hash,
        u1_0.phone,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        singtel_app.users u1_0 
    where
        u1_0.company_id=? 
    offset
        ? rows 
    fetch
        first ? rows only
Hibernate: 
    select
        u1_0.id,
        u1_0.company_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.first_name,
        u1_0.last_login_at,
        u1_0.last_name,
        u1_0.password_changed_at,
        u1_0.password_hash,
        u1_0.phone,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        singtel_app.users u1_0 
    where
        u1_0.company_id=? 
    offset
        ? rows 
    fetch
        first ? rows only
2025-07-12 03:19:23 - 
    select
        count(u1_0.id) 
    from
        singtel_app.users u1_0 
    where
        u1_0.company_id=?
Hibernate: 
    select
        count(u1_0.id) 
    from
        singtel_app.users u1_0 
    where
        u1_0.company_id=?
]]></system-out>
  </testcase>
  <testcase name="findByUsernameOrEmail_WithEmail" classname="com.singtel.network.repository.UserRepositoryTest" time="0.012">
    <system-out><![CDATA[2025-07-12 03:19:23 - 
    insert 
    into
        singtel_app.companies
        (address, company_size, country, created_at, email, industry, name, phone, postal_code, registration_number, status, updated_at, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
Hibernate: 
    insert 
    into
        singtel_app.companies
        (address, company_size, country, created_at, email, industry, name, phone, postal_code, registration_number, status, updated_at, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-07-12 03:19:23 - 
    insert 
    into
        singtel_app.users
        (company_id, created_at, email, first_name, last_login_at, last_name, password_changed_at, password_hash, phone, role, status, updated_at, username, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
Hibernate: 
    insert 
    into
        singtel_app.users
        (company_id, created_at, email, first_name, last_login_at, last_name, password_changed_at, password_hash, phone, role, status, updated_at, username, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-07-12 03:19:23 - 
    insert 
    into
        singtel_app.users
        (company_id, created_at, email, first_name, last_login_at, last_name, password_changed_at, password_hash, phone, role, status, updated_at, username, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
Hibernate: 
    insert 
    into
        singtel_app.users
        (company_id, created_at, email, first_name, last_login_at, last_name, password_changed_at, password_hash, phone, role, status, updated_at, username, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-07-12 03:19:23 - JDBC URL to connect to 'dataSource': url='jdbc:postgresql://localhost:35943/drbxhmhllvsr?user=postgres&password=docker', scope='UserRepositoryTest#findByUsernameOrEmail_WithEmail'
2025-07-12 03:19:23 - 
    select
        u1_0.id,
        u1_0.company_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.first_name,
        u1_0.last_login_at,
        u1_0.last_name,
        u1_0.password_changed_at,
        u1_0.password_hash,
        u1_0.phone,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        singtel_app.users u1_0 
    where
        u1_0.username=? 
        or u1_0.email=?
Hibernate: 
    select
        u1_0.id,
        u1_0.company_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.first_name,
        u1_0.last_login_at,
        u1_0.last_name,
        u1_0.password_changed_at,
        u1_0.password_hash,
        u1_0.phone,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        singtel_app.users u1_0 
    where
        u1_0.username=? 
        or u1_0.email=?
]]></system-out>
  </testcase>
  <testcase name="findByCompanyIdAndRole_Success" classname="com.singtel.network.repository.UserRepositoryTest" time="0.012">
    <system-out><![CDATA[2025-07-12 03:19:23 - 
    insert 
    into
        singtel_app.companies
        (address, company_size, country, created_at, email, industry, name, phone, postal_code, registration_number, status, updated_at, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
Hibernate: 
    insert 
    into
        singtel_app.companies
        (address, company_size, country, created_at, email, industry, name, phone, postal_code, registration_number, status, updated_at, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-07-12 03:19:23 - 
    insert 
    into
        singtel_app.users
        (company_id, created_at, email, first_name, last_login_at, last_name, password_changed_at, password_hash, phone, role, status, updated_at, username, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
Hibernate: 
    insert 
    into
        singtel_app.users
        (company_id, created_at, email, first_name, last_login_at, last_name, password_changed_at, password_hash, phone, role, status, updated_at, username, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-07-12 03:19:23 - 
    insert 
    into
        singtel_app.users
        (company_id, created_at, email, first_name, last_login_at, last_name, password_changed_at, password_hash, phone, role, status, updated_at, username, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
Hibernate: 
    insert 
    into
        singtel_app.users
        (company_id, created_at, email, first_name, last_login_at, last_name, password_changed_at, password_hash, phone, role, status, updated_at, username, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-07-12 03:19:23 - JDBC URL to connect to 'dataSource': url='jdbc:postgresql://localhost:35943/drbxhmhllvsr?user=postgres&password=docker', scope='UserRepositoryTest#findByCompanyIdAndRole_Success'
2025-07-12 03:19:23 - 
    select
        u1_0.id,
        u1_0.company_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.first_name,
        u1_0.last_login_at,
        u1_0.last_name,
        u1_0.password_changed_at,
        u1_0.password_hash,
        u1_0.phone,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        singtel_app.users u1_0 
    where
        u1_0.company_id=? 
        and u1_0.role=?
Hibernate: 
    select
        u1_0.id,
        u1_0.company_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.first_name,
        u1_0.last_login_at,
        u1_0.last_name,
        u1_0.password_changed_at,
        u1_0.password_hash,
        u1_0.phone,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        singtel_app.users u1_0 
    where
        u1_0.company_id=? 
        and u1_0.role=?
]]></system-out>
  </testcase>
  <testcase name="findActiveUsersByCompanyId_Success" classname="com.singtel.network.repository.UserRepositoryTest" time="0.012">
    <system-out><![CDATA[2025-07-12 03:19:23 - 
    insert 
    into
        singtel_app.companies
        (address, company_size, country, created_at, email, industry, name, phone, postal_code, registration_number, status, updated_at, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
Hibernate: 
    insert 
    into
        singtel_app.companies
        (address, company_size, country, created_at, email, industry, name, phone, postal_code, registration_number, status, updated_at, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-07-12 03:19:23 - 
    insert 
    into
        singtel_app.users
        (company_id, created_at, email, first_name, last_login_at, last_name, password_changed_at, password_hash, phone, role, status, updated_at, username, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
Hibernate: 
    insert 
    into
        singtel_app.users
        (company_id, created_at, email, first_name, last_login_at, last_name, password_changed_at, password_hash, phone, role, status, updated_at, username, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-07-12 03:19:23 - 
    insert 
    into
        singtel_app.users
        (company_id, created_at, email, first_name, last_login_at, last_name, password_changed_at, password_hash, phone, role, status, updated_at, username, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
Hibernate: 
    insert 
    into
        singtel_app.users
        (company_id, created_at, email, first_name, last_login_at, last_name, password_changed_at, password_hash, phone, role, status, updated_at, username, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-07-12 03:19:23 - JDBC URL to connect to 'dataSource': url='jdbc:postgresql://localhost:35943/drbxhmhllvsr?user=postgres&password=docker', scope='UserRepositoryTest#findActiveUsersByCompanyId_Success'
2025-07-12 03:19:23 - 
    select
        u1_0.id,
        u1_0.company_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.first_name,
        u1_0.last_login_at,
        u1_0.last_name,
        u1_0.password_changed_at,
        u1_0.password_hash,
        u1_0.phone,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        singtel_app.users u1_0 
    where
        u1_0.company_id=? 
        and u1_0.status='ACTIVE'
Hibernate: 
    select
        u1_0.id,
        u1_0.company_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.first_name,
        u1_0.last_login_at,
        u1_0.last_name,
        u1_0.password_changed_at,
        u1_0.password_hash,
        u1_0.phone,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        singtel_app.users u1_0 
    where
        u1_0.company_id=? 
        and u1_0.status='ACTIVE'
]]></system-out>
  </testcase>
  <testcase name="findByUsername_NotFound" classname="com.singtel.network.repository.UserRepositoryTest" time="0.012">
    <system-out><![CDATA[2025-07-12 03:19:23 - 
    insert 
    into
        singtel_app.companies
        (address, company_size, country, created_at, email, industry, name, phone, postal_code, registration_number, status, updated_at, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
Hibernate: 
    insert 
    into
        singtel_app.companies
        (address, company_size, country, created_at, email, industry, name, phone, postal_code, registration_number, status, updated_at, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-07-12 03:19:23 - 
    insert 
    into
        singtel_app.users
        (company_id, created_at, email, first_name, last_login_at, last_name, password_changed_at, password_hash, phone, role, status, updated_at, username, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
Hibernate: 
    insert 
    into
        singtel_app.users
        (company_id, created_at, email, first_name, last_login_at, last_name, password_changed_at, password_hash, phone, role, status, updated_at, username, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-07-12 03:19:23 - 
    insert 
    into
        singtel_app.users
        (company_id, created_at, email, first_name, last_login_at, last_name, password_changed_at, password_hash, phone, role, status, updated_at, username, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
Hibernate: 
    insert 
    into
        singtel_app.users
        (company_id, created_at, email, first_name, last_login_at, last_name, password_changed_at, password_hash, phone, role, status, updated_at, username, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-07-12 03:19:23 - JDBC URL to connect to 'dataSource': url='jdbc:postgresql://localhost:35943/drbxhmhllvsr?user=postgres&password=docker', scope='UserRepositoryTest#findByUsername_NotFound'
2025-07-12 03:19:23 - 
    select
        u1_0.id,
        u1_0.company_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.first_name,
        u1_0.last_login_at,
        u1_0.last_name,
        u1_0.password_changed_at,
        u1_0.password_hash,
        u1_0.phone,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        singtel_app.users u1_0 
    where
        u1_0.username=?
Hibernate: 
    select
        u1_0.id,
        u1_0.company_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.first_name,
        u1_0.last_login_at,
        u1_0.last_name,
        u1_0.password_changed_at,
        u1_0.password_hash,
        u1_0.phone,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        singtel_app.users u1_0 
    where
        u1_0.username=?
]]></system-out>
  </testcase>
  <testcase name="searchUsersByCompany_Success" classname="com.singtel.network.repository.UserRepositoryTest" time="0.012">
    <system-out><![CDATA[2025-07-12 03:19:23 - 
    insert 
    into
        singtel_app.companies
        (address, company_size, country, created_at, email, industry, name, phone, postal_code, registration_number, status, updated_at, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
Hibernate: 
    insert 
    into
        singtel_app.companies
        (address, company_size, country, created_at, email, industry, name, phone, postal_code, registration_number, status, updated_at, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-07-12 03:19:23 - 
    insert 
    into
        singtel_app.users
        (company_id, created_at, email, first_name, last_login_at, last_name, password_changed_at, password_hash, phone, role, status, updated_at, username, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
Hibernate: 
    insert 
    into
        singtel_app.users
        (company_id, created_at, email, first_name, last_login_at, last_name, password_changed_at, password_hash, phone, role, status, updated_at, username, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-07-12 03:19:23 - 
    insert 
    into
        singtel_app.users
        (company_id, created_at, email, first_name, last_login_at, last_name, password_changed_at, password_hash, phone, role, status, updated_at, username, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
Hibernate: 
    insert 
    into
        singtel_app.users
        (company_id, created_at, email, first_name, last_login_at, last_name, password_changed_at, password_hash, phone, role, status, updated_at, username, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-07-12 03:19:23 - JDBC URL to connect to 'dataSource': url='jdbc:postgresql://localhost:35943/drbxhmhllvsr?user=postgres&password=docker', scope='UserRepositoryTest#searchUsersByCompany_Success'
2025-07-12 03:19:23 - 
    select
        u1_0.id,
        u1_0.company_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.first_name,
        u1_0.last_login_at,
        u1_0.last_name,
        u1_0.password_changed_at,
        u1_0.password_hash,
        u1_0.phone,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        singtel_app.users u1_0 
    where
        (
            lower(u1_0.first_name) like lower(('%'||?||'%')) escape '' 
            or lower(u1_0.last_name) like lower(('%'||?||'%')) escape '' 
            or lower(u1_0.email) like lower(('%'||?||'%')) escape '' 
            or lower(u1_0.username) like lower(('%'||?||'%')) escape ''
        ) 
        and u1_0.company_id=? 
    offset
        ? rows 
    fetch
        first ? rows only
Hibernate: 
    select
        u1_0.id,
        u1_0.company_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.first_name,
        u1_0.last_login_at,
        u1_0.last_name,
        u1_0.password_changed_at,
        u1_0.password_hash,
        u1_0.phone,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        singtel_app.users u1_0 
    where
        (
            lower(u1_0.first_name) like lower(('%'||?||'%')) escape '' 
            or lower(u1_0.last_name) like lower(('%'||?||'%')) escape '' 
            or lower(u1_0.email) like lower(('%'||?||'%')) escape '' 
            or lower(u1_0.username) like lower(('%'||?||'%')) escape ''
        ) 
        and u1_0.company_id=? 
    offset
        ? rows 
    fetch
        first ? rows only
]]></system-out>
  </testcase>
  <testcase name="countActiveUsersByCompanyId_Success" classname="com.singtel.network.repository.UserRepositoryTest" time="0.012">
    <system-out><![CDATA[2025-07-12 03:19:23 - 
    insert 
    into
        singtel_app.companies
        (address, company_size, country, created_at, email, industry, name, phone, postal_code, registration_number, status, updated_at, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
Hibernate: 
    insert 
    into
        singtel_app.companies
        (address, company_size, country, created_at, email, industry, name, phone, postal_code, registration_number, status, updated_at, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-07-12 03:19:23 - 
    insert 
    into
        singtel_app.users
        (company_id, created_at, email, first_name, last_login_at, last_name, password_changed_at, password_hash, phone, role, status, updated_at, username, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
Hibernate: 
    insert 
    into
        singtel_app.users
        (company_id, created_at, email, first_name, last_login_at, last_name, password_changed_at, password_hash, phone, role, status, updated_at, username, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-07-12 03:19:23 - 
    insert 
    into
        singtel_app.users
        (company_id, created_at, email, first_name, last_login_at, last_name, password_changed_at, password_hash, phone, role, status, updated_at, username, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
Hibernate: 
    insert 
    into
        singtel_app.users
        (company_id, created_at, email, first_name, last_login_at, last_name, password_changed_at, password_hash, phone, role, status, updated_at, username, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-07-12 03:19:23 - JDBC URL to connect to 'dataSource': url='jdbc:postgresql://localhost:35943/drbxhmhllvsr?user=postgres&password=docker', scope='UserRepositoryTest#countActiveUsersByCompanyId_Success'
2025-07-12 03:19:23 - 
    select
        count(u1_0.id) 
    from
        singtel_app.users u1_0 
    where
        u1_0.company_id=? 
        and u1_0.status='ACTIVE'
Hibernate: 
    select
        count(u1_0.id) 
    from
        singtel_app.users u1_0 
    where
        u1_0.company_id=? 
        and u1_0.status='ACTIVE'
]]></system-out>
  </testcase>
  <testcase name="findByUsernameOrEmail_WithUsername" classname="com.singtel.network.repository.UserRepositoryTest" time="0.01">
    <system-out><![CDATA[2025-07-12 03:19:23 - 
    insert 
    into
        singtel_app.companies
        (address, company_size, country, created_at, email, industry, name, phone, postal_code, registration_number, status, updated_at, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
Hibernate: 
    insert 
    into
        singtel_app.companies
        (address, company_size, country, created_at, email, industry, name, phone, postal_code, registration_number, status, updated_at, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-07-12 03:19:23 - 
    insert 
    into
        singtel_app.users
        (company_id, created_at, email, first_name, last_login_at, last_name, password_changed_at, password_hash, phone, role, status, updated_at, username, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
Hibernate: 
    insert 
    into
        singtel_app.users
        (company_id, created_at, email, first_name, last_login_at, last_name, password_changed_at, password_hash, phone, role, status, updated_at, username, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-07-12 03:19:23 - 
    insert 
    into
        singtel_app.users
        (company_id, created_at, email, first_name, last_login_at, last_name, password_changed_at, password_hash, phone, role, status, updated_at, username, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
Hibernate: 
    insert 
    into
        singtel_app.users
        (company_id, created_at, email, first_name, last_login_at, last_name, password_changed_at, password_hash, phone, role, status, updated_at, username, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-07-12 03:19:23 - JDBC URL to connect to 'dataSource': url='jdbc:postgresql://localhost:35943/drbxhmhllvsr?user=postgres&password=docker', scope='UserRepositoryTest#findByUsernameOrEmail_WithUsername'
2025-07-12 03:19:23 - 
    select
        u1_0.id,
        u1_0.company_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.first_name,
        u1_0.last_login_at,
        u1_0.last_name,
        u1_0.password_changed_at,
        u1_0.password_hash,
        u1_0.phone,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        singtel_app.users u1_0 
    where
        u1_0.username=? 
        or u1_0.email=?
Hibernate: 
    select
        u1_0.id,
        u1_0.company_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.first_name,
        u1_0.last_login_at,
        u1_0.last_name,
        u1_0.password_changed_at,
        u1_0.password_hash,
        u1_0.phone,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        singtel_app.users u1_0 
    where
        u1_0.username=? 
        or u1_0.email=?
]]></system-out>
  </testcase>
  <testcase name="updateLastLoginTime_Success" classname="com.singtel.network.repository.UserRepositoryTest" time="0.012">
    <system-out><![CDATA[2025-07-12 03:19:23 - 
    insert 
    into
        singtel_app.companies
        (address, company_size, country, created_at, email, industry, name, phone, postal_code, registration_number, status, updated_at, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
Hibernate: 
    insert 
    into
        singtel_app.companies
        (address, company_size, country, created_at, email, industry, name, phone, postal_code, registration_number, status, updated_at, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-07-12 03:19:23 - 
    insert 
    into
        singtel_app.users
        (company_id, created_at, email, first_name, last_login_at, last_name, password_changed_at, password_hash, phone, role, status, updated_at, username, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
Hibernate: 
    insert 
    into
        singtel_app.users
        (company_id, created_at, email, first_name, last_login_at, last_name, password_changed_at, password_hash, phone, role, status, updated_at, username, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-07-12 03:19:23 - 
    insert 
    into
        singtel_app.users
        (company_id, created_at, email, first_name, last_login_at, last_name, password_changed_at, password_hash, phone, role, status, updated_at, username, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
Hibernate: 
    insert 
    into
        singtel_app.users
        (company_id, created_at, email, first_name, last_login_at, last_name, password_changed_at, password_hash, phone, role, status, updated_at, username, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-07-12 03:19:23 - JDBC URL to connect to 'dataSource': url='jdbc:postgresql://localhost:35943/drbxhmhllvsr?user=postgres&password=docker', scope='UserRepositoryTest#updateLastLoginTime_Success'
2025-07-12 03:19:23 - 
    update
        singtel_app.users 
    set
        last_login_at=? 
    where
        id=?
Hibernate: 
    update
        singtel_app.users 
    set
        last_login_at=? 
    where
        id=?
2025-07-12 03:19:23 - 
    select
        u1_0.id,
        u1_0.company_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.first_name,
        u1_0.last_login_at,
        u1_0.last_name,
        u1_0.password_changed_at,
        u1_0.password_hash,
        u1_0.phone,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        singtel_app.users u1_0 
    where
        u1_0.id=?
Hibernate: 
    select
        u1_0.id,
        u1_0.company_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.first_name,
        u1_0.last_login_at,
        u1_0.last_name,
        u1_0.password_changed_at,
        u1_0.password_hash,
        u1_0.phone,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        singtel_app.users u1_0 
    where
        u1_0.id=?
]]></system-out>
  </testcase>
  <testcase name="existsByUsername_True" classname="com.singtel.network.repository.UserRepositoryTest" time="0.01">
    <system-out><![CDATA[2025-07-12 03:19:23 - 
    insert 
    into
        singtel_app.companies
        (address, company_size, country, created_at, email, industry, name, phone, postal_code, registration_number, status, updated_at, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
Hibernate: 
    insert 
    into
        singtel_app.companies
        (address, company_size, country, created_at, email, industry, name, phone, postal_code, registration_number, status, updated_at, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-07-12 03:19:23 - 
    insert 
    into
        singtel_app.users
        (company_id, created_at, email, first_name, last_login_at, last_name, password_changed_at, password_hash, phone, role, status, updated_at, username, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
Hibernate: 
    insert 
    into
        singtel_app.users
        (company_id, created_at, email, first_name, last_login_at, last_name, password_changed_at, password_hash, phone, role, status, updated_at, username, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-07-12 03:19:23 - 
    insert 
    into
        singtel_app.users
        (company_id, created_at, email, first_name, last_login_at, last_name, password_changed_at, password_hash, phone, role, status, updated_at, username, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
Hibernate: 
    insert 
    into
        singtel_app.users
        (company_id, created_at, email, first_name, last_login_at, last_name, password_changed_at, password_hash, phone, role, status, updated_at, username, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-07-12 03:19:23 - JDBC URL to connect to 'dataSource': url='jdbc:postgresql://localhost:35943/drbxhmhllvsr?user=postgres&password=docker', scope='UserRepositoryTest#existsByUsername_True'
2025-07-12 03:19:23 - 
    select
        u1_0.id 
    from
        singtel_app.users u1_0 
    where
        u1_0.username=? 
    fetch
        first ? rows only
Hibernate: 
    select
        u1_0.id 
    from
        singtel_app.users u1_0 
    where
        u1_0.username=? 
    fetch
        first ? rows only
]]></system-out>
  </testcase>
  <testcase name="findByRole_Success" classname="com.singtel.network.repository.UserRepositoryTest" time="0.011">
    <system-out><![CDATA[2025-07-12 03:19:23 - 
    insert 
    into
        singtel_app.companies
        (address, company_size, country, created_at, email, industry, name, phone, postal_code, registration_number, status, updated_at, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
Hibernate: 
    insert 
    into
        singtel_app.companies
        (address, company_size, country, created_at, email, industry, name, phone, postal_code, registration_number, status, updated_at, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-07-12 03:19:23 - 
    insert 
    into
        singtel_app.users
        (company_id, created_at, email, first_name, last_login_at, last_name, password_changed_at, password_hash, phone, role, status, updated_at, username, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
Hibernate: 
    insert 
    into
        singtel_app.users
        (company_id, created_at, email, first_name, last_login_at, last_name, password_changed_at, password_hash, phone, role, status, updated_at, username, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-07-12 03:19:23 - 
    insert 
    into
        singtel_app.users
        (company_id, created_at, email, first_name, last_login_at, last_name, password_changed_at, password_hash, phone, role, status, updated_at, username, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
Hibernate: 
    insert 
    into
        singtel_app.users
        (company_id, created_at, email, first_name, last_login_at, last_name, password_changed_at, password_hash, phone, role, status, updated_at, username, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-07-12 03:19:23 - JDBC URL to connect to 'dataSource': url='jdbc:postgresql://localhost:35943/drbxhmhllvsr?user=postgres&password=docker', scope='UserRepositoryTest#findByRole_Success'
2025-07-12 03:19:23 - 
    select
        u1_0.id,
        u1_0.company_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.first_name,
        u1_0.last_login_at,
        u1_0.last_name,
        u1_0.password_changed_at,
        u1_0.password_hash,
        u1_0.phone,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        singtel_app.users u1_0 
    where
        u1_0.role=?
Hibernate: 
    select
        u1_0.id,
        u1_0.company_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.first_name,
        u1_0.last_login_at,
        u1_0.last_name,
        u1_0.password_changed_at,
        u1_0.password_hash,
        u1_0.phone,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        singtel_app.users u1_0 
    where
        u1_0.role=?
]]></system-out>
  </testcase>
  <testcase name="findByEmail_Success" classname="com.singtel.network.repository.UserRepositoryTest" time="0.012">
    <system-out><![CDATA[2025-07-12 03:19:23 - 
    insert 
    into
        singtel_app.companies
        (address, company_size, country, created_at, email, industry, name, phone, postal_code, registration_number, status, updated_at, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
Hibernate: 
    insert 
    into
        singtel_app.companies
        (address, company_size, country, created_at, email, industry, name, phone, postal_code, registration_number, status, updated_at, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-07-12 03:19:23 - 
    insert 
    into
        singtel_app.users
        (company_id, created_at, email, first_name, last_login_at, last_name, password_changed_at, password_hash, phone, role, status, updated_at, username, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
Hibernate: 
    insert 
    into
        singtel_app.users
        (company_id, created_at, email, first_name, last_login_at, last_name, password_changed_at, password_hash, phone, role, status, updated_at, username, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-07-12 03:19:23 - 
    insert 
    into
        singtel_app.users
        (company_id, created_at, email, first_name, last_login_at, last_name, password_changed_at, password_hash, phone, role, status, updated_at, username, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
Hibernate: 
    insert 
    into
        singtel_app.users
        (company_id, created_at, email, first_name, last_login_at, last_name, password_changed_at, password_hash, phone, role, status, updated_at, username, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-07-12 03:19:23 - JDBC URL to connect to 'dataSource': url='jdbc:postgresql://localhost:35943/drbxhmhllvsr?user=postgres&password=docker', scope='UserRepositoryTest#findByEmail_Success'
2025-07-12 03:19:23 - 
    select
        u1_0.id,
        u1_0.company_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.first_name,
        u1_0.last_login_at,
        u1_0.last_name,
        u1_0.password_changed_at,
        u1_0.password_hash,
        u1_0.phone,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        singtel_app.users u1_0 
    where
        u1_0.email=?
Hibernate: 
    select
        u1_0.id,
        u1_0.company_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.first_name,
        u1_0.last_login_at,
        u1_0.last_name,
        u1_0.password_changed_at,
        u1_0.password_hash,
        u1_0.phone,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        singtel_app.users u1_0 
    where
        u1_0.email=?
]]></system-out>
  </testcase>
</testsuite>