<?xml version="1.0" encoding="UTF-8"?>
<testsuite xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="https://maven.apache.org/surefire/maven-surefire-plugin/xsd/surefire-test-report-3.0.xsd" version="3.0" name="com.singtel.network.repository.ServiceRepositoryTest" time="0.3" tests="20" errors="0" skipped="0" failures="0">
  <properties>
    <property name="java.specification.version" value="17"/>
    <property name="sun.jnu.encoding" value="UTF-8"/>
    <property name="java.class.path" value="/Users/BAORLIM/playground/singtel-job-network/backend/target/test-classes:/Users/BAORLIM/playground/singtel-job-network/backend/target/classes:/Users/BAORLIM/.m2/repository/org/springframework/boot/spring-boot-starter-web/3.2.0/spring-boot-starter-web-3.2.0.jar:/Users/BAORLIM/.m2/repository/org/springframework/boot/spring-boot-starter/3.2.0/spring-boot-starter-3.2.0.jar:/Users/BAORLIM/.m2/repository/org/springframework/boot/spring-boot-starter-logging/3.2.0/spring-boot-starter-logging-3.2.0.jar:/Users/BAORLIM/.m2/repository/org/apache/logging/log4j/log4j-to-slf4j/2.21.1/log4j-to-slf4j-2.21.1.jar:/Users/BAORLIM/.m2/repository/org/apache/logging/log4j/log4j-api/2.21.1/log4j-api-2.21.1.jar:/Users/BAORLIM/.m2/repository/org/slf4j/jul-to-slf4j/2.0.9/jul-to-slf4j-2.0.9.jar:/Users/BAORLIM/.m2/repository/jakarta/annotation/jakarta.annotation-api/2.1.1/jakarta.annotation-api-2.1.1.jar:/Users/BAORLIM/.m2/repository/org/yaml/snakeyaml/2.2/snakeyaml-2.2.jar:/Users/BAORLIM/.m2/repository/org/springframework/boot/spring-boot-starter-json/3.2.0/spring-boot-starter-json-3.2.0.jar:/Users/BAORLIM/.m2/repository/com/fasterxml/jackson/datatype/jackson-datatype-jdk8/2.15.3/jackson-datatype-jdk8-2.15.3.jar:/Users/BAORLIM/.m2/repository/com/fasterxml/jackson/datatype/jackson-datatype-jsr310/2.15.3/jackson-datatype-jsr310-2.15.3.jar:/Users/BAORLIM/.m2/repository/com/fasterxml/jackson/module/jackson-module-parameter-names/2.15.3/jackson-module-parameter-names-2.15.3.jar:/Users/BAORLIM/.m2/repository/org/springframework/boot/spring-boot-starter-tomcat/3.2.0/spring-boot-starter-tomcat-3.2.0.jar:/Users/BAORLIM/.m2/repository/org/apache/tomcat/embed/tomcat-embed-core/10.1.16/tomcat-embed-core-10.1.16.jar:/Users/BAORLIM/.m2/repository/org/apache/tomcat/embed/tomcat-embed-websocket/10.1.16/tomcat-embed-websocket-10.1.16.jar:/Users/BAORLIM/.m2/repository/org/springframework/spring-web/6.1.1/spring-web-6.1.1.jar:/Users/BAORLIM/.m2/repository/org/springframework/spring-beans/6.1.1/spring-beans-6.1.1.jar:/Users/BAORLIM/.m2/repository/org/springframework/spring-webmvc/6.1.1/spring-webmvc-6.1.1.jar:/Users/BAORLIM/.m2/repository/org/springframework/spring-expression/6.1.1/spring-expression-6.1.1.jar:/Users/BAORLIM/.m2/repository/org/springframework/boot/spring-boot-starter-data-jpa/3.2.0/spring-boot-starter-data-jpa-3.2.0.jar:/Users/BAORLIM/.m2/repository/org/springframework/boot/spring-boot-starter-aop/3.2.0/spring-boot-starter-aop-3.2.0.jar:/Users/BAORLIM/.m2/repository/org/aspectj/aspectjweaver/1.9.20.1/aspectjweaver-1.9.20.1.jar:/Users/BAORLIM/.m2/repository/org/springframework/boot/spring-boot-starter-jdbc/3.2.0/spring-boot-starter-jdbc-3.2.0.jar:/Users/BAORLIM/.m2/repository/com/zaxxer/HikariCP/5.0.1/HikariCP-5.0.1.jar:/Users/BAORLIM/.m2/repository/org/springframework/spring-jdbc/6.1.1/spring-jdbc-6.1.1.jar:/Users/BAORLIM/.m2/repository/org/hibernate/orm/hibernate-core/6.3.1.Final/hibernate-core-6.3.1.Final.jar:/Users/BAORLIM/.m2/repository/jakarta/persistence/jakarta.persistence-api/3.1.0/jakarta.persistence-api-3.1.0.jar:/Users/BAORLIM/.m2/repository/jakarta/transaction/jakarta.transaction-api/2.0.1/jakarta.transaction-api-2.0.1.jar:/Users/BAORLIM/.m2/repository/org/jboss/logging/jboss-logging/3.5.3.Final/jboss-logging-3.5.3.Final.jar:/Users/BAORLIM/.m2/repository/org/hibernate/common/hibernate-commons-annotations/6.0.6.Final/hibernate-commons-annotations-6.0.6.Final.jar:/Users/BAORLIM/.m2/repository/io/smallrye/jandex/3.1.2/jandex-3.1.2.jar:/Users/BAORLIM/.m2/repository/com/fasterxml/classmate/1.6.0/classmate-1.6.0.jar:/Users/BAORLIM/.m2/repository/net/bytebuddy/byte-buddy/1.14.10/byte-buddy-1.14.10.jar:/Users/BAORLIM/.m2/repository/org/glassfish/jaxb/jaxb-runtime/4.0.4/jaxb-runtime-4.0.4.jar:/Users/BAORLIM/.m2/repository/org/glassfish/jaxb/jaxb-core/4.0.4/jaxb-core-4.0.4.jar:/Users/BAORLIM/.m2/repository/org/eclipse/angus/angus-activation/2.0.1/angus-activation-2.0.1.jar:/Users/BAORLIM/.m2/repository/org/glassfish/jaxb/txw2/4.0.4/txw2-4.0.4.jar:/Users/BAORLIM/.m2/repository/com/sun/istack/istack-commons-runtime/4.1.2/istack-commons-runtime-4.1.2.jar:/Users/BAORLIM/.m2/repository/jakarta/inject/jakarta.inject-api/2.0.1/jakarta.inject-api-2.0.1.jar:/Users/BAORLIM/.m2/repository/org/antlr/antlr4-runtime/4.10.1/antlr4-runtime-4.10.1.jar:/Users/BAORLIM/.m2/repository/org/springframework/data/spring-data-jpa/3.2.0/spring-data-jpa-3.2.0.jar:/Users/BAORLIM/.m2/repository/org/springframework/data/spring-data-commons/3.2.0/spring-data-commons-3.2.0.jar:/Users/BAORLIM/.m2/repository/org/springframework/spring-orm/6.1.1/spring-orm-6.1.1.jar:/Users/BAORLIM/.m2/repository/org/springframework/spring-tx/6.1.1/spring-tx-6.1.1.jar:/Users/BAORLIM/.m2/repository/org/springframework/spring-aspects/6.1.1/spring-aspects-6.1.1.jar:/Users/BAORLIM/.m2/repository/org/springframework/boot/spring-boot-starter-security/3.2.0/spring-boot-starter-security-3.2.0.jar:/Users/BAORLIM/.m2/repository/org/springframework/spring-aop/6.1.1/spring-aop-6.1.1.jar:/Users/BAORLIM/.m2/repository/org/springframework/security/spring-security-config/6.2.0/spring-security-config-6.2.0.jar:/Users/BAORLIM/.m2/repository/org/springframework/security/spring-security-web/6.2.0/spring-security-web-6.2.0.jar:/Users/BAORLIM/.m2/repository/org/springframework/boot/spring-boot-starter-validation/3.2.0/spring-boot-starter-validation-3.2.0.jar:/Users/BAORLIM/.m2/repository/org/apache/tomcat/embed/tomcat-embed-el/10.1.16/tomcat-embed-el-10.1.16.jar:/Users/BAORLIM/.m2/repository/org/hibernate/validator/hibernate-validator/8.0.1.Final/hibernate-validator-8.0.1.Final.jar:/Users/BAORLIM/.m2/repository/jakarta/validation/jakarta.validation-api/3.0.2/jakarta.validation-api-3.0.2.jar:/Users/BAORLIM/.m2/repository/org/springframework/boot/spring-boot-starter-actuator/3.2.0/spring-boot-starter-actuator-3.2.0.jar:/Users/BAORLIM/.m2/repository/org/springframework/boot/spring-boot-actuator-autoconfigure/3.2.0/spring-boot-actuator-autoconfigure-3.2.0.jar:/Users/BAORLIM/.m2/repository/org/springframework/boot/spring-boot-actuator/3.2.0/spring-boot-actuator-3.2.0.jar:/Users/BAORLIM/.m2/repository/io/micrometer/micrometer-observation/1.12.0/micrometer-observation-1.12.0.jar:/Users/BAORLIM/.m2/repository/io/micrometer/micrometer-commons/1.12.0/micrometer-commons-1.12.0.jar:/Users/BAORLIM/.m2/repository/io/micrometer/micrometer-jakarta9/1.12.0/micrometer-jakarta9-1.12.0.jar:/Users/BAORLIM/.m2/repository/io/micrometer/micrometer-core/1.12.0/micrometer-core-1.12.0.jar:/Users/BAORLIM/.m2/repository/org/hdrhistogram/HdrHistogram/2.1.12/HdrHistogram-2.1.12.jar:/Users/BAORLIM/.m2/repository/org/latencyutils/LatencyUtils/2.0.3/LatencyUtils-2.0.3.jar:/Users/BAORLIM/.m2/repository/org/postgresql/postgresql/42.6.0/postgresql-42.6.0.jar:/Users/BAORLIM/.m2/repository/org/checkerframework/checker-qual/3.31.0/checker-qual-3.31.0.jar:/Users/BAORLIM/.m2/repository/org/flywaydb/flyway-core/9.22.3/flyway-core-9.22.3.jar:/Users/BAORLIM/.m2/repository/com/fasterxml/jackson/dataformat/jackson-dataformat-toml/2.15.3/jackson-dataformat-toml-2.15.3.jar:/Users/BAORLIM/.m2/repository/com/fasterxml/jackson/core/jackson-core/2.15.3/jackson-core-2.15.3.jar:/Users/BAORLIM/.m2/repository/com/google/code/gson/gson/2.10.1/gson-2.10.1.jar:/Users/BAORLIM/.m2/repository/io/jsonwebtoken/jjwt-api/0.11.5/jjwt-api-0.11.5.jar:/Users/BAORLIM/.m2/repository/io/jsonwebtoken/jjwt-impl/0.11.5/jjwt-impl-0.11.5.jar:/Users/BAORLIM/.m2/repository/io/jsonwebtoken/jjwt-jackson/0.11.5/jjwt-jackson-0.11.5.jar:/Users/BAORLIM/.m2/repository/com/fasterxml/jackson/core/jackson-databind/2.15.3/jackson-databind-2.15.3.jar:/Users/BAORLIM/.m2/repository/com/fasterxml/jackson/core/jackson-annotations/2.15.3/jackson-annotations-2.15.3.jar:/Users/BAORLIM/.m2/repository/org/springdoc/springdoc-openapi-starter-webmvc-ui/2.2.0/springdoc-openapi-starter-webmvc-ui-2.2.0.jar:/Users/BAORLIM/.m2/repository/org/springdoc/springdoc-openapi-starter-webmvc-api/2.2.0/springdoc-openapi-starter-webmvc-api-2.2.0.jar:/Users/BAORLIM/.m2/repository/org/springdoc/springdoc-openapi-starter-common/2.2.0/springdoc-openapi-starter-common-2.2.0.jar:/Users/BAORLIM/.m2/repository/io/swagger/core/v3/swagger-core-jakarta/2.2.15/swagger-core-jakarta-2.2.15.jar:/Users/BAORLIM/.m2/repository/io/swagger/core/v3/swagger-annotations-jakarta/2.2.15/swagger-annotations-jakarta-2.2.15.jar:/Users/BAORLIM/.m2/repository/io/swagger/core/v3/swagger-models-jakarta/2.2.15/swagger-models-jakarta-2.2.15.jar:/Users/BAORLIM/.m2/repository/com/fasterxml/jackson/dataformat/jackson-dataformat-yaml/2.15.3/jackson-dataformat-yaml-2.15.3.jar:/Users/BAORLIM/.m2/repository/org/webjars/swagger-ui/5.2.0/swagger-ui-5.2.0.jar:/Users/BAORLIM/.m2/repository/org/springframework/boot/spring-boot-devtools/3.2.0/spring-boot-devtools-3.2.0.jar:/Users/BAORLIM/.m2/repository/org/springframework/boot/spring-boot/3.2.0/spring-boot-3.2.0.jar:/Users/BAORLIM/.m2/repository/org/springframework/boot/spring-boot-autoconfigure/3.2.0/spring-boot-autoconfigure-3.2.0.jar:/Users/BAORLIM/.m2/repository/org/springframework/boot/spring-boot-starter-test/3.2.0/spring-boot-starter-test-3.2.0.jar:/Users/BAORLIM/.m2/repository/org/springframework/boot/spring-boot-test/3.2.0/spring-boot-test-3.2.0.jar:/Users/BAORLIM/.m2/repository/org/springframework/boot/spring-boot-test-autoconfigure/3.2.0/spring-boot-test-autoconfigure-3.2.0.jar:/Users/BAORLIM/.m2/repository/com/jayway/jsonpath/json-path/2.8.0/json-path-2.8.0.jar:/Users/BAORLIM/.m2/repository/jakarta/xml/bind/jakarta.xml.bind-api/4.0.1/jakarta.xml.bind-api-4.0.1.jar:/Users/BAORLIM/.m2/repository/jakarta/activation/jakarta.activation-api/2.1.2/jakarta.activation-api-2.1.2.jar:/Users/BAORLIM/.m2/repository/net/minidev/json-smart/2.5.0/json-smart-2.5.0.jar:/Users/BAORLIM/.m2/repository/net/minidev/accessors-smart/2.5.0/accessors-smart-2.5.0.jar:/Users/BAORLIM/.m2/repository/org/ow2/asm/asm/9.3/asm-9.3.jar:/Users/BAORLIM/.m2/repository/org/assertj/assertj-core/3.24.2/assertj-core-3.24.2.jar:/Users/BAORLIM/.m2/repository/org/awaitility/awaitility/4.2.0/awaitility-4.2.0.jar:/Users/BAORLIM/.m2/repository/org/hamcrest/hamcrest/2.2/hamcrest-2.2.jar:/Users/BAORLIM/.m2/repository/org/junit/jupiter/junit-jupiter/5.10.1/junit-jupiter-5.10.1.jar:/Users/BAORLIM/.m2/repository/org/junit/jupiter/junit-jupiter-api/5.10.1/junit-jupiter-api-5.10.1.jar:/Users/BAORLIM/.m2/repository/org/opentest4j/opentest4j/1.3.0/opentest4j-1.3.0.jar:/Users/BAORLIM/.m2/repository/org/junit/platform/junit-platform-commons/1.10.1/junit-platform-commons-1.10.1.jar:/Users/BAORLIM/.m2/repository/org/apiguardian/apiguardian-api/1.1.2/apiguardian-api-1.1.2.jar:/Users/BAORLIM/.m2/repository/org/junit/jupiter/junit-jupiter-params/5.10.1/junit-jupiter-params-5.10.1.jar:/Users/BAORLIM/.m2/repository/org/junit/jupiter/junit-jupiter-engine/5.10.1/junit-jupiter-engine-5.10.1.jar:/Users/BAORLIM/.m2/repository/org/junit/platform/junit-platform-engine/1.10.1/junit-platform-engine-1.10.1.jar:/Users/BAORLIM/.m2/repository/org/mockito/mockito-core/5.7.0/mockito-core-5.7.0.jar:/Users/BAORLIM/.m2/repository/net/bytebuddy/byte-buddy-agent/1.14.10/byte-buddy-agent-1.14.10.jar:/Users/BAORLIM/.m2/repository/org/objenesis/objenesis/3.3/objenesis-3.3.jar:/Users/BAORLIM/.m2/repository/org/mockito/mockito-junit-jupiter/5.7.0/mockito-junit-jupiter-5.7.0.jar:/Users/BAORLIM/.m2/repository/org/skyscreamer/jsonassert/1.5.1/jsonassert-1.5.1.jar:/Users/BAORLIM/.m2/repository/com/vaadin/external/google/android-json/0.0.20131108.vaadin1/android-json-0.0.20131108.vaadin1.jar:/Users/BAORLIM/.m2/repository/org/springframework/spring-core/6.1.1/spring-core-6.1.1.jar:/Users/BAORLIM/.m2/repository/org/springframework/spring-jcl/6.1.1/spring-jcl-6.1.1.jar:/Users/BAORLIM/.m2/repository/org/springframework/spring-test/6.1.1/spring-test-6.1.1.jar:/Users/BAORLIM/.m2/repository/org/xmlunit/xmlunit-core/2.9.1/xmlunit-core-2.9.1.jar:/Users/BAORLIM/.m2/repository/org/springframework/security/spring-security-test/6.2.0/spring-security-test-6.2.0.jar:/Users/BAORLIM/.m2/repository/org/springframework/security/spring-security-core/6.2.0/spring-security-core-6.2.0.jar:/Users/BAORLIM/.m2/repository/org/springframework/security/spring-security-crypto/6.2.0/spring-security-crypto-6.2.0.jar:/Users/BAORLIM/.m2/repository/org/testcontainers/junit-jupiter/1.19.3/junit-jupiter-1.19.3.jar:/Users/BAORLIM/.m2/repository/org/testcontainers/testcontainers/1.19.3/testcontainers-1.19.3.jar:/Users/BAORLIM/.m2/repository/junit/junit/4.13.2/junit-4.13.2.jar:/Users/BAORLIM/.m2/repository/org/hamcrest/hamcrest-core/2.2/hamcrest-core-2.2.jar:/Users/BAORLIM/.m2/repository/org/rnorth/duct-tape/duct-tape/1.0.8/duct-tape-1.0.8.jar:/Users/BAORLIM/.m2/repository/org/jetbrains/annotations/17.0.0/annotations-17.0.0.jar:/Users/BAORLIM/.m2/repository/com/github/docker-java/docker-java-api/3.3.4/docker-java-api-3.3.4.jar:/Users/BAORLIM/.m2/repository/com/github/docker-java/docker-java-transport-zerodep/3.3.4/docker-java-transport-zerodep-3.3.4.jar:/Users/BAORLIM/.m2/repository/com/github/docker-java/docker-java-transport/3.3.4/docker-java-transport-3.3.4.jar:/Users/BAORLIM/.m2/repository/net/java/dev/jna/jna/5.13.0/jna-5.13.0.jar:/Users/BAORLIM/.m2/repository/org/testcontainers/postgresql/1.19.3/postgresql-1.19.3.jar:/Users/BAORLIM/.m2/repository/org/testcontainers/jdbc/1.19.3/jdbc-1.19.3.jar:/Users/BAORLIM/.m2/repository/org/testcontainers/database-commons/1.19.3/database-commons-1.19.3.jar:/Users/BAORLIM/.m2/repository/io/zonky/test/embedded-postgres/2.0.4/embedded-postgres-2.0.4.jar:/Users/BAORLIM/.m2/repository/io/zonky/test/postgres/embedded-postgres-binaries-windows-amd64/14.8.0/embedded-postgres-binaries-windows-amd64-14.8.0.jar:/Users/BAORLIM/.m2/repository/io/zonky/test/postgres/embedded-postgres-binaries-darwin-amd64/14.8.0/embedded-postgres-binaries-darwin-amd64-14.8.0.jar:/Users/BAORLIM/.m2/repository/io/zonky/test/postgres/embedded-postgres-binaries-linux-amd64/14.8.0/embedded-postgres-binaries-linux-amd64-14.8.0.jar:/Users/BAORLIM/.m2/repository/io/zonky/test/postgres/embedded-postgres-binaries-linux-amd64-alpine/14.8.0/embedded-postgres-binaries-linux-amd64-alpine-14.8.0.jar:/Users/BAORLIM/.m2/repository/org/slf4j/slf4j-api/2.0.9/slf4j-api-2.0.9.jar:/Users/BAORLIM/.m2/repository/org/apache/commons/commons-lang3/3.13.0/commons-lang3-3.13.0.jar:/Users/BAORLIM/.m2/repository/org/apache/commons/commons-compress/1.21/commons-compress-1.21.jar:/Users/BAORLIM/.m2/repository/org/tukaani/xz/1.9/xz-1.9.jar:/Users/BAORLIM/.m2/repository/commons-io/commons-io/2.11.0/commons-io-2.11.0.jar:/Users/BAORLIM/.m2/repository/commons-codec/commons-codec/1.16.0/commons-codec-1.16.0.jar:/Users/BAORLIM/.m2/repository/io/zonky/test/embedded-database-spring-test/2.4.0/embedded-database-spring-test-2.4.0.jar:/Users/BAORLIM/.m2/repository/io/zonky/test/embedded-database-spring-test-autoconfigure/2.4.0/embedded-database-spring-test-autoconfigure-2.4.0.jar:/Users/BAORLIM/.m2/repository/org/testcontainers/mssqlserver/1.19.3/mssqlserver-1.19.3.jar:/Users/BAORLIM/.m2/repository/org/testcontainers/mysql/1.19.3/mysql-1.19.3.jar:/Users/BAORLIM/.m2/repository/org/testcontainers/mariadb/1.19.3/mariadb-1.19.3.jar:/Users/BAORLIM/.m2/repository/org/springframework/spring-context/6.1.1/spring-context-6.1.1.jar:/Users/BAORLIM/.m2/repository/com/cedarsoftware/java-util/1.68.0/java-util-1.68.0.jar:/Users/BAORLIM/.m2/repository/ch/qos/logback/logback-classic/1.4.11/logback-classic-1.4.11.jar:/Users/BAORLIM/.m2/repository/ch/qos/logback/logback-core/1.4.11/logback-core-1.4.11.jar:"/>
    <property name="java.vm.vendor" value="Amazon.com Inc."/>
    <property name="sun.arch.data.model" value="64"/>
    <property name="java.vendor.url" value="https://aws.amazon.com/corretto/"/>
    <property name="user.timezone" value="Asia/Kuala_Lumpur"/>
    <property name="org.jboss.logging.provider" value="slf4j"/>
    <property name="os.name" value="Mac OS X"/>
    <property name="java.vm.specification.version" value="17"/>
    <property name="sun.java.launcher" value="SUN_STANDARD"/>
    <property name="user.country" value="US"/>
    <property name="sun.boot.library.path" value="/Users/BAORLIM/Library/Java/JavaVirtualMachines/corretto-17.0.14/Contents/Home/lib"/>
    <property name="sun.java.command" value="/Users/BAORLIM/playground/singtel-job-network/backend/target/surefire/surefirebooter-20250712031911045_3.jar /Users/BAORLIM/playground/singtel-job-network/backend/target/surefire 2025-07-12T03-19-10_985-jvmRun1 surefire-20250712031911045_1tmp surefire_0-20250712031911045_2tmp"/>
    <property name="jdk.debug" value="release"/>
    <property name="surefire.test.class.path" value="/Users/BAORLIM/playground/singtel-job-network/backend/target/test-classes:/Users/BAORLIM/playground/singtel-job-network/backend/target/classes:/Users/BAORLIM/.m2/repository/org/springframework/boot/spring-boot-starter-web/3.2.0/spring-boot-starter-web-3.2.0.jar:/Users/BAORLIM/.m2/repository/org/springframework/boot/spring-boot-starter/3.2.0/spring-boot-starter-3.2.0.jar:/Users/BAORLIM/.m2/repository/org/springframework/boot/spring-boot-starter-logging/3.2.0/spring-boot-starter-logging-3.2.0.jar:/Users/BAORLIM/.m2/repository/org/apache/logging/log4j/log4j-to-slf4j/2.21.1/log4j-to-slf4j-2.21.1.jar:/Users/BAORLIM/.m2/repository/org/apache/logging/log4j/log4j-api/2.21.1/log4j-api-2.21.1.jar:/Users/BAORLIM/.m2/repository/org/slf4j/jul-to-slf4j/2.0.9/jul-to-slf4j-2.0.9.jar:/Users/BAORLIM/.m2/repository/jakarta/annotation/jakarta.annotation-api/2.1.1/jakarta.annotation-api-2.1.1.jar:/Users/BAORLIM/.m2/repository/org/yaml/snakeyaml/2.2/snakeyaml-2.2.jar:/Users/BAORLIM/.m2/repository/org/springframework/boot/spring-boot-starter-json/3.2.0/spring-boot-starter-json-3.2.0.jar:/Users/BAORLIM/.m2/repository/com/fasterxml/jackson/datatype/jackson-datatype-jdk8/2.15.3/jackson-datatype-jdk8-2.15.3.jar:/Users/BAORLIM/.m2/repository/com/fasterxml/jackson/datatype/jackson-datatype-jsr310/2.15.3/jackson-datatype-jsr310-2.15.3.jar:/Users/BAORLIM/.m2/repository/com/fasterxml/jackson/module/jackson-module-parameter-names/2.15.3/jackson-module-parameter-names-2.15.3.jar:/Users/BAORLIM/.m2/repository/org/springframework/boot/spring-boot-starter-tomcat/3.2.0/spring-boot-starter-tomcat-3.2.0.jar:/Users/BAORLIM/.m2/repository/org/apache/tomcat/embed/tomcat-embed-core/10.1.16/tomcat-embed-core-10.1.16.jar:/Users/BAORLIM/.m2/repository/org/apache/tomcat/embed/tomcat-embed-websocket/10.1.16/tomcat-embed-websocket-10.1.16.jar:/Users/BAORLIM/.m2/repository/org/springframework/spring-web/6.1.1/spring-web-6.1.1.jar:/Users/BAORLIM/.m2/repository/org/springframework/spring-beans/6.1.1/spring-beans-6.1.1.jar:/Users/BAORLIM/.m2/repository/org/springframework/spring-webmvc/6.1.1/spring-webmvc-6.1.1.jar:/Users/BAORLIM/.m2/repository/org/springframework/spring-expression/6.1.1/spring-expression-6.1.1.jar:/Users/BAORLIM/.m2/repository/org/springframework/boot/spring-boot-starter-data-jpa/3.2.0/spring-boot-starter-data-jpa-3.2.0.jar:/Users/BAORLIM/.m2/repository/org/springframework/boot/spring-boot-starter-aop/3.2.0/spring-boot-starter-aop-3.2.0.jar:/Users/BAORLIM/.m2/repository/org/aspectj/aspectjweaver/1.9.20.1/aspectjweaver-1.9.20.1.jar:/Users/BAORLIM/.m2/repository/org/springframework/boot/spring-boot-starter-jdbc/3.2.0/spring-boot-starter-jdbc-3.2.0.jar:/Users/BAORLIM/.m2/repository/com/zaxxer/HikariCP/5.0.1/HikariCP-5.0.1.jar:/Users/BAORLIM/.m2/repository/org/springframework/spring-jdbc/6.1.1/spring-jdbc-6.1.1.jar:/Users/BAORLIM/.m2/repository/org/hibernate/orm/hibernate-core/6.3.1.Final/hibernate-core-6.3.1.Final.jar:/Users/BAORLIM/.m2/repository/jakarta/persistence/jakarta.persistence-api/3.1.0/jakarta.persistence-api-3.1.0.jar:/Users/BAORLIM/.m2/repository/jakarta/transaction/jakarta.transaction-api/2.0.1/jakarta.transaction-api-2.0.1.jar:/Users/BAORLIM/.m2/repository/org/jboss/logging/jboss-logging/3.5.3.Final/jboss-logging-3.5.3.Final.jar:/Users/BAORLIM/.m2/repository/org/hibernate/common/hibernate-commons-annotations/6.0.6.Final/hibernate-commons-annotations-6.0.6.Final.jar:/Users/BAORLIM/.m2/repository/io/smallrye/jandex/3.1.2/jandex-3.1.2.jar:/Users/BAORLIM/.m2/repository/com/fasterxml/classmate/1.6.0/classmate-1.6.0.jar:/Users/BAORLIM/.m2/repository/net/bytebuddy/byte-buddy/1.14.10/byte-buddy-1.14.10.jar:/Users/BAORLIM/.m2/repository/org/glassfish/jaxb/jaxb-runtime/4.0.4/jaxb-runtime-4.0.4.jar:/Users/BAORLIM/.m2/repository/org/glassfish/jaxb/jaxb-core/4.0.4/jaxb-core-4.0.4.jar:/Users/BAORLIM/.m2/repository/org/eclipse/angus/angus-activation/2.0.1/angus-activation-2.0.1.jar:/Users/BAORLIM/.m2/repository/org/glassfish/jaxb/txw2/4.0.4/txw2-4.0.4.jar:/Users/BAORLIM/.m2/repository/com/sun/istack/istack-commons-runtime/4.1.2/istack-commons-runtime-4.1.2.jar:/Users/BAORLIM/.m2/repository/jakarta/inject/jakarta.inject-api/2.0.1/jakarta.inject-api-2.0.1.jar:/Users/BAORLIM/.m2/repository/org/antlr/antlr4-runtime/4.10.1/antlr4-runtime-4.10.1.jar:/Users/BAORLIM/.m2/repository/org/springframework/data/spring-data-jpa/3.2.0/spring-data-jpa-3.2.0.jar:/Users/BAORLIM/.m2/repository/org/springframework/data/spring-data-commons/3.2.0/spring-data-commons-3.2.0.jar:/Users/BAORLIM/.m2/repository/org/springframework/spring-orm/6.1.1/spring-orm-6.1.1.jar:/Users/BAORLIM/.m2/repository/org/springframework/spring-tx/6.1.1/spring-tx-6.1.1.jar:/Users/BAORLIM/.m2/repository/org/springframework/spring-aspects/6.1.1/spring-aspects-6.1.1.jar:/Users/BAORLIM/.m2/repository/org/springframework/boot/spring-boot-starter-security/3.2.0/spring-boot-starter-security-3.2.0.jar:/Users/BAORLIM/.m2/repository/org/springframework/spring-aop/6.1.1/spring-aop-6.1.1.jar:/Users/BAORLIM/.m2/repository/org/springframework/security/spring-security-config/6.2.0/spring-security-config-6.2.0.jar:/Users/BAORLIM/.m2/repository/org/springframework/security/spring-security-web/6.2.0/spring-security-web-6.2.0.jar:/Users/BAORLIM/.m2/repository/org/springframework/boot/spring-boot-starter-validation/3.2.0/spring-boot-starter-validation-3.2.0.jar:/Users/BAORLIM/.m2/repository/org/apache/tomcat/embed/tomcat-embed-el/10.1.16/tomcat-embed-el-10.1.16.jar:/Users/BAORLIM/.m2/repository/org/hibernate/validator/hibernate-validator/8.0.1.Final/hibernate-validator-8.0.1.Final.jar:/Users/BAORLIM/.m2/repository/jakarta/validation/jakarta.validation-api/3.0.2/jakarta.validation-api-3.0.2.jar:/Users/BAORLIM/.m2/repository/org/springframework/boot/spring-boot-starter-actuator/3.2.0/spring-boot-starter-actuator-3.2.0.jar:/Users/BAORLIM/.m2/repository/org/springframework/boot/spring-boot-actuator-autoconfigure/3.2.0/spring-boot-actuator-autoconfigure-3.2.0.jar:/Users/BAORLIM/.m2/repository/org/springframework/boot/spring-boot-actuator/3.2.0/spring-boot-actuator-3.2.0.jar:/Users/BAORLIM/.m2/repository/io/micrometer/micrometer-observation/1.12.0/micrometer-observation-1.12.0.jar:/Users/BAORLIM/.m2/repository/io/micrometer/micrometer-commons/1.12.0/micrometer-commons-1.12.0.jar:/Users/BAORLIM/.m2/repository/io/micrometer/micrometer-jakarta9/1.12.0/micrometer-jakarta9-1.12.0.jar:/Users/BAORLIM/.m2/repository/io/micrometer/micrometer-core/1.12.0/micrometer-core-1.12.0.jar:/Users/BAORLIM/.m2/repository/org/hdrhistogram/HdrHistogram/2.1.12/HdrHistogram-2.1.12.jar:/Users/BAORLIM/.m2/repository/org/latencyutils/LatencyUtils/2.0.3/LatencyUtils-2.0.3.jar:/Users/BAORLIM/.m2/repository/org/postgresql/postgresql/42.6.0/postgresql-42.6.0.jar:/Users/BAORLIM/.m2/repository/org/checkerframework/checker-qual/3.31.0/checker-qual-3.31.0.jar:/Users/BAORLIM/.m2/repository/org/flywaydb/flyway-core/9.22.3/flyway-core-9.22.3.jar:/Users/BAORLIM/.m2/repository/com/fasterxml/jackson/dataformat/jackson-dataformat-toml/2.15.3/jackson-dataformat-toml-2.15.3.jar:/Users/BAORLIM/.m2/repository/com/fasterxml/jackson/core/jackson-core/2.15.3/jackson-core-2.15.3.jar:/Users/BAORLIM/.m2/repository/com/google/code/gson/gson/2.10.1/gson-2.10.1.jar:/Users/BAORLIM/.m2/repository/io/jsonwebtoken/jjwt-api/0.11.5/jjwt-api-0.11.5.jar:/Users/BAORLIM/.m2/repository/io/jsonwebtoken/jjwt-impl/0.11.5/jjwt-impl-0.11.5.jar:/Users/BAORLIM/.m2/repository/io/jsonwebtoken/jjwt-jackson/0.11.5/jjwt-jackson-0.11.5.jar:/Users/BAORLIM/.m2/repository/com/fasterxml/jackson/core/jackson-databind/2.15.3/jackson-databind-2.15.3.jar:/Users/BAORLIM/.m2/repository/com/fasterxml/jackson/core/jackson-annotations/2.15.3/jackson-annotations-2.15.3.jar:/Users/BAORLIM/.m2/repository/org/springdoc/springdoc-openapi-starter-webmvc-ui/2.2.0/springdoc-openapi-starter-webmvc-ui-2.2.0.jar:/Users/BAORLIM/.m2/repository/org/springdoc/springdoc-openapi-starter-webmvc-api/2.2.0/springdoc-openapi-starter-webmvc-api-2.2.0.jar:/Users/BAORLIM/.m2/repository/org/springdoc/springdoc-openapi-starter-common/2.2.0/springdoc-openapi-starter-common-2.2.0.jar:/Users/BAORLIM/.m2/repository/io/swagger/core/v3/swagger-core-jakarta/2.2.15/swagger-core-jakarta-2.2.15.jar:/Users/BAORLIM/.m2/repository/io/swagger/core/v3/swagger-annotations-jakarta/2.2.15/swagger-annotations-jakarta-2.2.15.jar:/Users/BAORLIM/.m2/repository/io/swagger/core/v3/swagger-models-jakarta/2.2.15/swagger-models-jakarta-2.2.15.jar:/Users/BAORLIM/.m2/repository/com/fasterxml/jackson/dataformat/jackson-dataformat-yaml/2.15.3/jackson-dataformat-yaml-2.15.3.jar:/Users/BAORLIM/.m2/repository/org/webjars/swagger-ui/5.2.0/swagger-ui-5.2.0.jar:/Users/BAORLIM/.m2/repository/org/springframework/boot/spring-boot-devtools/3.2.0/spring-boot-devtools-3.2.0.jar:/Users/BAORLIM/.m2/repository/org/springframework/boot/spring-boot/3.2.0/spring-boot-3.2.0.jar:/Users/BAORLIM/.m2/repository/org/springframework/boot/spring-boot-autoconfigure/3.2.0/spring-boot-autoconfigure-3.2.0.jar:/Users/BAORLIM/.m2/repository/org/springframework/boot/spring-boot-starter-test/3.2.0/spring-boot-starter-test-3.2.0.jar:/Users/BAORLIM/.m2/repository/org/springframework/boot/spring-boot-test/3.2.0/spring-boot-test-3.2.0.jar:/Users/BAORLIM/.m2/repository/org/springframework/boot/spring-boot-test-autoconfigure/3.2.0/spring-boot-test-autoconfigure-3.2.0.jar:/Users/BAORLIM/.m2/repository/com/jayway/jsonpath/json-path/2.8.0/json-path-2.8.0.jar:/Users/BAORLIM/.m2/repository/jakarta/xml/bind/jakarta.xml.bind-api/4.0.1/jakarta.xml.bind-api-4.0.1.jar:/Users/BAORLIM/.m2/repository/jakarta/activation/jakarta.activation-api/2.1.2/jakarta.activation-api-2.1.2.jar:/Users/BAORLIM/.m2/repository/net/minidev/json-smart/2.5.0/json-smart-2.5.0.jar:/Users/BAORLIM/.m2/repository/net/minidev/accessors-smart/2.5.0/accessors-smart-2.5.0.jar:/Users/BAORLIM/.m2/repository/org/ow2/asm/asm/9.3/asm-9.3.jar:/Users/BAORLIM/.m2/repository/org/assertj/assertj-core/3.24.2/assertj-core-3.24.2.jar:/Users/BAORLIM/.m2/repository/org/awaitility/awaitility/4.2.0/awaitility-4.2.0.jar:/Users/BAORLIM/.m2/repository/org/hamcrest/hamcrest/2.2/hamcrest-2.2.jar:/Users/BAORLIM/.m2/repository/org/junit/jupiter/junit-jupiter/5.10.1/junit-jupiter-5.10.1.jar:/Users/BAORLIM/.m2/repository/org/junit/jupiter/junit-jupiter-api/5.10.1/junit-jupiter-api-5.10.1.jar:/Users/BAORLIM/.m2/repository/org/opentest4j/opentest4j/1.3.0/opentest4j-1.3.0.jar:/Users/BAORLIM/.m2/repository/org/junit/platform/junit-platform-commons/1.10.1/junit-platform-commons-1.10.1.jar:/Users/BAORLIM/.m2/repository/org/apiguardian/apiguardian-api/1.1.2/apiguardian-api-1.1.2.jar:/Users/BAORLIM/.m2/repository/org/junit/jupiter/junit-jupiter-params/5.10.1/junit-jupiter-params-5.10.1.jar:/Users/BAORLIM/.m2/repository/org/junit/jupiter/junit-jupiter-engine/5.10.1/junit-jupiter-engine-5.10.1.jar:/Users/BAORLIM/.m2/repository/org/junit/platform/junit-platform-engine/1.10.1/junit-platform-engine-1.10.1.jar:/Users/BAORLIM/.m2/repository/org/mockito/mockito-core/5.7.0/mockito-core-5.7.0.jar:/Users/BAORLIM/.m2/repository/net/bytebuddy/byte-buddy-agent/1.14.10/byte-buddy-agent-1.14.10.jar:/Users/BAORLIM/.m2/repository/org/objenesis/objenesis/3.3/objenesis-3.3.jar:/Users/BAORLIM/.m2/repository/org/mockito/mockito-junit-jupiter/5.7.0/mockito-junit-jupiter-5.7.0.jar:/Users/BAORLIM/.m2/repository/org/skyscreamer/jsonassert/1.5.1/jsonassert-1.5.1.jar:/Users/BAORLIM/.m2/repository/com/vaadin/external/google/android-json/0.0.20131108.vaadin1/android-json-0.0.20131108.vaadin1.jar:/Users/BAORLIM/.m2/repository/org/springframework/spring-core/6.1.1/spring-core-6.1.1.jar:/Users/BAORLIM/.m2/repository/org/springframework/spring-jcl/6.1.1/spring-jcl-6.1.1.jar:/Users/BAORLIM/.m2/repository/org/springframework/spring-test/6.1.1/spring-test-6.1.1.jar:/Users/BAORLIM/.m2/repository/org/xmlunit/xmlunit-core/2.9.1/xmlunit-core-2.9.1.jar:/Users/BAORLIM/.m2/repository/org/springframework/security/spring-security-test/6.2.0/spring-security-test-6.2.0.jar:/Users/BAORLIM/.m2/repository/org/springframework/security/spring-security-core/6.2.0/spring-security-core-6.2.0.jar:/Users/BAORLIM/.m2/repository/org/springframework/security/spring-security-crypto/6.2.0/spring-security-crypto-6.2.0.jar:/Users/BAORLIM/.m2/repository/org/testcontainers/junit-jupiter/1.19.3/junit-jupiter-1.19.3.jar:/Users/BAORLIM/.m2/repository/org/testcontainers/testcontainers/1.19.3/testcontainers-1.19.3.jar:/Users/BAORLIM/.m2/repository/junit/junit/4.13.2/junit-4.13.2.jar:/Users/BAORLIM/.m2/repository/org/hamcrest/hamcrest-core/2.2/hamcrest-core-2.2.jar:/Users/BAORLIM/.m2/repository/org/rnorth/duct-tape/duct-tape/1.0.8/duct-tape-1.0.8.jar:/Users/BAORLIM/.m2/repository/org/jetbrains/annotations/17.0.0/annotations-17.0.0.jar:/Users/BAORLIM/.m2/repository/com/github/docker-java/docker-java-api/3.3.4/docker-java-api-3.3.4.jar:/Users/BAORLIM/.m2/repository/com/github/docker-java/docker-java-transport-zerodep/3.3.4/docker-java-transport-zerodep-3.3.4.jar:/Users/BAORLIM/.m2/repository/com/github/docker-java/docker-java-transport/3.3.4/docker-java-transport-3.3.4.jar:/Users/BAORLIM/.m2/repository/net/java/dev/jna/jna/5.13.0/jna-5.13.0.jar:/Users/BAORLIM/.m2/repository/org/testcontainers/postgresql/1.19.3/postgresql-1.19.3.jar:/Users/BAORLIM/.m2/repository/org/testcontainers/jdbc/1.19.3/jdbc-1.19.3.jar:/Users/BAORLIM/.m2/repository/org/testcontainers/database-commons/1.19.3/database-commons-1.19.3.jar:/Users/BAORLIM/.m2/repository/io/zonky/test/embedded-postgres/2.0.4/embedded-postgres-2.0.4.jar:/Users/BAORLIM/.m2/repository/io/zonky/test/postgres/embedded-postgres-binaries-windows-amd64/14.8.0/embedded-postgres-binaries-windows-amd64-14.8.0.jar:/Users/BAORLIM/.m2/repository/io/zonky/test/postgres/embedded-postgres-binaries-darwin-amd64/14.8.0/embedded-postgres-binaries-darwin-amd64-14.8.0.jar:/Users/BAORLIM/.m2/repository/io/zonky/test/postgres/embedded-postgres-binaries-linux-amd64/14.8.0/embedded-postgres-binaries-linux-amd64-14.8.0.jar:/Users/BAORLIM/.m2/repository/io/zonky/test/postgres/embedded-postgres-binaries-linux-amd64-alpine/14.8.0/embedded-postgres-binaries-linux-amd64-alpine-14.8.0.jar:/Users/BAORLIM/.m2/repository/org/slf4j/slf4j-api/2.0.9/slf4j-api-2.0.9.jar:/Users/BAORLIM/.m2/repository/org/apache/commons/commons-lang3/3.13.0/commons-lang3-3.13.0.jar:/Users/BAORLIM/.m2/repository/org/apache/commons/commons-compress/1.21/commons-compress-1.21.jar:/Users/BAORLIM/.m2/repository/org/tukaani/xz/1.9/xz-1.9.jar:/Users/BAORLIM/.m2/repository/commons-io/commons-io/2.11.0/commons-io-2.11.0.jar:/Users/BAORLIM/.m2/repository/commons-codec/commons-codec/1.16.0/commons-codec-1.16.0.jar:/Users/BAORLIM/.m2/repository/io/zonky/test/embedded-database-spring-test/2.4.0/embedded-database-spring-test-2.4.0.jar:/Users/BAORLIM/.m2/repository/io/zonky/test/embedded-database-spring-test-autoconfigure/2.4.0/embedded-database-spring-test-autoconfigure-2.4.0.jar:/Users/BAORLIM/.m2/repository/org/testcontainers/mssqlserver/1.19.3/mssqlserver-1.19.3.jar:/Users/BAORLIM/.m2/repository/org/testcontainers/mysql/1.19.3/mysql-1.19.3.jar:/Users/BAORLIM/.m2/repository/org/testcontainers/mariadb/1.19.3/mariadb-1.19.3.jar:/Users/BAORLIM/.m2/repository/org/springframework/spring-context/6.1.1/spring-context-6.1.1.jar:/Users/BAORLIM/.m2/repository/com/cedarsoftware/java-util/1.68.0/java-util-1.68.0.jar:/Users/BAORLIM/.m2/repository/ch/qos/logback/logback-classic/1.4.11/logback-classic-1.4.11.jar:/Users/BAORLIM/.m2/repository/ch/qos/logback/logback-core/1.4.11/logback-core-1.4.11.jar:"/>
    <property name="sun.cpu.endian" value="little"/>
    <property name="user.home" value="/Users/BAORLIM"/>
    <property name="user.language" value="en"/>
    <property name="java.specification.vendor" value="Oracle Corporation"/>
    <property name="java.version.date" value="2025-01-21"/>
    <property name="java.home" value="/Users/BAORLIM/Library/Java/JavaVirtualMachines/corretto-17.0.14/Contents/Home"/>
    <property name="file.separator" value="/"/>
    <property name="basedir" value="/Users/BAORLIM/playground/singtel-job-network/backend"/>
    <property name="java.vm.compressedOopsMode" value="Zero based"/>
    <property name="line.separator" value="&#10;"/>
    <property name="java.vm.specification.vendor" value="Oracle Corporation"/>
    <property name="java.specification.name" value="Java Platform API Specification"/>
    <property name="FILE_LOG_CHARSET" value="UTF-8"/>
    <property name="java.awt.headless" value="true"/>
    <property name="surefire.real.class.path" value="/Users/BAORLIM/playground/singtel-job-network/backend/target/surefire/surefirebooter-20250712031911045_3.jar"/>
    <property name="sun.management.compiler" value="HotSpot 64-Bit Tiered Compilers"/>
    <property name="java.runtime.version" value="17.0.14+7-LTS"/>
    <property name="user.name" value="BAORLIM"/>
    <property name="path.separator" value=":"/>
    <property name="os.version" value="15.5"/>
    <property name="java.runtime.name" value="OpenJDK Runtime Environment"/>
    <property name="file.encoding" value="UTF-8"/>
    <property name="FILE_LOG_PATTERN" value="%d{yyyy-MM-dd HH:mm:ss} [%thread] %-5level %logger{36} - %msg%n"/>
    <property name="java.vm.name" value="OpenJDK 64-Bit Server VM"/>
    <property name="java.vendor.version" value="Corretto-17.0.14.7.1"/>
    <property name="localRepository" value="/Users/BAORLIM/.m2/repository"/>
    <property name="java.vendor.url.bug" value="https://github.com/corretto/corretto-17/issues/"/>
    <property name="java.io.tmpdir" value="/var/folders/4h/r79srl3n6s7cvr3p7yll6lmr0000gn/T/"/>
    <property name="java.version" value="17.0.14"/>
    <property name="user.dir" value="/Users/BAORLIM/playground/singtel-job-network/backend"/>
    <property name="os.arch" value="aarch64"/>
    <property name="java.vm.specification.name" value="Java Virtual Machine Specification"/>
    <property name="PID" value="26677"/>
    <property name="CONSOLE_LOG_CHARSET" value="UTF-8"/>
    <property name="native.encoding" value="UTF-8"/>
    <property name="java.library.path" value="/Users/BAORLIM/Library/Java/Extensions:/Library/Java/Extensions:/Network/Library/Java/Extensions:/System/Library/Java/Extensions:/usr/lib/java:."/>
    <property name="java.vm.info" value="mixed mode, sharing"/>
    <property name="java.vendor" value="Amazon.com Inc."/>
    <property name="java.vm.version" value="17.0.14+7-LTS"/>
    <property name="java.specification.maintenance.version" value="1"/>
    <property name="sun.io.unicode.encoding" value="UnicodeBig"/>
    <property name="java.class.version" value="61.0"/>
    <property name="CONSOLE_LOG_PATTERN" value="%d{yyyy-MM-dd HH:mm:ss} - %msg%n"/>
    <property name="LOGGED_APPLICATION_NAME" value="[singtel-network-ondemand-test] "/>
  </properties>
  <testcase name="findServicesWithoutSetupFee_Success" classname="com.singtel.network.repository.ServiceRepositoryTest" time="0.018">
    <system-out><![CDATA[2025-07-12 03:19:21 - Could not detect default configuration classes for test class [com.singtel.network.repository.ServiceRepositoryTest]: ServiceRepositoryTest does not declare any static, non-private, non-final, nested classes annotated with @Configuration.
2025-07-12 03:19:21 - Found @SpringBootConfiguration com.singtel.network.NetworkOnDemandApplication for test class com.singtel.network.repository.ServiceRepositoryTest
2025-07-12 03:19:21 - 
    insert 
    into
        singtel_app.service_categories
        (created_at, description, display_order, is_active, name, updated_at, id) 
    values
        (?, ?, ?, ?, ?, ?, ?)
Hibernate: 
    insert 
    into
        singtel_app.service_categories
        (created_at, description, display_order, is_active, name, updated_at, id) 
    values
        (?, ?, ?, ?, ?, ?, ?)
2025-07-12 03:19:21 - 
    insert 
    into
        singtel_app.services
        (base_bandwidth_mbps, base_price_monthly, category_id, contract_term_months, created_at, description, features, is_available, is_bandwidth_adjustable, max_bandwidth_mbps, min_bandwidth_mbps, name, price_per_mbps, provisioning_time_hours, service_type, setup_fee, technical_specs, updated_at, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
Hibernate: 
    insert 
    into
        singtel_app.services
        (base_bandwidth_mbps, base_price_monthly, category_id, contract_term_months, created_at, description, features, is_available, is_bandwidth_adjustable, max_bandwidth_mbps, min_bandwidth_mbps, name, price_per_mbps, provisioning_time_hours, service_type, setup_fee, technical_specs, updated_at, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-07-12 03:19:21 - 
    insert 
    into
        singtel_app.services
        (base_bandwidth_mbps, base_price_monthly, category_id, contract_term_months, created_at, description, features, is_available, is_bandwidth_adjustable, max_bandwidth_mbps, min_bandwidth_mbps, name, price_per_mbps, provisioning_time_hours, service_type, setup_fee, technical_specs, updated_at, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
Hibernate: 
    insert 
    into
        singtel_app.services
        (base_bandwidth_mbps, base_price_monthly, category_id, contract_term_months, created_at, description, features, is_available, is_bandwidth_adjustable, max_bandwidth_mbps, min_bandwidth_mbps, name, price_per_mbps, provisioning_time_hours, service_type, setup_fee, technical_specs, updated_at, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-07-12 03:19:21 - JDBC URL to connect to 'dataSource': url='jdbc:postgresql://localhost:35943/itxecebnckxn?user=postgres&password=docker', scope='ServiceRepositoryTest#findServicesWithoutSetupFee_Success'
2025-07-12 03:19:21 - 
    insert 
    into
        singtel_app.services
        (base_bandwidth_mbps, base_price_monthly, category_id, contract_term_months, created_at, description, features, is_available, is_bandwidth_adjustable, max_bandwidth_mbps, min_bandwidth_mbps, name, price_per_mbps, provisioning_time_hours, service_type, setup_fee, technical_specs, updated_at, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
Hibernate: 
    insert 
    into
        singtel_app.services
        (base_bandwidth_mbps, base_price_monthly, category_id, contract_term_months, created_at, description, features, is_available, is_bandwidth_adjustable, max_bandwidth_mbps, min_bandwidth_mbps, name, price_per_mbps, provisioning_time_hours, service_type, setup_fee, technical_specs, updated_at, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-07-12 03:19:21 - 
    select
        s1_0.id,
        s1_0.base_bandwidth_mbps,
        s1_0.base_price_monthly,
        s1_0.category_id,
        s1_0.contract_term_months,
        s1_0.created_at,
        s1_0.description,
        s1_0.features,
        s1_0.is_available,
        s1_0.is_bandwidth_adjustable,
        s1_0.max_bandwidth_mbps,
        s1_0.min_bandwidth_mbps,
        s1_0.name,
        s1_0.price_per_mbps,
        s1_0.provisioning_time_hours,
        s1_0.service_type,
        s1_0.setup_fee,
        s1_0.technical_specs,
        s1_0.updated_at 
    from
        singtel_app.services s1_0 
    where
        (
            s1_0.setup_fee is null 
            or s1_0.setup_fee=0
        ) 
        and s1_0.is_available=true
Hibernate: 
    select
        s1_0.id,
        s1_0.base_bandwidth_mbps,
        s1_0.base_price_monthly,
        s1_0.category_id,
        s1_0.contract_term_months,
        s1_0.created_at,
        s1_0.description,
        s1_0.features,
        s1_0.is_available,
        s1_0.is_bandwidth_adjustable,
        s1_0.max_bandwidth_mbps,
        s1_0.min_bandwidth_mbps,
        s1_0.name,
        s1_0.price_per_mbps,
        s1_0.provisioning_time_hours,
        s1_0.service_type,
        s1_0.setup_fee,
        s1_0.technical_specs,
        s1_0.updated_at 
    from
        singtel_app.services s1_0 
    where
        (
            s1_0.setup_fee is null 
            or s1_0.setup_fee=0
        ) 
        and s1_0.is_available=true
]]></system-out>
  </testcase>
  <testcase name="countByCategoryId_Success" classname="com.singtel.network.repository.ServiceRepositoryTest" time="0.015">
    <system-out><![CDATA[2025-07-12 03:19:21 - 
    insert 
    into
        singtel_app.service_categories
        (created_at, description, display_order, is_active, name, updated_at, id) 
    values
        (?, ?, ?, ?, ?, ?, ?)
Hibernate: 
    insert 
    into
        singtel_app.service_categories
        (created_at, description, display_order, is_active, name, updated_at, id) 
    values
        (?, ?, ?, ?, ?, ?, ?)
2025-07-12 03:19:21 - 
    insert 
    into
        singtel_app.services
        (base_bandwidth_mbps, base_price_monthly, category_id, contract_term_months, created_at, description, features, is_available, is_bandwidth_adjustable, max_bandwidth_mbps, min_bandwidth_mbps, name, price_per_mbps, provisioning_time_hours, service_type, setup_fee, technical_specs, updated_at, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
Hibernate: 
    insert 
    into
        singtel_app.services
        (base_bandwidth_mbps, base_price_monthly, category_id, contract_term_months, created_at, description, features, is_available, is_bandwidth_adjustable, max_bandwidth_mbps, min_bandwidth_mbps, name, price_per_mbps, provisioning_time_hours, service_type, setup_fee, technical_specs, updated_at, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-07-12 03:19:21 - 
    insert 
    into
        singtel_app.services
        (base_bandwidth_mbps, base_price_monthly, category_id, contract_term_months, created_at, description, features, is_available, is_bandwidth_adjustable, max_bandwidth_mbps, min_bandwidth_mbps, name, price_per_mbps, provisioning_time_hours, service_type, setup_fee, technical_specs, updated_at, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
Hibernate: 
    insert 
    into
        singtel_app.services
        (base_bandwidth_mbps, base_price_monthly, category_id, contract_term_months, created_at, description, features, is_available, is_bandwidth_adjustable, max_bandwidth_mbps, min_bandwidth_mbps, name, price_per_mbps, provisioning_time_hours, service_type, setup_fee, technical_specs, updated_at, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-07-12 03:19:21 - JDBC URL to connect to 'dataSource': url='jdbc:postgresql://localhost:35943/itxecebnckxn?user=postgres&password=docker', scope='ServiceRepositoryTest#countByCategoryId_Success'
2025-07-12 03:19:21 - 
    select
        count(s1_0.id) 
    from
        singtel_app.services s1_0 
    where
        s1_0.category_id=?
Hibernate: 
    select
        count(s1_0.id) 
    from
        singtel_app.services s1_0 
    where
        s1_0.category_id=?
]]></system-out>
  </testcase>
  <testcase name="findByCategoryAndType_Success" classname="com.singtel.network.repository.ServiceRepositoryTest" time="0.017">
    <system-out><![CDATA[2025-07-12 03:19:21 - 
    insert 
    into
        singtel_app.service_categories
        (created_at, description, display_order, is_active, name, updated_at, id) 
    values
        (?, ?, ?, ?, ?, ?, ?)
Hibernate: 
    insert 
    into
        singtel_app.service_categories
        (created_at, description, display_order, is_active, name, updated_at, id) 
    values
        (?, ?, ?, ?, ?, ?, ?)
2025-07-12 03:19:21 - 
    insert 
    into
        singtel_app.services
        (base_bandwidth_mbps, base_price_monthly, category_id, contract_term_months, created_at, description, features, is_available, is_bandwidth_adjustable, max_bandwidth_mbps, min_bandwidth_mbps, name, price_per_mbps, provisioning_time_hours, service_type, setup_fee, technical_specs, updated_at, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
Hibernate: 
    insert 
    into
        singtel_app.services
        (base_bandwidth_mbps, base_price_monthly, category_id, contract_term_months, created_at, description, features, is_available, is_bandwidth_adjustable, max_bandwidth_mbps, min_bandwidth_mbps, name, price_per_mbps, provisioning_time_hours, service_type, setup_fee, technical_specs, updated_at, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-07-12 03:19:21 - 
    insert 
    into
        singtel_app.services
        (base_bandwidth_mbps, base_price_monthly, category_id, contract_term_months, created_at, description, features, is_available, is_bandwidth_adjustable, max_bandwidth_mbps, min_bandwidth_mbps, name, price_per_mbps, provisioning_time_hours, service_type, setup_fee, technical_specs, updated_at, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
Hibernate: 
    insert 
    into
        singtel_app.services
        (base_bandwidth_mbps, base_price_monthly, category_id, contract_term_months, created_at, description, features, is_available, is_bandwidth_adjustable, max_bandwidth_mbps, min_bandwidth_mbps, name, price_per_mbps, provisioning_time_hours, service_type, setup_fee, technical_specs, updated_at, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-07-12 03:19:21 - JDBC URL to connect to 'dataSource': url='jdbc:postgresql://localhost:35943/itxecebnckxn?user=postgres&password=docker', scope='ServiceRepositoryTest#findByCategoryAndType_Success'
2025-07-12 03:19:21 - 
    select
        s1_0.id,
        s1_0.base_bandwidth_mbps,
        s1_0.base_price_monthly,
        s1_0.category_id,
        s1_0.contract_term_months,
        s1_0.created_at,
        s1_0.description,
        s1_0.features,
        s1_0.is_available,
        s1_0.is_bandwidth_adjustable,
        s1_0.max_bandwidth_mbps,
        s1_0.min_bandwidth_mbps,
        s1_0.name,
        s1_0.price_per_mbps,
        s1_0.provisioning_time_hours,
        s1_0.service_type,
        s1_0.setup_fee,
        s1_0.technical_specs,
        s1_0.updated_at 
    from
        singtel_app.services s1_0 
    where
        s1_0.category_id=? 
        and s1_0.service_type=? 
        and s1_0.is_available=true
Hibernate: 
    select
        s1_0.id,
        s1_0.base_bandwidth_mbps,
        s1_0.base_price_monthly,
        s1_0.category_id,
        s1_0.contract_term_months,
        s1_0.created_at,
        s1_0.description,
        s1_0.features,
        s1_0.is_available,
        s1_0.is_bandwidth_adjustable,
        s1_0.max_bandwidth_mbps,
        s1_0.min_bandwidth_mbps,
        s1_0.name,
        s1_0.price_per_mbps,
        s1_0.provisioning_time_hours,
        s1_0.service_type,
        s1_0.setup_fee,
        s1_0.technical_specs,
        s1_0.updated_at 
    from
        singtel_app.services s1_0 
    where
        s1_0.category_id=? 
        and s1_0.service_type=? 
        and s1_0.is_available=true
]]></system-out>
  </testcase>
  <testcase name="countAvailableServices_Success" classname="com.singtel.network.repository.ServiceRepositoryTest" time="0.02">
    <system-out><![CDATA[2025-07-12 03:19:21 - 
    insert 
    into
        singtel_app.service_categories
        (created_at, description, display_order, is_active, name, updated_at, id) 
    values
        (?, ?, ?, ?, ?, ?, ?)
Hibernate: 
    insert 
    into
        singtel_app.service_categories
        (created_at, description, display_order, is_active, name, updated_at, id) 
    values
        (?, ?, ?, ?, ?, ?, ?)
2025-07-12 03:19:21 - 
    insert 
    into
        singtel_app.services
        (base_bandwidth_mbps, base_price_monthly, category_id, contract_term_months, created_at, description, features, is_available, is_bandwidth_adjustable, max_bandwidth_mbps, min_bandwidth_mbps, name, price_per_mbps, provisioning_time_hours, service_type, setup_fee, technical_specs, updated_at, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
Hibernate: 
    insert 
    into
        singtel_app.services
        (base_bandwidth_mbps, base_price_monthly, category_id, contract_term_months, created_at, description, features, is_available, is_bandwidth_adjustable, max_bandwidth_mbps, min_bandwidth_mbps, name, price_per_mbps, provisioning_time_hours, service_type, setup_fee, technical_specs, updated_at, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-07-12 03:19:21 - 
    insert 
    into
        singtel_app.services
        (base_bandwidth_mbps, base_price_monthly, category_id, contract_term_months, created_at, description, features, is_available, is_bandwidth_adjustable, max_bandwidth_mbps, min_bandwidth_mbps, name, price_per_mbps, provisioning_time_hours, service_type, setup_fee, technical_specs, updated_at, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
Hibernate: 
    insert 
    into
        singtel_app.services
        (base_bandwidth_mbps, base_price_monthly, category_id, contract_term_months, created_at, description, features, is_available, is_bandwidth_adjustable, max_bandwidth_mbps, min_bandwidth_mbps, name, price_per_mbps, provisioning_time_hours, service_type, setup_fee, technical_specs, updated_at, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-07-12 03:19:21 - JDBC URL to connect to 'dataSource': url='jdbc:postgresql://localhost:35943/itxecebnckxn?user=postgres&password=docker', scope='ServiceRepositoryTest#countAvailableServices_Success'
2025-07-12 03:19:21 - 
    select
        count(s1_0.id) 
    from
        singtel_app.services s1_0 
    where
        s1_0.is_available=true
Hibernate: 
    select
        count(s1_0.id) 
    from
        singtel_app.services s1_0 
    where
        s1_0.is_available=true
]]></system-out>
  </testcase>
  <testcase name="findByPriceRange_Success" classname="com.singtel.network.repository.ServiceRepositoryTest" time="0.014">
    <system-out><![CDATA[2025-07-12 03:19:21 - 
    insert 
    into
        singtel_app.service_categories
        (created_at, description, display_order, is_active, name, updated_at, id) 
    values
        (?, ?, ?, ?, ?, ?, ?)
Hibernate: 
    insert 
    into
        singtel_app.service_categories
        (created_at, description, display_order, is_active, name, updated_at, id) 
    values
        (?, ?, ?, ?, ?, ?, ?)
2025-07-12 03:19:21 - 
    insert 
    into
        singtel_app.services
        (base_bandwidth_mbps, base_price_monthly, category_id, contract_term_months, created_at, description, features, is_available, is_bandwidth_adjustable, max_bandwidth_mbps, min_bandwidth_mbps, name, price_per_mbps, provisioning_time_hours, service_type, setup_fee, technical_specs, updated_at, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
Hibernate: 
    insert 
    into
        singtel_app.services
        (base_bandwidth_mbps, base_price_monthly, category_id, contract_term_months, created_at, description, features, is_available, is_bandwidth_adjustable, max_bandwidth_mbps, min_bandwidth_mbps, name, price_per_mbps, provisioning_time_hours, service_type, setup_fee, technical_specs, updated_at, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-07-12 03:19:21 - 
    insert 
    into
        singtel_app.services
        (base_bandwidth_mbps, base_price_monthly, category_id, contract_term_months, created_at, description, features, is_available, is_bandwidth_adjustable, max_bandwidth_mbps, min_bandwidth_mbps, name, price_per_mbps, provisioning_time_hours, service_type, setup_fee, technical_specs, updated_at, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
Hibernate: 
    insert 
    into
        singtel_app.services
        (base_bandwidth_mbps, base_price_monthly, category_id, contract_term_months, created_at, description, features, is_available, is_bandwidth_adjustable, max_bandwidth_mbps, min_bandwidth_mbps, name, price_per_mbps, provisioning_time_hours, service_type, setup_fee, technical_specs, updated_at, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-07-12 03:19:21 - JDBC URL to connect to 'dataSource': url='jdbc:postgresql://localhost:35943/itxecebnckxn?user=postgres&password=docker', scope='ServiceRepositoryTest#findByPriceRange_Success'
2025-07-12 03:19:21 - 
    select
        s1_0.id,
        s1_0.base_bandwidth_mbps,
        s1_0.base_price_monthly,
        s1_0.category_id,
        s1_0.contract_term_months,
        s1_0.created_at,
        s1_0.description,
        s1_0.features,
        s1_0.is_available,
        s1_0.is_bandwidth_adjustable,
        s1_0.max_bandwidth_mbps,
        s1_0.min_bandwidth_mbps,
        s1_0.name,
        s1_0.price_per_mbps,
        s1_0.provisioning_time_hours,
        s1_0.service_type,
        s1_0.setup_fee,
        s1_0.technical_specs,
        s1_0.updated_at 
    from
        singtel_app.services s1_0 
    where
        s1_0.base_price_monthly between ? and ? 
        and s1_0.is_available=true
Hibernate: 
    select
        s1_0.id,
        s1_0.base_bandwidth_mbps,
        s1_0.base_price_monthly,
        s1_0.category_id,
        s1_0.contract_term_months,
        s1_0.created_at,
        s1_0.description,
        s1_0.features,
        s1_0.is_available,
        s1_0.is_bandwidth_adjustable,
        s1_0.max_bandwidth_mbps,
        s1_0.min_bandwidth_mbps,
        s1_0.name,
        s1_0.price_per_mbps,
        s1_0.provisioning_time_hours,
        s1_0.service_type,
        s1_0.setup_fee,
        s1_0.technical_specs,
        s1_0.updated_at 
    from
        singtel_app.services s1_0 
    where
        s1_0.base_price_monthly between ? and ? 
        and s1_0.is_available=true
]]></system-out>
  </testcase>
  <testcase name="findServicesWithSetupFee_Success" classname="com.singtel.network.repository.ServiceRepositoryTest" time="0.014">
    <system-out><![CDATA[2025-07-12 03:19:21 - 
    insert 
    into
        singtel_app.service_categories
        (created_at, description, display_order, is_active, name, updated_at, id) 
    values
        (?, ?, ?, ?, ?, ?, ?)
Hibernate: 
    insert 
    into
        singtel_app.service_categories
        (created_at, description, display_order, is_active, name, updated_at, id) 
    values
        (?, ?, ?, ?, ?, ?, ?)
2025-07-12 03:19:21 - 
    insert 
    into
        singtel_app.services
        (base_bandwidth_mbps, base_price_monthly, category_id, contract_term_months, created_at, description, features, is_available, is_bandwidth_adjustable, max_bandwidth_mbps, min_bandwidth_mbps, name, price_per_mbps, provisioning_time_hours, service_type, setup_fee, technical_specs, updated_at, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
Hibernate: 
    insert 
    into
        singtel_app.services
        (base_bandwidth_mbps, base_price_monthly, category_id, contract_term_months, created_at, description, features, is_available, is_bandwidth_adjustable, max_bandwidth_mbps, min_bandwidth_mbps, name, price_per_mbps, provisioning_time_hours, service_type, setup_fee, technical_specs, updated_at, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-07-12 03:19:21 - 
    insert 
    into
        singtel_app.services
        (base_bandwidth_mbps, base_price_monthly, category_id, contract_term_months, created_at, description, features, is_available, is_bandwidth_adjustable, max_bandwidth_mbps, min_bandwidth_mbps, name, price_per_mbps, provisioning_time_hours, service_type, setup_fee, technical_specs, updated_at, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
Hibernate: 
    insert 
    into
        singtel_app.services
        (base_bandwidth_mbps, base_price_monthly, category_id, contract_term_months, created_at, description, features, is_available, is_bandwidth_adjustable, max_bandwidth_mbps, min_bandwidth_mbps, name, price_per_mbps, provisioning_time_hours, service_type, setup_fee, technical_specs, updated_at, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-07-12 03:19:21 - JDBC URL to connect to 'dataSource': url='jdbc:postgresql://localhost:35943/itxecebnckxn?user=postgres&password=docker', scope='ServiceRepositoryTest#findServicesWithSetupFee_Success'
2025-07-12 03:19:21 - 
    select
        s1_0.id,
        s1_0.base_bandwidth_mbps,
        s1_0.base_price_monthly,
        s1_0.category_id,
        s1_0.contract_term_months,
        s1_0.created_at,
        s1_0.description,
        s1_0.features,
        s1_0.is_available,
        s1_0.is_bandwidth_adjustable,
        s1_0.max_bandwidth_mbps,
        s1_0.min_bandwidth_mbps,
        s1_0.name,
        s1_0.price_per_mbps,
        s1_0.provisioning_time_hours,
        s1_0.service_type,
        s1_0.setup_fee,
        s1_0.technical_specs,
        s1_0.updated_at 
    from
        singtel_app.services s1_0 
    where
        s1_0.setup_fee>0 
        and s1_0.is_available=true
Hibernate: 
    select
        s1_0.id,
        s1_0.base_bandwidth_mbps,
        s1_0.base_price_monthly,
        s1_0.category_id,
        s1_0.contract_term_months,
        s1_0.created_at,
        s1_0.description,
        s1_0.features,
        s1_0.is_available,
        s1_0.is_bandwidth_adjustable,
        s1_0.max_bandwidth_mbps,
        s1_0.min_bandwidth_mbps,
        s1_0.name,
        s1_0.price_per_mbps,
        s1_0.provisioning_time_hours,
        s1_0.service_type,
        s1_0.setup_fee,
        s1_0.technical_specs,
        s1_0.updated_at 
    from
        singtel_app.services s1_0 
    where
        s1_0.setup_fee>0 
        and s1_0.is_available=true
]]></system-out>
  </testcase>
  <testcase name="searchServices_Success" classname="com.singtel.network.repository.ServiceRepositoryTest" time="0.015">
    <system-out><![CDATA[2025-07-12 03:19:21 - 
    insert 
    into
        singtel_app.service_categories
        (created_at, description, display_order, is_active, name, updated_at, id) 
    values
        (?, ?, ?, ?, ?, ?, ?)
Hibernate: 
    insert 
    into
        singtel_app.service_categories
        (created_at, description, display_order, is_active, name, updated_at, id) 
    values
        (?, ?, ?, ?, ?, ?, ?)
2025-07-12 03:19:21 - 
    insert 
    into
        singtel_app.services
        (base_bandwidth_mbps, base_price_monthly, category_id, contract_term_months, created_at, description, features, is_available, is_bandwidth_adjustable, max_bandwidth_mbps, min_bandwidth_mbps, name, price_per_mbps, provisioning_time_hours, service_type, setup_fee, technical_specs, updated_at, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
Hibernate: 
    insert 
    into
        singtel_app.services
        (base_bandwidth_mbps, base_price_monthly, category_id, contract_term_months, created_at, description, features, is_available, is_bandwidth_adjustable, max_bandwidth_mbps, min_bandwidth_mbps, name, price_per_mbps, provisioning_time_hours, service_type, setup_fee, technical_specs, updated_at, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-07-12 03:19:21 - 
    insert 
    into
        singtel_app.services
        (base_bandwidth_mbps, base_price_monthly, category_id, contract_term_months, created_at, description, features, is_available, is_bandwidth_adjustable, max_bandwidth_mbps, min_bandwidth_mbps, name, price_per_mbps, provisioning_time_hours, service_type, setup_fee, technical_specs, updated_at, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
Hibernate: 
    insert 
    into
        singtel_app.services
        (base_bandwidth_mbps, base_price_monthly, category_id, contract_term_months, created_at, description, features, is_available, is_bandwidth_adjustable, max_bandwidth_mbps, min_bandwidth_mbps, name, price_per_mbps, provisioning_time_hours, service_type, setup_fee, technical_specs, updated_at, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-07-12 03:19:21 - JDBC URL to connect to 'dataSource': url='jdbc:postgresql://localhost:35943/itxecebnckxn?user=postgres&password=docker', scope='ServiceRepositoryTest#searchServices_Success'
2025-07-12 03:19:21 - 
    select
        s1_0.id,
        s1_0.base_bandwidth_mbps,
        s1_0.base_price_monthly,
        s1_0.category_id,
        s1_0.contract_term_months,
        s1_0.created_at,
        s1_0.description,
        s1_0.features,
        s1_0.is_available,
        s1_0.is_bandwidth_adjustable,
        s1_0.max_bandwidth_mbps,
        s1_0.min_bandwidth_mbps,
        s1_0.name,
        s1_0.price_per_mbps,
        s1_0.provisioning_time_hours,
        s1_0.service_type,
        s1_0.setup_fee,
        s1_0.technical_specs,
        s1_0.updated_at 
    from
        singtel_app.services s1_0 
    where
        (
            ? is null 
            or s1_0.category_id=?
        ) 
        and (
            ? is null 
            or s1_0.service_type=?
        ) 
        and (
            ? is null 
            or s1_0.base_price_monthly>=?
        ) 
        and (
            ? is null 
            or s1_0.base_price_monthly<=?
        ) 
        and (
            ? is null 
            or s1_0.base_bandwidth_mbps>=?
        ) 
        and (
            ? is null 
            or s1_0.base_bandwidth_mbps<=?
        ) 
        and (
            ? is null 
            or s1_0.is_bandwidth_adjustable=?
        ) 
        and s1_0.is_available=true 
    offset
        ? rows 
    fetch
        first ? rows only
Hibernate: 
    select
        s1_0.id,
        s1_0.base_bandwidth_mbps,
        s1_0.base_price_monthly,
        s1_0.category_id,
        s1_0.contract_term_months,
        s1_0.created_at,
        s1_0.description,
        s1_0.features,
        s1_0.is_available,
        s1_0.is_bandwidth_adjustable,
        s1_0.max_bandwidth_mbps,
        s1_0.min_bandwidth_mbps,
        s1_0.name,
        s1_0.price_per_mbps,
        s1_0.provisioning_time_hours,
        s1_0.service_type,
        s1_0.setup_fee,
        s1_0.technical_specs,
        s1_0.updated_at 
    from
        singtel_app.services s1_0 
    where
        (
            ? is null 
            or s1_0.category_id=?
        ) 
        and (
            ? is null 
            or s1_0.service_type=?
        ) 
        and (
            ? is null 
            or s1_0.base_price_monthly>=?
        ) 
        and (
            ? is null 
            or s1_0.base_price_monthly<=?
        ) 
        and (
            ? is null 
            or s1_0.base_bandwidth_mbps>=?
        ) 
        and (
            ? is null 
            or s1_0.base_bandwidth_mbps<=?
        ) 
        and (
            ? is null 
            or s1_0.is_bandwidth_adjustable=?
        ) 
        and s1_0.is_available=true 
    offset
        ? rows 
    fetch
        first ? rows only
]]></system-out>
  </testcase>
  <testcase name="findByIsAvailable_Success" classname="com.singtel.network.repository.ServiceRepositoryTest" time="0.013">
    <system-out><![CDATA[2025-07-12 03:19:21 - 
    insert 
    into
        singtel_app.service_categories
        (created_at, description, display_order, is_active, name, updated_at, id) 
    values
        (?, ?, ?, ?, ?, ?, ?)
Hibernate: 
    insert 
    into
        singtel_app.service_categories
        (created_at, description, display_order, is_active, name, updated_at, id) 
    values
        (?, ?, ?, ?, ?, ?, ?)
2025-07-12 03:19:21 - 
    insert 
    into
        singtel_app.services
        (base_bandwidth_mbps, base_price_monthly, category_id, contract_term_months, created_at, description, features, is_available, is_bandwidth_adjustable, max_bandwidth_mbps, min_bandwidth_mbps, name, price_per_mbps, provisioning_time_hours, service_type, setup_fee, technical_specs, updated_at, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
Hibernate: 
    insert 
    into
        singtel_app.services
        (base_bandwidth_mbps, base_price_monthly, category_id, contract_term_months, created_at, description, features, is_available, is_bandwidth_adjustable, max_bandwidth_mbps, min_bandwidth_mbps, name, price_per_mbps, provisioning_time_hours, service_type, setup_fee, technical_specs, updated_at, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-07-12 03:19:21 - 
    insert 
    into
        singtel_app.services
        (base_bandwidth_mbps, base_price_monthly, category_id, contract_term_months, created_at, description, features, is_available, is_bandwidth_adjustable, max_bandwidth_mbps, min_bandwidth_mbps, name, price_per_mbps, provisioning_time_hours, service_type, setup_fee, technical_specs, updated_at, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
Hibernate: 
    insert 
    into
        singtel_app.services
        (base_bandwidth_mbps, base_price_monthly, category_id, contract_term_months, created_at, description, features, is_available, is_bandwidth_adjustable, max_bandwidth_mbps, min_bandwidth_mbps, name, price_per_mbps, provisioning_time_hours, service_type, setup_fee, technical_specs, updated_at, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-07-12 03:19:21 - JDBC URL to connect to 'dataSource': url='jdbc:postgresql://localhost:35943/itxecebnckxn?user=postgres&password=docker', scope='ServiceRepositoryTest#findByIsAvailable_Success'
2025-07-12 03:19:21 - 
    select
        s1_0.id,
        s1_0.base_bandwidth_mbps,
        s1_0.base_price_monthly,
        s1_0.category_id,
        s1_0.contract_term_months,
        s1_0.created_at,
        s1_0.description,
        s1_0.features,
        s1_0.is_available,
        s1_0.is_bandwidth_adjustable,
        s1_0.max_bandwidth_mbps,
        s1_0.min_bandwidth_mbps,
        s1_0.name,
        s1_0.price_per_mbps,
        s1_0.provisioning_time_hours,
        s1_0.service_type,
        s1_0.setup_fee,
        s1_0.technical_specs,
        s1_0.updated_at 
    from
        singtel_app.services s1_0 
    where
        s1_0.is_available=?
Hibernate: 
    select
        s1_0.id,
        s1_0.base_bandwidth_mbps,
        s1_0.base_price_monthly,
        s1_0.category_id,
        s1_0.contract_term_months,
        s1_0.created_at,
        s1_0.description,
        s1_0.features,
        s1_0.is_available,
        s1_0.is_bandwidth_adjustable,
        s1_0.max_bandwidth_mbps,
        s1_0.min_bandwidth_mbps,
        s1_0.name,
        s1_0.price_per_mbps,
        s1_0.provisioning_time_hours,
        s1_0.service_type,
        s1_0.setup_fee,
        s1_0.technical_specs,
        s1_0.updated_at 
    from
        singtel_app.services s1_0 
    where
        s1_0.is_available=?
]]></system-out>
  </testcase>
  <testcase name="findByBandwidthRange_Success" classname="com.singtel.network.repository.ServiceRepositoryTest" time="0.012">
    <system-out><![CDATA[2025-07-12 03:19:21 - 
    insert 
    into
        singtel_app.service_categories
        (created_at, description, display_order, is_active, name, updated_at, id) 
    values
        (?, ?, ?, ?, ?, ?, ?)
Hibernate: 
    insert 
    into
        singtel_app.service_categories
        (created_at, description, display_order, is_active, name, updated_at, id) 
    values
        (?, ?, ?, ?, ?, ?, ?)
2025-07-12 03:19:21 - 
    insert 
    into
        singtel_app.services
        (base_bandwidth_mbps, base_price_monthly, category_id, contract_term_months, created_at, description, features, is_available, is_bandwidth_adjustable, max_bandwidth_mbps, min_bandwidth_mbps, name, price_per_mbps, provisioning_time_hours, service_type, setup_fee, technical_specs, updated_at, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
Hibernate: 
    insert 
    into
        singtel_app.services
        (base_bandwidth_mbps, base_price_monthly, category_id, contract_term_months, created_at, description, features, is_available, is_bandwidth_adjustable, max_bandwidth_mbps, min_bandwidth_mbps, name, price_per_mbps, provisioning_time_hours, service_type, setup_fee, technical_specs, updated_at, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-07-12 03:19:21 - 
    insert 
    into
        singtel_app.services
        (base_bandwidth_mbps, base_price_monthly, category_id, contract_term_months, created_at, description, features, is_available, is_bandwidth_adjustable, max_bandwidth_mbps, min_bandwidth_mbps, name, price_per_mbps, provisioning_time_hours, service_type, setup_fee, technical_specs, updated_at, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
Hibernate: 
    insert 
    into
        singtel_app.services
        (base_bandwidth_mbps, base_price_monthly, category_id, contract_term_months, created_at, description, features, is_available, is_bandwidth_adjustable, max_bandwidth_mbps, min_bandwidth_mbps, name, price_per_mbps, provisioning_time_hours, service_type, setup_fee, technical_specs, updated_at, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-07-12 03:19:21 - JDBC URL to connect to 'dataSource': url='jdbc:postgresql://localhost:35943/itxecebnckxn?user=postgres&password=docker', scope='ServiceRepositoryTest#findByBandwidthRange_Success'
2025-07-12 03:19:21 - 
    select
        s1_0.id,
        s1_0.base_bandwidth_mbps,
        s1_0.base_price_monthly,
        s1_0.category_id,
        s1_0.contract_term_months,
        s1_0.created_at,
        s1_0.description,
        s1_0.features,
        s1_0.is_available,
        s1_0.is_bandwidth_adjustable,
        s1_0.max_bandwidth_mbps,
        s1_0.min_bandwidth_mbps,
        s1_0.name,
        s1_0.price_per_mbps,
        s1_0.provisioning_time_hours,
        s1_0.service_type,
        s1_0.setup_fee,
        s1_0.technical_specs,
        s1_0.updated_at 
    from
        singtel_app.services s1_0 
    where
        s1_0.base_bandwidth_mbps between ? and ? 
        and s1_0.is_available=true
Hibernate: 
    select
        s1_0.id,
        s1_0.base_bandwidth_mbps,
        s1_0.base_price_monthly,
        s1_0.category_id,
        s1_0.contract_term_months,
        s1_0.created_at,
        s1_0.description,
        s1_0.features,
        s1_0.is_available,
        s1_0.is_bandwidth_adjustable,
        s1_0.max_bandwidth_mbps,
        s1_0.min_bandwidth_mbps,
        s1_0.name,
        s1_0.price_per_mbps,
        s1_0.provisioning_time_hours,
        s1_0.service_type,
        s1_0.setup_fee,
        s1_0.technical_specs,
        s1_0.updated_at 
    from
        singtel_app.services s1_0 
    where
        s1_0.base_bandwidth_mbps between ? and ? 
        and s1_0.is_available=true
]]></system-out>
  </testcase>
  <testcase name="countByServiceType_Success" classname="com.singtel.network.repository.ServiceRepositoryTest" time="0.015">
    <system-out><![CDATA[2025-07-12 03:19:21 - 
    insert 
    into
        singtel_app.service_categories
        (created_at, description, display_order, is_active, name, updated_at, id) 
    values
        (?, ?, ?, ?, ?, ?, ?)
Hibernate: 
    insert 
    into
        singtel_app.service_categories
        (created_at, description, display_order, is_active, name, updated_at, id) 
    values
        (?, ?, ?, ?, ?, ?, ?)
2025-07-12 03:19:21 - 
    insert 
    into
        singtel_app.services
        (base_bandwidth_mbps, base_price_monthly, category_id, contract_term_months, created_at, description, features, is_available, is_bandwidth_adjustable, max_bandwidth_mbps, min_bandwidth_mbps, name, price_per_mbps, provisioning_time_hours, service_type, setup_fee, technical_specs, updated_at, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
Hibernate: 
    insert 
    into
        singtel_app.services
        (base_bandwidth_mbps, base_price_monthly, category_id, contract_term_months, created_at, description, features, is_available, is_bandwidth_adjustable, max_bandwidth_mbps, min_bandwidth_mbps, name, price_per_mbps, provisioning_time_hours, service_type, setup_fee, technical_specs, updated_at, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-07-12 03:19:21 - 
    insert 
    into
        singtel_app.services
        (base_bandwidth_mbps, base_price_monthly, category_id, contract_term_months, created_at, description, features, is_available, is_bandwidth_adjustable, max_bandwidth_mbps, min_bandwidth_mbps, name, price_per_mbps, provisioning_time_hours, service_type, setup_fee, technical_specs, updated_at, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
Hibernate: 
    insert 
    into
        singtel_app.services
        (base_bandwidth_mbps, base_price_monthly, category_id, contract_term_months, created_at, description, features, is_available, is_bandwidth_adjustable, max_bandwidth_mbps, min_bandwidth_mbps, name, price_per_mbps, provisioning_time_hours, service_type, setup_fee, technical_specs, updated_at, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-07-12 03:19:21 - JDBC URL to connect to 'dataSource': url='jdbc:postgresql://localhost:35943/itxecebnckxn?user=postgres&password=docker', scope='ServiceRepositoryTest#countByServiceType_Success'
2025-07-12 03:19:21 - 
    select
        count(s1_0.id) 
    from
        singtel_app.services s1_0 
    where
        s1_0.service_type=?
Hibernate: 
    select
        count(s1_0.id) 
    from
        singtel_app.services s1_0 
    where
        s1_0.service_type=?
2025-07-12 03:19:21 - 
    select
        count(s1_0.id) 
    from
        singtel_app.services s1_0 
    where
        s1_0.service_type=?
Hibernate: 
    select
        count(s1_0.id) 
    from
        singtel_app.services s1_0 
    where
        s1_0.service_type=?
]]></system-out>
  </testcase>
  <testcase name="findByContractTermMonths_Success" classname="com.singtel.network.repository.ServiceRepositoryTest" time="0.014">
    <system-out><![CDATA[2025-07-12 03:19:21 - 
    insert 
    into
        singtel_app.service_categories
        (created_at, description, display_order, is_active, name, updated_at, id) 
    values
        (?, ?, ?, ?, ?, ?, ?)
Hibernate: 
    insert 
    into
        singtel_app.service_categories
        (created_at, description, display_order, is_active, name, updated_at, id) 
    values
        (?, ?, ?, ?, ?, ?, ?)
2025-07-12 03:19:21 - 
    insert 
    into
        singtel_app.services
        (base_bandwidth_mbps, base_price_monthly, category_id, contract_term_months, created_at, description, features, is_available, is_bandwidth_adjustable, max_bandwidth_mbps, min_bandwidth_mbps, name, price_per_mbps, provisioning_time_hours, service_type, setup_fee, technical_specs, updated_at, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
Hibernate: 
    insert 
    into
        singtel_app.services
        (base_bandwidth_mbps, base_price_monthly, category_id, contract_term_months, created_at, description, features, is_available, is_bandwidth_adjustable, max_bandwidth_mbps, min_bandwidth_mbps, name, price_per_mbps, provisioning_time_hours, service_type, setup_fee, technical_specs, updated_at, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-07-12 03:19:21 - 
    insert 
    into
        singtel_app.services
        (base_bandwidth_mbps, base_price_monthly, category_id, contract_term_months, created_at, description, features, is_available, is_bandwidth_adjustable, max_bandwidth_mbps, min_bandwidth_mbps, name, price_per_mbps, provisioning_time_hours, service_type, setup_fee, technical_specs, updated_at, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
Hibernate: 
    insert 
    into
        singtel_app.services
        (base_bandwidth_mbps, base_price_monthly, category_id, contract_term_months, created_at, description, features, is_available, is_bandwidth_adjustable, max_bandwidth_mbps, min_bandwidth_mbps, name, price_per_mbps, provisioning_time_hours, service_type, setup_fee, technical_specs, updated_at, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-07-12 03:19:21 - JDBC URL to connect to 'dataSource': url='jdbc:postgresql://localhost:35943/itxecebnckxn?user=postgres&password=docker', scope='ServiceRepositoryTest#findByContractTermMonths_Success'
2025-07-12 03:19:21 - 
    select
        s1_0.id,
        s1_0.base_bandwidth_mbps,
        s1_0.base_price_monthly,
        s1_0.category_id,
        s1_0.contract_term_months,
        s1_0.created_at,
        s1_0.description,
        s1_0.features,
        s1_0.is_available,
        s1_0.is_bandwidth_adjustable,
        s1_0.max_bandwidth_mbps,
        s1_0.min_bandwidth_mbps,
        s1_0.name,
        s1_0.price_per_mbps,
        s1_0.provisioning_time_hours,
        s1_0.service_type,
        s1_0.setup_fee,
        s1_0.technical_specs,
        s1_0.updated_at 
    from
        singtel_app.services s1_0 
    where
        s1_0.contract_term_months=?
Hibernate: 
    select
        s1_0.id,
        s1_0.base_bandwidth_mbps,
        s1_0.base_price_monthly,
        s1_0.category_id,
        s1_0.contract_term_months,
        s1_0.created_at,
        s1_0.description,
        s1_0.features,
        s1_0.is_available,
        s1_0.is_bandwidth_adjustable,
        s1_0.max_bandwidth_mbps,
        s1_0.min_bandwidth_mbps,
        s1_0.name,
        s1_0.price_per_mbps,
        s1_0.provisioning_time_hours,
        s1_0.service_type,
        s1_0.setup_fee,
        s1_0.technical_specs,
        s1_0.updated_at 
    from
        singtel_app.services s1_0 
    where
        s1_0.contract_term_months=?
2025-07-12 03:19:21 - 
    select
        s1_0.id,
        s1_0.base_bandwidth_mbps,
        s1_0.base_price_monthly,
        s1_0.category_id,
        s1_0.contract_term_months,
        s1_0.created_at,
        s1_0.description,
        s1_0.features,
        s1_0.is_available,
        s1_0.is_bandwidth_adjustable,
        s1_0.max_bandwidth_mbps,
        s1_0.min_bandwidth_mbps,
        s1_0.name,
        s1_0.price_per_mbps,
        s1_0.provisioning_time_hours,
        s1_0.service_type,
        s1_0.setup_fee,
        s1_0.technical_specs,
        s1_0.updated_at 
    from
        singtel_app.services s1_0 
    where
        s1_0.contract_term_months=?
Hibernate: 
    select
        s1_0.id,
        s1_0.base_bandwidth_mbps,
        s1_0.base_price_monthly,
        s1_0.category_id,
        s1_0.contract_term_months,
        s1_0.created_at,
        s1_0.description,
        s1_0.features,
        s1_0.is_available,
        s1_0.is_bandwidth_adjustable,
        s1_0.max_bandwidth_mbps,
        s1_0.min_bandwidth_mbps,
        s1_0.name,
        s1_0.price_per_mbps,
        s1_0.provisioning_time_hours,
        s1_0.service_type,
        s1_0.setup_fee,
        s1_0.technical_specs,
        s1_0.updated_at 
    from
        singtel_app.services s1_0 
    where
        s1_0.contract_term_months=?
]]></system-out>
  </testcase>
  <testcase name="findByNameContainingIgnoreCase_Success" classname="com.singtel.network.repository.ServiceRepositoryTest" time="0.012">
    <system-out><![CDATA[2025-07-12 03:19:21 - 
    insert 
    into
        singtel_app.service_categories
        (created_at, description, display_order, is_active, name, updated_at, id) 
    values
        (?, ?, ?, ?, ?, ?, ?)
Hibernate: 
    insert 
    into
        singtel_app.service_categories
        (created_at, description, display_order, is_active, name, updated_at, id) 
    values
        (?, ?, ?, ?, ?, ?, ?)
2025-07-12 03:19:21 - 
    insert 
    into
        singtel_app.services
        (base_bandwidth_mbps, base_price_monthly, category_id, contract_term_months, created_at, description, features, is_available, is_bandwidth_adjustable, max_bandwidth_mbps, min_bandwidth_mbps, name, price_per_mbps, provisioning_time_hours, service_type, setup_fee, technical_specs, updated_at, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
Hibernate: 
    insert 
    into
        singtel_app.services
        (base_bandwidth_mbps, base_price_monthly, category_id, contract_term_months, created_at, description, features, is_available, is_bandwidth_adjustable, max_bandwidth_mbps, min_bandwidth_mbps, name, price_per_mbps, provisioning_time_hours, service_type, setup_fee, technical_specs, updated_at, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-07-12 03:19:21 - 
    insert 
    into
        singtel_app.services
        (base_bandwidth_mbps, base_price_monthly, category_id, contract_term_months, created_at, description, features, is_available, is_bandwidth_adjustable, max_bandwidth_mbps, min_bandwidth_mbps, name, price_per_mbps, provisioning_time_hours, service_type, setup_fee, technical_specs, updated_at, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
Hibernate: 
    insert 
    into
        singtel_app.services
        (base_bandwidth_mbps, base_price_monthly, category_id, contract_term_months, created_at, description, features, is_available, is_bandwidth_adjustable, max_bandwidth_mbps, min_bandwidth_mbps, name, price_per_mbps, provisioning_time_hours, service_type, setup_fee, technical_specs, updated_at, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-07-12 03:19:21 - JDBC URL to connect to 'dataSource': url='jdbc:postgresql://localhost:35943/itxecebnckxn?user=postgres&password=docker', scope='ServiceRepositoryTest#findByNameContainingIgnoreCase_Success'
2025-07-12 03:19:21 - 
    select
        s1_0.id,
        s1_0.base_bandwidth_mbps,
        s1_0.base_price_monthly,
        s1_0.category_id,
        s1_0.contract_term_months,
        s1_0.created_at,
        s1_0.description,
        s1_0.features,
        s1_0.is_available,
        s1_0.is_bandwidth_adjustable,
        s1_0.max_bandwidth_mbps,
        s1_0.min_bandwidth_mbps,
        s1_0.name,
        s1_0.price_per_mbps,
        s1_0.provisioning_time_hours,
        s1_0.service_type,
        s1_0.setup_fee,
        s1_0.technical_specs,
        s1_0.updated_at 
    from
        singtel_app.services s1_0 
    where
        lower(s1_0.name) like lower(('%'||?||'%')) escape '' 
        and s1_0.is_available=true
Hibernate: 
    select
        s1_0.id,
        s1_0.base_bandwidth_mbps,
        s1_0.base_price_monthly,
        s1_0.category_id,
        s1_0.contract_term_months,
        s1_0.created_at,
        s1_0.description,
        s1_0.features,
        s1_0.is_available,
        s1_0.is_bandwidth_adjustable,
        s1_0.max_bandwidth_mbps,
        s1_0.min_bandwidth_mbps,
        s1_0.name,
        s1_0.price_per_mbps,
        s1_0.provisioning_time_hours,
        s1_0.service_type,
        s1_0.setup_fee,
        s1_0.technical_specs,
        s1_0.updated_at 
    from
        singtel_app.services s1_0 
    where
        lower(s1_0.name) like lower(('%'||?||'%')) escape '' 
        and s1_0.is_available=true
]]></system-out>
  </testcase>
  <testcase name="findAvailableServicesWithPagination_Success" classname="com.singtel.network.repository.ServiceRepositoryTest" time="0.015">
    <system-out><![CDATA[2025-07-12 03:19:21 - 
    insert 
    into
        singtel_app.service_categories
        (created_at, description, display_order, is_active, name, updated_at, id) 
    values
        (?, ?, ?, ?, ?, ?, ?)
Hibernate: 
    insert 
    into
        singtel_app.service_categories
        (created_at, description, display_order, is_active, name, updated_at, id) 
    values
        (?, ?, ?, ?, ?, ?, ?)
2025-07-12 03:19:21 - 
    insert 
    into
        singtel_app.services
        (base_bandwidth_mbps, base_price_monthly, category_id, contract_term_months, created_at, description, features, is_available, is_bandwidth_adjustable, max_bandwidth_mbps, min_bandwidth_mbps, name, price_per_mbps, provisioning_time_hours, service_type, setup_fee, technical_specs, updated_at, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
Hibernate: 
    insert 
    into
        singtel_app.services
        (base_bandwidth_mbps, base_price_monthly, category_id, contract_term_months, created_at, description, features, is_available, is_bandwidth_adjustable, max_bandwidth_mbps, min_bandwidth_mbps, name, price_per_mbps, provisioning_time_hours, service_type, setup_fee, technical_specs, updated_at, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-07-12 03:19:21 - 
    insert 
    into
        singtel_app.services
        (base_bandwidth_mbps, base_price_monthly, category_id, contract_term_months, created_at, description, features, is_available, is_bandwidth_adjustable, max_bandwidth_mbps, min_bandwidth_mbps, name, price_per_mbps, provisioning_time_hours, service_type, setup_fee, technical_specs, updated_at, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
Hibernate: 
    insert 
    into
        singtel_app.services
        (base_bandwidth_mbps, base_price_monthly, category_id, contract_term_months, created_at, description, features, is_available, is_bandwidth_adjustable, max_bandwidth_mbps, min_bandwidth_mbps, name, price_per_mbps, provisioning_time_hours, service_type, setup_fee, technical_specs, updated_at, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-07-12 03:19:21 - JDBC URL to connect to 'dataSource': url='jdbc:postgresql://localhost:35943/itxecebnckxn?user=postgres&password=docker', scope='ServiceRepositoryTest#findAvailableServicesWithPagination_Success'
2025-07-12 03:19:21 - 
    select
        s1_0.id,
        s1_0.base_bandwidth_mbps,
        s1_0.base_price_monthly,
        s1_0.category_id,
        s1_0.contract_term_months,
        s1_0.created_at,
        s1_0.description,
        s1_0.features,
        s1_0.is_available,
        s1_0.is_bandwidth_adjustable,
        s1_0.max_bandwidth_mbps,
        s1_0.min_bandwidth_mbps,
        s1_0.name,
        s1_0.price_per_mbps,
        s1_0.provisioning_time_hours,
        s1_0.service_type,
        s1_0.setup_fee,
        s1_0.technical_specs,
        s1_0.updated_at 
    from
        singtel_app.services s1_0 
    where
        s1_0.is_available=true 
    offset
        ? rows 
    fetch
        first ? rows only
Hibernate: 
    select
        s1_0.id,
        s1_0.base_bandwidth_mbps,
        s1_0.base_price_monthly,
        s1_0.category_id,
        s1_0.contract_term_months,
        s1_0.created_at,
        s1_0.description,
        s1_0.features,
        s1_0.is_available,
        s1_0.is_bandwidth_adjustable,
        s1_0.max_bandwidth_mbps,
        s1_0.min_bandwidth_mbps,
        s1_0.name,
        s1_0.price_per_mbps,
        s1_0.provisioning_time_hours,
        s1_0.service_type,
        s1_0.setup_fee,
        s1_0.technical_specs,
        s1_0.updated_at 
    from
        singtel_app.services s1_0 
    where
        s1_0.is_available=true 
    offset
        ? rows 
    fetch
        first ? rows only
2025-07-12 03:19:21 - 
    select
        count(s1_0.id) 
    from
        singtel_app.services s1_0 
    where
        s1_0.is_available=true
Hibernate: 
    select
        count(s1_0.id) 
    from
        singtel_app.services s1_0 
    where
        s1_0.is_available=true
]]></system-out>
  </testcase>
  <testcase name="findDistinctServiceTypes_Success" classname="com.singtel.network.repository.ServiceRepositoryTest" time="0.011">
    <system-out><![CDATA[2025-07-12 03:19:21 - 
    insert 
    into
        singtel_app.service_categories
        (created_at, description, display_order, is_active, name, updated_at, id) 
    values
        (?, ?, ?, ?, ?, ?, ?)
Hibernate: 
    insert 
    into
        singtel_app.service_categories
        (created_at, description, display_order, is_active, name, updated_at, id) 
    values
        (?, ?, ?, ?, ?, ?, ?)
2025-07-12 03:19:21 - 
    insert 
    into
        singtel_app.services
        (base_bandwidth_mbps, base_price_monthly, category_id, contract_term_months, created_at, description, features, is_available, is_bandwidth_adjustable, max_bandwidth_mbps, min_bandwidth_mbps, name, price_per_mbps, provisioning_time_hours, service_type, setup_fee, technical_specs, updated_at, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
Hibernate: 
    insert 
    into
        singtel_app.services
        (base_bandwidth_mbps, base_price_monthly, category_id, contract_term_months, created_at, description, features, is_available, is_bandwidth_adjustable, max_bandwidth_mbps, min_bandwidth_mbps, name, price_per_mbps, provisioning_time_hours, service_type, setup_fee, technical_specs, updated_at, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-07-12 03:19:21 - 
    insert 
    into
        singtel_app.services
        (base_bandwidth_mbps, base_price_monthly, category_id, contract_term_months, created_at, description, features, is_available, is_bandwidth_adjustable, max_bandwidth_mbps, min_bandwidth_mbps, name, price_per_mbps, provisioning_time_hours, service_type, setup_fee, technical_specs, updated_at, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
Hibernate: 
    insert 
    into
        singtel_app.services
        (base_bandwidth_mbps, base_price_monthly, category_id, contract_term_months, created_at, description, features, is_available, is_bandwidth_adjustable, max_bandwidth_mbps, min_bandwidth_mbps, name, price_per_mbps, provisioning_time_hours, service_type, setup_fee, technical_specs, updated_at, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-07-12 03:19:21 - JDBC URL to connect to 'dataSource': url='jdbc:postgresql://localhost:35943/itxecebnckxn?user=postgres&password=docker', scope='ServiceRepositoryTest#findDistinctServiceTypes_Success'
2025-07-12 03:19:21 - 
    select
        distinct s1_0.service_type 
    from
        singtel_app.services s1_0 
    where
        s1_0.is_available=true 
    order by
        s1_0.service_type
Hibernate: 
    select
        distinct s1_0.service_type 
    from
        singtel_app.services s1_0 
    where
        s1_0.is_available=true 
    order by
        s1_0.service_type
]]></system-out>
  </testcase>
  <testcase name="findByCategoryId_Success" classname="com.singtel.network.repository.ServiceRepositoryTest" time="0.015">
    <system-out><![CDATA[2025-07-12 03:19:21 - 
    insert 
    into
        singtel_app.service_categories
        (created_at, description, display_order, is_active, name, updated_at, id) 
    values
        (?, ?, ?, ?, ?, ?, ?)
Hibernate: 
    insert 
    into
        singtel_app.service_categories
        (created_at, description, display_order, is_active, name, updated_at, id) 
    values
        (?, ?, ?, ?, ?, ?, ?)
2025-07-12 03:19:21 - 
    insert 
    into
        singtel_app.services
        (base_bandwidth_mbps, base_price_monthly, category_id, contract_term_months, created_at, description, features, is_available, is_bandwidth_adjustable, max_bandwidth_mbps, min_bandwidth_mbps, name, price_per_mbps, provisioning_time_hours, service_type, setup_fee, technical_specs, updated_at, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
Hibernate: 
    insert 
    into
        singtel_app.services
        (base_bandwidth_mbps, base_price_monthly, category_id, contract_term_months, created_at, description, features, is_available, is_bandwidth_adjustable, max_bandwidth_mbps, min_bandwidth_mbps, name, price_per_mbps, provisioning_time_hours, service_type, setup_fee, technical_specs, updated_at, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-07-12 03:19:21 - 
    insert 
    into
        singtel_app.services
        (base_bandwidth_mbps, base_price_monthly, category_id, contract_term_months, created_at, description, features, is_available, is_bandwidth_adjustable, max_bandwidth_mbps, min_bandwidth_mbps, name, price_per_mbps, provisioning_time_hours, service_type, setup_fee, technical_specs, updated_at, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
Hibernate: 
    insert 
    into
        singtel_app.services
        (base_bandwidth_mbps, base_price_monthly, category_id, contract_term_months, created_at, description, features, is_available, is_bandwidth_adjustable, max_bandwidth_mbps, min_bandwidth_mbps, name, price_per_mbps, provisioning_time_hours, service_type, setup_fee, technical_specs, updated_at, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-07-12 03:19:21 - JDBC URL to connect to 'dataSource': url='jdbc:postgresql://localhost:35943/itxecebnckxn?user=postgres&password=docker', scope='ServiceRepositoryTest#findByCategoryId_Success'
2025-07-12 03:19:21 - 
    select
        s1_0.id,
        s1_0.base_bandwidth_mbps,
        s1_0.base_price_monthly,
        s1_0.category_id,
        s1_0.contract_term_months,
        s1_0.created_at,
        s1_0.description,
        s1_0.features,
        s1_0.is_available,
        s1_0.is_bandwidth_adjustable,
        s1_0.max_bandwidth_mbps,
        s1_0.min_bandwidth_mbps,
        s1_0.name,
        s1_0.price_per_mbps,
        s1_0.provisioning_time_hours,
        s1_0.service_type,
        s1_0.setup_fee,
        s1_0.technical_specs,
        s1_0.updated_at 
    from
        singtel_app.services s1_0 
    where
        s1_0.category_id=?
Hibernate: 
    select
        s1_0.id,
        s1_0.base_bandwidth_mbps,
        s1_0.base_price_monthly,
        s1_0.category_id,
        s1_0.contract_term_months,
        s1_0.created_at,
        s1_0.description,
        s1_0.features,
        s1_0.is_available,
        s1_0.is_bandwidth_adjustable,
        s1_0.max_bandwidth_mbps,
        s1_0.min_bandwidth_mbps,
        s1_0.name,
        s1_0.price_per_mbps,
        s1_0.provisioning_time_hours,
        s1_0.service_type,
        s1_0.setup_fee,
        s1_0.technical_specs,
        s1_0.updated_at 
    from
        singtel_app.services s1_0 
    where
        s1_0.category_id=?
]]></system-out>
  </testcase>
  <testcase name="findByCategoryIdWithPagination_Success" classname="com.singtel.network.repository.ServiceRepositoryTest" time="0.014">
    <system-out><![CDATA[2025-07-12 03:19:21 - 
    insert 
    into
        singtel_app.service_categories
        (created_at, description, display_order, is_active, name, updated_at, id) 
    values
        (?, ?, ?, ?, ?, ?, ?)
Hibernate: 
    insert 
    into
        singtel_app.service_categories
        (created_at, description, display_order, is_active, name, updated_at, id) 
    values
        (?, ?, ?, ?, ?, ?, ?)
2025-07-12 03:19:21 - 
    insert 
    into
        singtel_app.services
        (base_bandwidth_mbps, base_price_monthly, category_id, contract_term_months, created_at, description, features, is_available, is_bandwidth_adjustable, max_bandwidth_mbps, min_bandwidth_mbps, name, price_per_mbps, provisioning_time_hours, service_type, setup_fee, technical_specs, updated_at, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
Hibernate: 
    insert 
    into
        singtel_app.services
        (base_bandwidth_mbps, base_price_monthly, category_id, contract_term_months, created_at, description, features, is_available, is_bandwidth_adjustable, max_bandwidth_mbps, min_bandwidth_mbps, name, price_per_mbps, provisioning_time_hours, service_type, setup_fee, technical_specs, updated_at, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-07-12 03:19:21 - 
    insert 
    into
        singtel_app.services
        (base_bandwidth_mbps, base_price_monthly, category_id, contract_term_months, created_at, description, features, is_available, is_bandwidth_adjustable, max_bandwidth_mbps, min_bandwidth_mbps, name, price_per_mbps, provisioning_time_hours, service_type, setup_fee, technical_specs, updated_at, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
Hibernate: 
    insert 
    into
        singtel_app.services
        (base_bandwidth_mbps, base_price_monthly, category_id, contract_term_months, created_at, description, features, is_available, is_bandwidth_adjustable, max_bandwidth_mbps, min_bandwidth_mbps, name, price_per_mbps, provisioning_time_hours, service_type, setup_fee, technical_specs, updated_at, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-07-12 03:19:21 - JDBC URL to connect to 'dataSource': url='jdbc:postgresql://localhost:35943/itxecebnckxn?user=postgres&password=docker', scope='ServiceRepositoryTest#findByCategoryIdWithPagination_Success'
2025-07-12 03:19:21 - 
    select
        s1_0.id,
        s1_0.base_bandwidth_mbps,
        s1_0.base_price_monthly,
        s1_0.category_id,
        s1_0.contract_term_months,
        s1_0.created_at,
        s1_0.description,
        s1_0.features,
        s1_0.is_available,
        s1_0.is_bandwidth_adjustable,
        s1_0.max_bandwidth_mbps,
        s1_0.min_bandwidth_mbps,
        s1_0.name,
        s1_0.price_per_mbps,
        s1_0.provisioning_time_hours,
        s1_0.service_type,
        s1_0.setup_fee,
        s1_0.technical_specs,
        s1_0.updated_at 
    from
        singtel_app.services s1_0 
    where
        s1_0.category_id=? 
    offset
        ? rows 
    fetch
        first ? rows only
Hibernate: 
    select
        s1_0.id,
        s1_0.base_bandwidth_mbps,
        s1_0.base_price_monthly,
        s1_0.category_id,
        s1_0.contract_term_months,
        s1_0.created_at,
        s1_0.description,
        s1_0.features,
        s1_0.is_available,
        s1_0.is_bandwidth_adjustable,
        s1_0.max_bandwidth_mbps,
        s1_0.min_bandwidth_mbps,
        s1_0.name,
        s1_0.price_per_mbps,
        s1_0.provisioning_time_hours,
        s1_0.service_type,
        s1_0.setup_fee,
        s1_0.technical_specs,
        s1_0.updated_at 
    from
        singtel_app.services s1_0 
    where
        s1_0.category_id=? 
    offset
        ? rows 
    fetch
        first ? rows only
2025-07-12 03:19:21 - 
    select
        count(s1_0.id) 
    from
        singtel_app.services s1_0 
    where
        s1_0.category_id=?
Hibernate: 
    select
        count(s1_0.id) 
    from
        singtel_app.services s1_0 
    where
        s1_0.category_id=?
]]></system-out>
  </testcase>
  <testcase name="findByServiceType_Success" classname="com.singtel.network.repository.ServiceRepositoryTest" time="0.012">
    <system-out><![CDATA[2025-07-12 03:19:21 - 
    insert 
    into
        singtel_app.service_categories
        (created_at, description, display_order, is_active, name, updated_at, id) 
    values
        (?, ?, ?, ?, ?, ?, ?)
Hibernate: 
    insert 
    into
        singtel_app.service_categories
        (created_at, description, display_order, is_active, name, updated_at, id) 
    values
        (?, ?, ?, ?, ?, ?, ?)
2025-07-12 03:19:21 - 
    insert 
    into
        singtel_app.services
        (base_bandwidth_mbps, base_price_monthly, category_id, contract_term_months, created_at, description, features, is_available, is_bandwidth_adjustable, max_bandwidth_mbps, min_bandwidth_mbps, name, price_per_mbps, provisioning_time_hours, service_type, setup_fee, technical_specs, updated_at, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
Hibernate: 
    insert 
    into
        singtel_app.services
        (base_bandwidth_mbps, base_price_monthly, category_id, contract_term_months, created_at, description, features, is_available, is_bandwidth_adjustable, max_bandwidth_mbps, min_bandwidth_mbps, name, price_per_mbps, provisioning_time_hours, service_type, setup_fee, technical_specs, updated_at, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-07-12 03:19:21 - 
    insert 
    into
        singtel_app.services
        (base_bandwidth_mbps, base_price_monthly, category_id, contract_term_months, created_at, description, features, is_available, is_bandwidth_adjustable, max_bandwidth_mbps, min_bandwidth_mbps, name, price_per_mbps, provisioning_time_hours, service_type, setup_fee, technical_specs, updated_at, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
Hibernate: 
    insert 
    into
        singtel_app.services
        (base_bandwidth_mbps, base_price_monthly, category_id, contract_term_months, created_at, description, features, is_available, is_bandwidth_adjustable, max_bandwidth_mbps, min_bandwidth_mbps, name, price_per_mbps, provisioning_time_hours, service_type, setup_fee, technical_specs, updated_at, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-07-12 03:19:21 - JDBC URL to connect to 'dataSource': url='jdbc:postgresql://localhost:35943/itxecebnckxn?user=postgres&password=docker', scope='ServiceRepositoryTest#findByServiceType_Success'
2025-07-12 03:19:21 - 
    select
        s1_0.id,
        s1_0.base_bandwidth_mbps,
        s1_0.base_price_monthly,
        s1_0.category_id,
        s1_0.contract_term_months,
        s1_0.created_at,
        s1_0.description,
        s1_0.features,
        s1_0.is_available,
        s1_0.is_bandwidth_adjustable,
        s1_0.max_bandwidth_mbps,
        s1_0.min_bandwidth_mbps,
        s1_0.name,
        s1_0.price_per_mbps,
        s1_0.provisioning_time_hours,
        s1_0.service_type,
        s1_0.setup_fee,
        s1_0.technical_specs,
        s1_0.updated_at 
    from
        singtel_app.services s1_0 
    where
        s1_0.service_type=?
Hibernate: 
    select
        s1_0.id,
        s1_0.base_bandwidth_mbps,
        s1_0.base_price_monthly,
        s1_0.category_id,
        s1_0.contract_term_months,
        s1_0.created_at,
        s1_0.description,
        s1_0.features,
        s1_0.is_available,
        s1_0.is_bandwidth_adjustable,
        s1_0.max_bandwidth_mbps,
        s1_0.min_bandwidth_mbps,
        s1_0.name,
        s1_0.price_per_mbps,
        s1_0.provisioning_time_hours,
        s1_0.service_type,
        s1_0.setup_fee,
        s1_0.technical_specs,
        s1_0.updated_at 
    from
        singtel_app.services s1_0 
    where
        s1_0.service_type=?
]]></system-out>
  </testcase>
  <testcase name="findBandwidthAdjustableServices_Success" classname="com.singtel.network.repository.ServiceRepositoryTest" time="0.012">
    <system-out><![CDATA[2025-07-12 03:19:21 - 
    insert 
    into
        singtel_app.service_categories
        (created_at, description, display_order, is_active, name, updated_at, id) 
    values
        (?, ?, ?, ?, ?, ?, ?)
Hibernate: 
    insert 
    into
        singtel_app.service_categories
        (created_at, description, display_order, is_active, name, updated_at, id) 
    values
        (?, ?, ?, ?, ?, ?, ?)
2025-07-12 03:19:21 - 
    insert 
    into
        singtel_app.services
        (base_bandwidth_mbps, base_price_monthly, category_id, contract_term_months, created_at, description, features, is_available, is_bandwidth_adjustable, max_bandwidth_mbps, min_bandwidth_mbps, name, price_per_mbps, provisioning_time_hours, service_type, setup_fee, technical_specs, updated_at, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
Hibernate: 
    insert 
    into
        singtel_app.services
        (base_bandwidth_mbps, base_price_monthly, category_id, contract_term_months, created_at, description, features, is_available, is_bandwidth_adjustable, max_bandwidth_mbps, min_bandwidth_mbps, name, price_per_mbps, provisioning_time_hours, service_type, setup_fee, technical_specs, updated_at, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-07-12 03:19:21 - 
    insert 
    into
        singtel_app.services
        (base_bandwidth_mbps, base_price_monthly, category_id, contract_term_months, created_at, description, features, is_available, is_bandwidth_adjustable, max_bandwidth_mbps, min_bandwidth_mbps, name, price_per_mbps, provisioning_time_hours, service_type, setup_fee, technical_specs, updated_at, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
Hibernate: 
    insert 
    into
        singtel_app.services
        (base_bandwidth_mbps, base_price_monthly, category_id, contract_term_months, created_at, description, features, is_available, is_bandwidth_adjustable, max_bandwidth_mbps, min_bandwidth_mbps, name, price_per_mbps, provisioning_time_hours, service_type, setup_fee, technical_specs, updated_at, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-07-12 03:19:21 - JDBC URL to connect to 'dataSource': url='jdbc:postgresql://localhost:35943/itxecebnckxn?user=postgres&password=docker', scope='ServiceRepositoryTest#findBandwidthAdjustableServices_Success'
2025-07-12 03:19:21 - 
    select
        s1_0.id,
        s1_0.base_bandwidth_mbps,
        s1_0.base_price_monthly,
        s1_0.category_id,
        s1_0.contract_term_months,
        s1_0.created_at,
        s1_0.description,
        s1_0.features,
        s1_0.is_available,
        s1_0.is_bandwidth_adjustable,
        s1_0.max_bandwidth_mbps,
        s1_0.min_bandwidth_mbps,
        s1_0.name,
        s1_0.price_per_mbps,
        s1_0.provisioning_time_hours,
        s1_0.service_type,
        s1_0.setup_fee,
        s1_0.technical_specs,
        s1_0.updated_at 
    from
        singtel_app.services s1_0 
    where
        s1_0.is_bandwidth_adjustable=true 
        and s1_0.is_available=true
Hibernate: 
    select
        s1_0.id,
        s1_0.base_bandwidth_mbps,
        s1_0.base_price_monthly,
        s1_0.category_id,
        s1_0.contract_term_months,
        s1_0.created_at,
        s1_0.description,
        s1_0.features,
        s1_0.is_available,
        s1_0.is_bandwidth_adjustable,
        s1_0.max_bandwidth_mbps,
        s1_0.min_bandwidth_mbps,
        s1_0.name,
        s1_0.price_per_mbps,
        s1_0.provisioning_time_hours,
        s1_0.service_type,
        s1_0.setup_fee,
        s1_0.technical_specs,
        s1_0.updated_at 
    from
        singtel_app.services s1_0 
    where
        s1_0.is_bandwidth_adjustable=true 
        and s1_0.is_available=true
]]></system-out>
  </testcase>
  <testcase name="findByNameContainingIgnoreCaseWithPagination_Success" classname="com.singtel.network.repository.ServiceRepositoryTest" time="0.014">
    <system-out><![CDATA[2025-07-12 03:19:21 - 
    insert 
    into
        singtel_app.service_categories
        (created_at, description, display_order, is_active, name, updated_at, id) 
    values
        (?, ?, ?, ?, ?, ?, ?)
Hibernate: 
    insert 
    into
        singtel_app.service_categories
        (created_at, description, display_order, is_active, name, updated_at, id) 
    values
        (?, ?, ?, ?, ?, ?, ?)
2025-07-12 03:19:21 - 
    insert 
    into
        singtel_app.services
        (base_bandwidth_mbps, base_price_monthly, category_id, contract_term_months, created_at, description, features, is_available, is_bandwidth_adjustable, max_bandwidth_mbps, min_bandwidth_mbps, name, price_per_mbps, provisioning_time_hours, service_type, setup_fee, technical_specs, updated_at, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
Hibernate: 
    insert 
    into
        singtel_app.services
        (base_bandwidth_mbps, base_price_monthly, category_id, contract_term_months, created_at, description, features, is_available, is_bandwidth_adjustable, max_bandwidth_mbps, min_bandwidth_mbps, name, price_per_mbps, provisioning_time_hours, service_type, setup_fee, technical_specs, updated_at, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-07-12 03:19:21 - 
    insert 
    into
        singtel_app.services
        (base_bandwidth_mbps, base_price_monthly, category_id, contract_term_months, created_at, description, features, is_available, is_bandwidth_adjustable, max_bandwidth_mbps, min_bandwidth_mbps, name, price_per_mbps, provisioning_time_hours, service_type, setup_fee, technical_specs, updated_at, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
Hibernate: 
    insert 
    into
        singtel_app.services
        (base_bandwidth_mbps, base_price_monthly, category_id, contract_term_months, created_at, description, features, is_available, is_bandwidth_adjustable, max_bandwidth_mbps, min_bandwidth_mbps, name, price_per_mbps, provisioning_time_hours, service_type, setup_fee, technical_specs, updated_at, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-07-12 03:19:21 - JDBC URL to connect to 'dataSource': url='jdbc:postgresql://localhost:35943/itxecebnckxn?user=postgres&password=docker', scope='ServiceRepositoryTest#findByNameContainingIgnoreCaseWithPagination_Success'
2025-07-12 03:19:21 - 
    select
        s1_0.id,
        s1_0.base_bandwidth_mbps,
        s1_0.base_price_monthly,
        s1_0.category_id,
        s1_0.contract_term_months,
        s1_0.created_at,
        s1_0.description,
        s1_0.features,
        s1_0.is_available,
        s1_0.is_bandwidth_adjustable,
        s1_0.max_bandwidth_mbps,
        s1_0.min_bandwidth_mbps,
        s1_0.name,
        s1_0.price_per_mbps,
        s1_0.provisioning_time_hours,
        s1_0.service_type,
        s1_0.setup_fee,
        s1_0.technical_specs,
        s1_0.updated_at 
    from
        singtel_app.services s1_0 
    where
        lower(s1_0.name) like lower(('%'||?||'%')) escape '' 
        and s1_0.is_available=true 
    offset
        ? rows 
    fetch
        first ? rows only
Hibernate: 
    select
        s1_0.id,
        s1_0.base_bandwidth_mbps,
        s1_0.base_price_monthly,
        s1_0.category_id,
        s1_0.contract_term_months,
        s1_0.created_at,
        s1_0.description,
        s1_0.features,
        s1_0.is_available,
        s1_0.is_bandwidth_adjustable,
        s1_0.max_bandwidth_mbps,
        s1_0.min_bandwidth_mbps,
        s1_0.name,
        s1_0.price_per_mbps,
        s1_0.provisioning_time_hours,
        s1_0.service_type,
        s1_0.setup_fee,
        s1_0.technical_specs,
        s1_0.updated_at 
    from
        singtel_app.services s1_0 
    where
        lower(s1_0.name) like lower(('%'||?||'%')) escape '' 
        and s1_0.is_available=true 
    offset
        ? rows 
    fetch
        first ? rows only
]]></system-out>
  </testcase>
  <testcase name="findAvailableServices_Success" classname="com.singtel.network.repository.ServiceRepositoryTest" time="0.012">
    <system-out><![CDATA[2025-07-12 03:19:21 - 
    insert 
    into
        singtel_app.service_categories
        (created_at, description, display_order, is_active, name, updated_at, id) 
    values
        (?, ?, ?, ?, ?, ?, ?)
Hibernate: 
    insert 
    into
        singtel_app.service_categories
        (created_at, description, display_order, is_active, name, updated_at, id) 
    values
        (?, ?, ?, ?, ?, ?, ?)
2025-07-12 03:19:21 - 
    insert 
    into
        singtel_app.services
        (base_bandwidth_mbps, base_price_monthly, category_id, contract_term_months, created_at, description, features, is_available, is_bandwidth_adjustable, max_bandwidth_mbps, min_bandwidth_mbps, name, price_per_mbps, provisioning_time_hours, service_type, setup_fee, technical_specs, updated_at, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
Hibernate: 
    insert 
    into
        singtel_app.services
        (base_bandwidth_mbps, base_price_monthly, category_id, contract_term_months, created_at, description, features, is_available, is_bandwidth_adjustable, max_bandwidth_mbps, min_bandwidth_mbps, name, price_per_mbps, provisioning_time_hours, service_type, setup_fee, technical_specs, updated_at, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-07-12 03:19:21 - 
    insert 
    into
        singtel_app.services
        (base_bandwidth_mbps, base_price_monthly, category_id, contract_term_months, created_at, description, features, is_available, is_bandwidth_adjustable, max_bandwidth_mbps, min_bandwidth_mbps, name, price_per_mbps, provisioning_time_hours, service_type, setup_fee, technical_specs, updated_at, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
Hibernate: 
    insert 
    into
        singtel_app.services
        (base_bandwidth_mbps, base_price_monthly, category_id, contract_term_months, created_at, description, features, is_available, is_bandwidth_adjustable, max_bandwidth_mbps, min_bandwidth_mbps, name, price_per_mbps, provisioning_time_hours, service_type, setup_fee, technical_specs, updated_at, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-07-12 03:19:21 - JDBC URL to connect to 'dataSource': url='jdbc:postgresql://localhost:35943/itxecebnckxn?user=postgres&password=docker', scope='ServiceRepositoryTest#findAvailableServices_Success'
2025-07-12 03:19:21 - 
    select
        s1_0.id,
        s1_0.base_bandwidth_mbps,
        s1_0.base_price_monthly,
        s1_0.category_id,
        s1_0.contract_term_months,
        s1_0.created_at,
        s1_0.description,
        s1_0.features,
        s1_0.is_available,
        s1_0.is_bandwidth_adjustable,
        s1_0.max_bandwidth_mbps,
        s1_0.min_bandwidth_mbps,
        s1_0.name,
        s1_0.price_per_mbps,
        s1_0.provisioning_time_hours,
        s1_0.service_type,
        s1_0.setup_fee,
        s1_0.technical_specs,
        s1_0.updated_at 
    from
        singtel_app.services s1_0 
    where
        s1_0.is_available=true
Hibernate: 
    select
        s1_0.id,
        s1_0.base_bandwidth_mbps,
        s1_0.base_price_monthly,
        s1_0.category_id,
        s1_0.contract_term_months,
        s1_0.created_at,
        s1_0.description,
        s1_0.features,
        s1_0.is_available,
        s1_0.is_bandwidth_adjustable,
        s1_0.max_bandwidth_mbps,
        s1_0.min_bandwidth_mbps,
        s1_0.name,
        s1_0.price_per_mbps,
        s1_0.provisioning_time_hours,
        s1_0.service_type,
        s1_0.setup_fee,
        s1_0.technical_specs,
        s1_0.updated_at 
    from
        singtel_app.services s1_0 
    where
        s1_0.is_available=true
]]></system-out>
  </testcase>
</testsuite>